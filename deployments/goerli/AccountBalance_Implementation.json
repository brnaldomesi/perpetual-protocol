{
  "address": "0x039CaAb2470f224465259bEF01ef0dE279990eb3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "clearingHouse",
          "type": "address"
        }
      ],
      "name": "ClearingHouseChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "PnlRealized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "candidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "deregisterBaseToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "getAccountInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "takerPositionSize",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "takerOpenNotional",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lastTwPremiumGrowthGlobalX96",
              "type": "int256"
            }
          ],
          "internalType": "struct AccountMarket.Info",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "getBase",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getBaseTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClearingHouse",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClearingHouseConfig",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "accountValue",
          "type": "int256"
        }
      ],
      "name": "getLiquidatablePositionSize",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getMarginRequirementForLiquidation",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOrderBook",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getPnlAndPendingFee",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "getQuote",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "getTakerOpenNotional",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "getTakerPositionSize",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalAbsPositionValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTotalDebtValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "getTotalOpenNotional",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "getTotalPositionSize",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "getTotalPositionValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "hasOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clearingHouseConfigArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "orderBookArg",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "modifyOwedRealizedPnl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "base",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        }
      ],
      "name": "modifyTakerBalance",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "registerBaseToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clearingHouseArg",
          "type": "address"
        }
      ],
      "name": "setClearingHouse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultArg",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "takerBase",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "takerQuote",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "makerFee",
          "type": "int256"
        }
      ],
      "name": "settleBalanceAndDeregister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "settleOwedRealizedPnl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        }
      ],
      "name": "settlePositionInClosedMarket",
      "outputs": [
        {
          "internalType": "int256",
          "name": "positionNotional",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "openNotional",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "closedPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "settleQuoteToOwedRealizedPnl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "lastTwPremiumGrowthGlobalX96",
          "type": "int256"
        }
      ],
      "name": "updateTwPremiumGrowthGlobal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7122ef670bef275c197f77ddea6aa712d72d0102d283168fd122e4875383b7a",
  "receipt": {
    "to": null,
    "from": "0xAD143E30AD4852c97716ED5b32d45BcCfF7DEa36",
    "contractAddress": "0x039CaAb2470f224465259bEF01ef0dE279990eb3",
    "transactionIndex": 41,
    "gasUsed": "2681048",
    "logsBloom": "0x
    "blockHash": "0xf87e430d334cf7efcfc25193e3e8fedde719e3d6f0323fed5dffa8b62ac8df0e",
    "transactionHash": "0xa7122ef670bef275c197f77ddea6aa712d72d0102d283168fd122e4875383b7a",
    "logs": [],
    "blockNumber": 7678444,
    "cumulativeGasUsed": "7256902",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7a16bbbc5c6fea2b6505d4631b28aae2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"clearingHouse\",\"type\":\"address\"}],\"name\":\"ClearingHouseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"PnlRealized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"deregisterBaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"takerPositionSize\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"takerOpenNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastTwPremiumGrowthGlobalX96\",\"type\":\"int256\"}],\"internalType\":\"struct AccountMarket.Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getBase\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getBaseTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClearingHouse\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClearingHouseConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"accountValue\",\"type\":\"int256\"}],\"name\":\"getLiquidatablePositionSize\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getMarginRequirementForLiquidation\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrderBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getPnlAndPendingFee\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getQuote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getTakerOpenNotional\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getTakerPositionSize\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalAbsPositionValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTotalDebtValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getTotalOpenNotional\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getTotalPositionSize\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getTotalPositionValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"hasOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clearingHouseConfigArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"orderBookArg\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"modifyOwedRealizedPnl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"}],\"name\":\"modifyTakerBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"registerBaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clearingHouseArg\",\"type\":\"address\"}],\"name\":\"setClearingHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultArg\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"takerBase\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"takerQuote\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"makerFee\",\"type\":\"int256\"}],\"name\":\"settleBalanceAndDeregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"settleOwedRealizedPnl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"settlePositionInClosedMarket\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"positionNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"openNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"closedPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"settleQuoteToOwedRealizedPnl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"lastTwPremiumGrowthGlobalX96\",\"type\":\"int256\"}],\"name\":\"updateTwPremiumGrowthGlobal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"candidate()\":{\"details\":\"Returns the candidate that can become the owner.\"},\"deregisterBaseToken(address,address)\":{\"details\":\"Only used by `ClearingHouse` contract, this function is expensive, due to for loop\",\"params\":{\"baseToken\":\"The address of the trader's base token\",\"trader\":\"The address of the trader\"}},\"getAccountInfo(address,address)\":{\"params\":{\"baseToken\":\"The address of baseToken\",\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"The baseToken account info of trader\"}},\"getBase(address,address)\":{\"details\":\"`base amount = takerPositionSize - orderBaseDebt`\",\"params\":{\"baseToken\":\"The address of baseToken\",\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"The base amount of trader's baseToken market\"}},\"getBaseTokens(address)\":{\"params\":{\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"The array of baseToken address\"}},\"getClearingHouseConfig()\":{\"returns\":{\"_0\":\"The address of ClearingHouseConfig\"}},\"getLiquidatablePositionSize(address,address,int256)\":{\"params\":{\"accountValue\":\"The account value of trader\",\"baseToken\":\"The address of baseToken\",\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"liquidatablePositionSize The liquidatable position size of trader's baseToken market\"}},\"getMarginRequirementForLiquidation(address)\":{\"details\":\"This is different from `Vault._getTotalMarginRequirement()`, which is for freeCollateral calculation\",\"params\":{\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"It is compared with `ClearingHouse.getAccountValue` which is also an int\"}},\"getOrderBook()\":{\"returns\":{\"_0\":\"The address of OrderBook\"}},\"getPnlAndPendingFee(address)\":{\"params\":{\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"the pnl realized already but stored temporarily in AccountBalance\",\"_1\":\"the pnl not yet realized\",\"_2\":\"the pending fee of maker earned\"}},\"getQuote(address,address)\":{\"details\":\"`quote amount = takerOpenNotional - orderQuoteDebt`\",\"params\":{\"baseToken\":\"The address of baseToken\",\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"The quote amount of trader's baseToken market\"}},\"getTakerOpenNotional(address,address)\":{\"params\":{\"baseToken\":\"The address of baseToken\",\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"The taker cost of trader's baseToken\"}},\"getTakerPositionSize(address,address)\":{\"details\":\"This will only has taker position, can get maker impermanent position through `getTotalPositionSize`\",\"params\":{\"baseToken\":\"The address of baseToken\",\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"The taker position size of trader's baseToken market\"}},\"getTotalAbsPositionValue(address)\":{\"params\":{\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"Sum up positions value of every market\"}},\"getTotalDebtValue(address)\":{\"details\":\"Total debt value will relate to `Vault.getFreeCollateral()`\",\"params\":{\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"The debt value of trader\"}},\"getTotalOpenNotional(address,address)\":{\"params\":{\"baseToken\":\"The address of baseToken\",\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"the amount of quote token paid for a position when opening\"}},\"getTotalPositionSize(address,address)\":{\"details\":\"`total position size = taker position size + maker impermanent position size`\",\"params\":{\"baseToken\":\"The address of baseToken\",\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"The total position size of trader's baseToken market\"}},\"getTotalPositionValue(address,address)\":{\"details\":\"A negative returned value is only be used when calculating pnl,we use `15 mins` twap to calc position value\",\"params\":{\"baseToken\":\"The address of baseToken\",\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"Total position value of trader's baseToken market\"}},\"getVault()\":{\"returns\":{\"_0\":\"The address of Vault\"}},\"hasOrder(address)\":{\"params\":{\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"True of false\"}},\"modifyOwedRealizedPnl(address,int256)\":{\"details\":\"Only used by `ClearingHouse` contract\",\"params\":{\"amount\":\"Modified amount of owedRealizedPnl\",\"trader\":\"The address of the trader\"}},\"modifyTakerBalance(address,address,int256,int256)\":{\"details\":\"Only used by `ClearingHouse` contract\",\"params\":{\"base\":\"Modified amount of base\",\"baseToken\":\"The address of the baseToken\",\"quote\":\"Modified amount of quote\",\"trader\":\"The address of the trader\"},\"returns\":{\"_0\":\"Taker position size after modified\",\"_1\":\"Taker open notional after modified\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerBaseToken(address,address)\":{\"details\":\"Only used by `ClearingHouse` contract\",\"params\":{\"baseToken\":\"The address of the trader's base token\",\"trader\":\"The address of the trader\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOwner(address)\":{\"details\":\"Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"settleBalanceAndDeregister(address,address,int256,int256,int256,int256)\":{\"details\":\"Only used by `ClearingHouse` contract\",\"params\":{\"baseToken\":\"The address of the baseToken\",\"makerFee\":\"Amount of maker fee collected from pool\",\"realizedPnl\":\"Amount of pnl realized\",\"takerBase\":\"Modified amount of taker base\",\"takerQuote\":\"Modified amount of taker quote\",\"trader\":\"The address of the trader\"}},\"settleOwedRealizedPnl(address)\":{\"details\":\"Only used by `Vault.withdraw()`\",\"params\":{\"trader\":\"The address of the trader\"},\"returns\":{\"_0\":\"Settled owedRealizedPnl\"}},\"settlePositionInClosedMarket(address,address)\":{\"details\":\"we don't do swap to get position notional here.      we define the position notional in a closed market is `closed price * position size`\",\"params\":{\"baseToken\":\"The address of the trader's base token\",\"trader\":\"The address of the trader\"},\"returns\":{\"closedPrice\":\"The closed price of the closed market\",\"openNotional\":\"Taker's open notional\",\"positionNotional\":\"Taker's position notional settled with closed price\",\"realizedPnl\":\"Settled realized pnl\"}},\"settleQuoteToOwedRealizedPnl(address,address,int256)\":{\"details\":\"Only used by `ClearingHouse` contract\",\"params\":{\"amount\":\"Settled quote amount\",\"baseToken\":\"The address of the baseToken\",\"trader\":\"The address of the trader\"}},\"updateOwner()\":{\"details\":\"Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner.\"},\"updateTwPremiumGrowthGlobal(address,address,int256)\":{\"details\":\"Only used by `ClearingHouse` contract\",\"params\":{\"baseToken\":\"The address of baseToken\",\"lastTwPremiumGrowthGlobalX96\":\"The last Twap Premium\",\"trader\":\"The address of trader\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deregisterBaseToken(address,address)\":{\"notice\":\"Deregister baseToken from trader accountInfo\"},\"getAccountInfo(address,address)\":{\"notice\":\"Get trader account info\"},\"getBase(address,address)\":{\"notice\":\"Get trader base amount\"},\"getBaseTokens(address)\":{\"notice\":\"Get trader registered baseTokens\"},\"getClearingHouseConfig()\":{\"notice\":\"Get `ClearingHouseConfig` address\"},\"getLiquidatablePositionSize(address,address,int256)\":{\"notice\":\"Get liquidatable position size of trader's baseToken market\"},\"getMarginRequirementForLiquidation(address)\":{\"notice\":\"Get margin requirement to check whether trader will be able to liquidate\"},\"getOrderBook()\":{\"notice\":\"Get `OrderBook` address\"},\"getPnlAndPendingFee(address)\":{\"notice\":\"Get owedRealizedPnl, unrealizedPnl and pending fee\"},\"getQuote(address,address)\":{\"notice\":\"Get trader quote amount\"},\"getTakerOpenNotional(address,address)\":{\"notice\":\"Get taker cost of trader's baseToken\"},\"getTakerPositionSize(address,address)\":{\"notice\":\"Get taker position size of trader's baseToken market\"},\"getTotalAbsPositionValue(address)\":{\"notice\":\"Get all market position abs value of trader\"},\"getTotalDebtValue(address)\":{\"notice\":\"Get total debt value of trader\"},\"getTotalOpenNotional(address,address)\":{\"notice\":\"Get total cost of trader's baseToken\"},\"getTotalPositionSize(address,address)\":{\"notice\":\"Get total position size of trader's baseToken market\"},\"getTotalPositionValue(address,address)\":{\"notice\":\"Get total position value of trader's baseToken market\"},\"getVault()\":{\"notice\":\"Get `Vault` address\"},\"hasOrder(address)\":{\"notice\":\"Check trader has open order in open/closed market.\"},\"modifyOwedRealizedPnl(address,int256)\":{\"notice\":\"Modify trader owedRealizedPnl\"},\"modifyTakerBalance(address,address,int256,int256)\":{\"notice\":\"Modify trader account balance\"},\"registerBaseToken(address,address)\":{\"notice\":\"Every time a trader's position value is checked, the base token list of this trader will be traversed; thus, this list should be kept as short as possible\"},\"settleBalanceAndDeregister(address,address,int256,int256,int256,int256)\":{\"notice\":\"Settle account balance and deregister base token\"},\"settleOwedRealizedPnl(address)\":{\"notice\":\"Settle owedRealizedPnl\"},\"settlePositionInClosedMarket(address,address)\":{\"notice\":\"Settle trader's PnL in closed market\"},\"settleQuoteToOwedRealizedPnl(address,address,int256)\":{\"notice\":\"Modify trader owedRealizedPnl\"},\"updateTwPremiumGrowthGlobal(address,address,int256)\":{\"notice\":\"Update trader Twap premium info\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AccountBalance.sol\":\"AccountBalance\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xe391db37b722a67addfa9fce3101edf44ba68e2e12ae6fd74d68677b04ffd5a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf149581d28e1c81736dfe72be73ee1301d4945340cc6282fcdd63fe3c85abf24\",\"license\":\"GPL-2.0-or-later\"},\"contracts/AccountBalance.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { AddressUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { ClearingHouseCallee } from \\\"./base/ClearingHouseCallee.sol\\\";\\nimport { PerpSafeCast } from \\\"./lib/PerpSafeCast.sol\\\";\\nimport { PerpMath } from \\\"./lib/PerpMath.sol\\\";\\nimport { IExchange } from \\\"./interface/IExchange.sol\\\";\\nimport { IBaseToken } from \\\"./interface/IBaseToken.sol\\\";\\nimport { IIndexPrice } from \\\"./interface/IIndexPrice.sol\\\";\\nimport { IOrderBook } from \\\"./interface/IOrderBook.sol\\\";\\nimport { IClearingHouseConfig } from \\\"./interface/IClearingHouseConfig.sol\\\";\\nimport { AccountBalanceStorageV1, AccountMarket } from \\\"./storage/AccountBalanceStorage.sol\\\";\\nimport { BlockContext } from \\\"./base/BlockContext.sol\\\";\\nimport { IAccountBalance } from \\\"./interface/IAccountBalance.sol\\\";\\n\\n// never inherit any new stateful contract. never change the orders of parent stateful contracts\\ncontract AccountBalance is IAccountBalance, BlockContext, ClearingHouseCallee, AccountBalanceStorageV1 {\\n    using AddressUpgradeable for address;\\n    using SafeMathUpgradeable for uint256;\\n    using SignedSafeMathUpgradeable for int256;\\n    using PerpSafeCast for uint256;\\n    using PerpSafeCast for int256;\\n    using PerpMath for uint256;\\n    using PerpMath for int256;\\n    using PerpMath for uint160;\\n    using AccountMarket for AccountMarket.Info;\\n\\n    //\\n    // CONSTANT\\n    //\\n\\n    uint256 internal constant _DUST = 10 wei;\\n    uint256 internal constant _MIN_PARTIAL_LIQUIDATE_POSITION_VALUE = 100e18 wei; // 100 USD in decimal 18\\n\\n    //\\n    // EXTERNAL NON-VIEW\\n    //\\n\\n    function initialize(address clearingHouseConfigArg, address orderBookArg) external initializer {\\n        // IClearingHouseConfig address is not contract\\n        require(clearingHouseConfigArg.isContract(), \\\"AB_CHCNC\\\");\\n\\n        // IOrderBook is not contract\\n        require(orderBookArg.isContract(), \\\"AB_OBNC\\\");\\n\\n        __ClearingHouseCallee_init();\\n\\n        _clearingHouseConfig = clearingHouseConfigArg;\\n        _orderBook = orderBookArg;\\n    }\\n\\n    function setVault(address vaultArg) external onlyOwner {\\n        // vault address is not contract\\n        require(vaultArg.isContract(), \\\"AB_VNC\\\");\\n        _vault = vaultArg;\\n        emit VaultChanged(vaultArg);\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function modifyTakerBalance(\\n        address trader,\\n        address baseToken,\\n        int256 base,\\n        int256 quote\\n    ) external override returns (int256, int256) {\\n        _requireOnlyClearingHouse();\\n        return _modifyTakerBalance(trader, baseToken, base, quote);\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function modifyOwedRealizedPnl(address trader, int256 amount) external override {\\n        _requireOnlyClearingHouse();\\n        _modifyOwedRealizedPnl(trader, amount);\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function settleQuoteToOwedRealizedPnl(\\n        address trader,\\n        address baseToken,\\n        int256 amount\\n    ) external override {\\n        _requireOnlyClearingHouse();\\n        _settleQuoteToOwedRealizedPnl(trader, baseToken, amount);\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function settleOwedRealizedPnl(address trader) external override returns (int256) {\\n        // only vault\\n        require(_msgSender() == _vault, \\\"AB_OV\\\");\\n        int256 owedRealizedPnl = _owedRealizedPnlMap[trader];\\n        _owedRealizedPnlMap[trader] = 0;\\n\\n        return owedRealizedPnl;\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function settleBalanceAndDeregister(\\n        address trader,\\n        address baseToken,\\n        int256 takerBase,\\n        int256 takerQuote,\\n        int256 realizedPnl,\\n        int256 makerFee\\n    ) external override {\\n        _requireOnlyClearingHouse();\\n        _modifyTakerBalance(trader, baseToken, takerBase, takerQuote);\\n        _modifyOwedRealizedPnl(trader, makerFee);\\n\\n        // @audit should merge _addOwedRealizedPnl and settleQuoteToOwedRealizedPnl in some way.\\n        // PnlRealized will be emitted three times when removing trader's liquidity\\n        _settleQuoteToOwedRealizedPnl(trader, baseToken, realizedPnl);\\n        _deregisterBaseToken(trader, baseToken);\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function registerBaseToken(address trader, address baseToken) external override {\\n        _requireOnlyClearingHouse();\\n        address[] storage tokensStorage = _baseTokensMap[trader];\\n        if (_hasBaseToken(tokensStorage, baseToken)) {\\n            return;\\n        }\\n\\n        tokensStorage.push(baseToken);\\n        // AB_MNE: markets number exceeds\\n        require(tokensStorage.length <= IClearingHouseConfig(_clearingHouseConfig).getMaxMarketsPerAccount(), \\\"AB_MNE\\\");\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function deregisterBaseToken(address trader, address baseToken) external override {\\n        _requireOnlyClearingHouse();\\n        _deregisterBaseToken(trader, baseToken);\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function updateTwPremiumGrowthGlobal(\\n        address trader,\\n        address baseToken,\\n        int256 lastTwPremiumGrowthGlobalX96\\n    ) external override {\\n        _requireOnlyClearingHouse();\\n        _accountMarketMap[trader][baseToken].lastTwPremiumGrowthGlobalX96 = lastTwPremiumGrowthGlobalX96;\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    /// @dev we don't do swap to get position notional here.\\n    ///      we define the position notional in a closed market is `closed price * position size`\\n    function settlePositionInClosedMarket(address trader, address baseToken)\\n        external\\n        override\\n        returns (\\n            int256 positionNotional,\\n            int256 openNotional,\\n            int256 realizedPnl,\\n            uint256 closedPrice\\n        )\\n    {\\n        _requireOnlyClearingHouse();\\n\\n        int256 positionSize = getTakerPositionSize(trader, baseToken);\\n\\n        closedPrice = IBaseToken(baseToken).getClosedPrice();\\n        positionNotional = positionSize.mulDiv(closedPrice.toInt256(), 1e18);\\n        openNotional = _accountMarketMap[trader][baseToken].takerOpenNotional;\\n        realizedPnl = positionNotional.add(openNotional);\\n\\n        _deleteBaseToken(trader, baseToken);\\n        _modifyOwedRealizedPnl(trader, realizedPnl);\\n\\n        return (positionNotional, openNotional, realizedPnl, closedPrice);\\n    }\\n\\n    //\\n    // EXTERNAL VIEW\\n    //\\n\\n    /// @inheritdoc IAccountBalance\\n    function getClearingHouseConfig() external view override returns (address) {\\n        return _clearingHouseConfig;\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getOrderBook() external view override returns (address) {\\n        return _orderBook;\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getVault() external view override returns (address) {\\n        return _vault;\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getBaseTokens(address trader) external view override returns (address[] memory) {\\n        return _baseTokensMap[trader];\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getAccountInfo(address trader, address baseToken)\\n        external\\n        view\\n        override\\n        returns (AccountMarket.Info memory)\\n    {\\n        return _accountMarketMap[trader][baseToken];\\n    }\\n\\n    // @inheritdoc IAccountBalance\\n    function getTakerOpenNotional(address trader, address baseToken) external view override returns (int256) {\\n        return _accountMarketMap[trader][baseToken].takerOpenNotional;\\n    }\\n\\n    // @inheritdoc IAccountBalance\\n    function getTotalOpenNotional(address trader, address baseToken) external view override returns (int256) {\\n        // quote.pool[baseToken] + quoteBalance[baseToken]\\n        (uint256 quoteInPool, ) =\\n            IOrderBook(_orderBook).getTotalTokenAmountInPoolAndPendingFee(trader, baseToken, false);\\n        int256 quoteBalance = getQuote(trader, baseToken);\\n        return quoteInPool.toInt256().add(quoteBalance);\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getTotalDebtValue(address trader) external view override returns (uint256) {\\n        int256 totalQuoteBalance;\\n        int256 totalBaseDebtValue;\\n        uint256 tokenLen = _baseTokensMap[trader].length;\\n        for (uint256 i = 0; i < tokenLen; i++) {\\n            address baseToken = _baseTokensMap[trader][i];\\n            int256 baseBalance = getBase(trader, baseToken);\\n            int256 baseDebtValue;\\n            // baseDebt = baseBalance when it's negative\\n            if (baseBalance < 0) {\\n                // baseDebtValue = baseDebt * indexPrice\\n                baseDebtValue = baseBalance.mulDiv(_getReferencePrice(baseToken).toInt256(), 1e18);\\n            }\\n            totalBaseDebtValue = totalBaseDebtValue.add(baseDebtValue);\\n\\n            // we can't calculate totalQuoteDebtValue until we have totalQuoteBalance\\n            totalQuoteBalance = totalQuoteBalance.add(getQuote(trader, baseToken));\\n        }\\n        int256 totalQuoteDebtValue = totalQuoteBalance >= 0 ? 0 : totalQuoteBalance;\\n\\n        // both values are negative due to the above condition checks\\n        return totalQuoteDebtValue.add(totalBaseDebtValue).abs();\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getPnlAndPendingFee(address trader)\\n        external\\n        view\\n        override\\n        returns (\\n            int256,\\n            int256,\\n            uint256\\n        )\\n    {\\n        int256 totalPositionValue;\\n        uint256 tokenLen = _baseTokensMap[trader].length;\\n        for (uint256 i = 0; i < tokenLen; i++) {\\n            address baseToken = _baseTokensMap[trader][i];\\n            totalPositionValue = totalPositionValue.add(getTotalPositionValue(trader, baseToken));\\n        }\\n        (int256 netQuoteBalance, uint256 pendingFee) = _getNetQuoteBalanceAndPendingFee(trader);\\n        int256 unrealizedPnl = totalPositionValue.add(netQuoteBalance);\\n\\n        return (_owedRealizedPnlMap[trader], unrealizedPnl, pendingFee);\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function hasOrder(address trader) external view override returns (bool) {\\n        uint256 tokenLen = _baseTokensMap[trader].length;\\n        address[] memory tokens = new address[](tokenLen);\\n\\n        uint256 skipped = 0;\\n        for (uint256 i = 0; i < tokenLen; i++) {\\n            address baseToken = _baseTokensMap[trader][i];\\n            if (!IBaseToken(baseToken).isOpen()) {\\n                skipped++;\\n                continue;\\n            }\\n            tokens[i - skipped] = baseToken;\\n        }\\n\\n        return IOrderBook(_orderBook).hasOrder(trader, tokens);\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getLiquidatablePositionSize(\\n        address trader,\\n        address baseToken,\\n        int256 accountValue\\n    ) external view override returns (int256) {\\n        int256 marginRequirement = getMarginRequirementForLiquidation(trader);\\n        int256 positionSize = getTotalPositionSize(trader, baseToken);\\n\\n        // No liquidatable position\\n        if (accountValue >= marginRequirement || positionSize == 0) {\\n            return 0;\\n        }\\n\\n        // Liquidate the entire position if its value is small enough\\n        // to prevent tiny positions left in the system\\n        uint256 positionValueAbs = _getPositionValue(baseToken, positionSize).abs();\\n        if (positionValueAbs <= _MIN_PARTIAL_LIQUIDATE_POSITION_VALUE) {\\n            return positionSize;\\n        }\\n\\n        // https://www.notion.so/perp/Backstop-LP-Spec-614b42798d4943768c2837bfe659524d#968996cadaec4c00ac60bd1da02ea8bb\\n        // Liquidator can only take over partial position if margin ratio is \\u2265 3.125% (aka the half of mmRatio).\\n        // If margin ratio < 3.125%, liquidator can take over the entire position.\\n        //\\n        // threshold = mmRatio / 2 = 3.125%\\n        // if marginRatio >= threshold, then\\n        //    maxLiquidateRatio = MIN(1, 0.5 * totalAbsPositionValue / absPositionValue)\\n        // if marginRatio < threshold, then\\n        //    maxLiquidateRatio = 1\\n        uint24 maxLiquidateRatio = 1e6; // 100%\\n        if (accountValue >= marginRequirement.div(2)) {\\n            // maxLiquidateRatio = getTotalAbsPositionValue / ( getTotalPositionValueInMarket.abs * 2 )\\n            maxLiquidateRatio = FullMath\\n                .mulDiv(getTotalAbsPositionValue(trader), 1e6, positionValueAbs.mul(2))\\n                .toUint24();\\n            if (maxLiquidateRatio > 1e6) {\\n                maxLiquidateRatio = 1e6;\\n            }\\n        }\\n\\n        return positionSize.mulRatio(maxLiquidateRatio);\\n    }\\n\\n    //\\n    // PUBLIC VIEW\\n    //\\n\\n    /// @inheritdoc IAccountBalance\\n    function getBase(address trader, address baseToken) public view override returns (int256) {\\n        uint256 orderDebt = IOrderBook(_orderBook).getTotalOrderDebt(trader, baseToken, true);\\n        // base = takerPositionSize - orderBaseDebt\\n        return _accountMarketMap[trader][baseToken].takerPositionSize.sub(orderDebt.toInt256());\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getQuote(address trader, address baseToken) public view override returns (int256) {\\n        uint256 orderDebt = IOrderBook(_orderBook).getTotalOrderDebt(trader, baseToken, false);\\n        // quote = takerOpenNotional - orderQuoteDebt\\n        return _accountMarketMap[trader][baseToken].takerOpenNotional.sub(orderDebt.toInt256());\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getTakerPositionSize(address trader, address baseToken) public view override returns (int256) {\\n        int256 positionSize = _accountMarketMap[trader][baseToken].takerPositionSize;\\n        return positionSize.abs() < _DUST ? 0 : positionSize;\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getTotalPositionSize(address trader, address baseToken) public view override returns (int256) {\\n        // NOTE: when a token goes into UniswapV3 pool (addLiquidity or swap), there would be 1 wei rounding error\\n        // for instance, maker adds liquidity with 2 base (2000000000000000000),\\n        // the actual base amount in pool would be 1999999999999999999\\n\\n        // makerBalance = totalTokenAmountInPool - totalOrderDebt\\n        (uint256 totalBaseBalanceFromOrders, ) =\\n            IOrderBook(_orderBook).getTotalTokenAmountInPoolAndPendingFee(trader, baseToken, true);\\n        uint256 totalBaseDebtFromOrder = IOrderBook(_orderBook).getTotalOrderDebt(trader, baseToken, true);\\n        int256 makerBaseBalance = totalBaseBalanceFromOrders.toInt256().sub(totalBaseDebtFromOrder.toInt256());\\n\\n        int256 takerPositionSize = _accountMarketMap[trader][baseToken].takerPositionSize;\\n        int256 totalPositionSize = makerBaseBalance.add(takerPositionSize);\\n        return totalPositionSize.abs() < _DUST ? 0 : totalPositionSize;\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getTotalPositionValue(address trader, address baseToken) public view override returns (int256) {\\n        int256 positionSize = getTotalPositionSize(trader, baseToken);\\n        return _getPositionValue(baseToken, positionSize);\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getTotalAbsPositionValue(address trader) public view override returns (uint256) {\\n        address[] memory tokens = _baseTokensMap[trader];\\n        uint256 totalPositionValue;\\n        uint256 tokenLen = tokens.length;\\n        for (uint256 i = 0; i < tokenLen; i++) {\\n            address baseToken = tokens[i];\\n            // will not use negative value in this case\\n            uint256 positionValue = getTotalPositionValue(trader, baseToken).abs();\\n            totalPositionValue = totalPositionValue.add(positionValue);\\n        }\\n        return totalPositionValue;\\n    }\\n\\n    /// @inheritdoc IAccountBalance\\n    function getMarginRequirementForLiquidation(address trader) public view override returns (int256) {\\n        return\\n            getTotalAbsPositionValue(trader)\\n                .mulRatio(IClearingHouseConfig(_clearingHouseConfig).getMmRatio())\\n                .toInt256();\\n    }\\n\\n    //\\n    // INTERNAL NON-VIEW\\n    //\\n    function _modifyTakerBalance(\\n        address trader,\\n        address baseToken,\\n        int256 base,\\n        int256 quote\\n    ) internal returns (int256, int256) {\\n        AccountMarket.Info storage accountInfo = _accountMarketMap[trader][baseToken];\\n        accountInfo.takerPositionSize = accountInfo.takerPositionSize.add(base);\\n        accountInfo.takerOpenNotional = accountInfo.takerOpenNotional.add(quote);\\n        return (accountInfo.takerPositionSize, accountInfo.takerOpenNotional);\\n    }\\n\\n    function _modifyOwedRealizedPnl(address trader, int256 amount) internal {\\n        if (amount != 0) {\\n            _owedRealizedPnlMap[trader] = _owedRealizedPnlMap[trader].add(amount);\\n            emit PnlRealized(trader, amount);\\n        }\\n    }\\n\\n    function _settleQuoteToOwedRealizedPnl(\\n        address trader,\\n        address baseToken,\\n        int256 amount\\n    ) internal {\\n        if (amount != 0) {\\n            AccountMarket.Info storage accountInfo = _accountMarketMap[trader][baseToken];\\n            accountInfo.takerOpenNotional = accountInfo.takerOpenNotional.sub(amount);\\n            _modifyOwedRealizedPnl(trader, amount);\\n        }\\n    }\\n\\n    /// @dev this function is expensive\\n    function _deregisterBaseToken(address trader, address baseToken) internal {\\n        AccountMarket.Info memory info = _accountMarketMap[trader][baseToken];\\n        if (info.takerPositionSize.abs() >= _DUST || info.takerOpenNotional.abs() >= _DUST) {\\n            return;\\n        }\\n\\n        if (IOrderBook(_orderBook).getOpenOrderIds(trader, baseToken).length > 0) {\\n            return;\\n        }\\n\\n        _deleteBaseToken(trader, baseToken);\\n    }\\n\\n    function _deleteBaseToken(address trader, address baseToken) internal {\\n        delete _accountMarketMap[trader][baseToken];\\n\\n        address[] storage tokensStorage = _baseTokensMap[trader];\\n        uint256 tokenLen = tokensStorage.length;\\n        for (uint256 i; i < tokenLen; i++) {\\n            if (tokensStorage[i] == baseToken) {\\n                // if the target to be removed is the last one, pop it directly;\\n                // else, replace it with the last one and pop the last one instead\\n                if (i != tokenLen - 1) {\\n                    tokensStorage[i] = tokensStorage[tokenLen - 1];\\n                }\\n                tokensStorage.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    //\\n    // INTERNAL VIEW\\n    //\\n\\n    function _getPositionValue(address baseToken, int256 positionSize) internal view returns (int256) {\\n        if (positionSize == 0) return 0;\\n\\n        uint256 indexTwap = _getReferencePrice(baseToken);\\n        // both positionSize & indexTwap are in 10^18 already\\n        // overflow inspection:\\n        // only overflow when position value in USD(18 decimals) > 2^255 / 10^18\\n        return positionSize.mulDiv(indexTwap.toInt256(), 1e18);\\n    }\\n\\n    function _getReferencePrice(address baseToken) internal view returns (uint256) {\\n        return\\n            IBaseToken(baseToken).isClosed()\\n                ? IBaseToken(baseToken).getClosedPrice()\\n                : IIndexPrice(baseToken).getIndexPrice(IClearingHouseConfig(_clearingHouseConfig).getTwapInterval());\\n    }\\n\\n    /// @return netQuoteBalance = quote.balance + totalQuoteInPools\\n    function _getNetQuoteBalanceAndPendingFee(address trader)\\n        internal\\n        view\\n        returns (int256 netQuoteBalance, uint256 pendingFee)\\n    {\\n        int256 totalTakerQuoteBalance;\\n        uint256 tokenLen = _baseTokensMap[trader].length;\\n        for (uint256 i = 0; i < tokenLen; i++) {\\n            address baseToken = _baseTokensMap[trader][i];\\n            totalTakerQuoteBalance = totalTakerQuoteBalance.add(_accountMarketMap[trader][baseToken].takerOpenNotional);\\n        }\\n\\n        // pendingFee is included\\n        int256 totalMakerQuoteBalance;\\n        (totalMakerQuoteBalance, pendingFee) = IOrderBook(_orderBook).getTotalQuoteBalanceAndPendingFee(\\n            trader,\\n            _baseTokensMap[trader]\\n        );\\n        netQuoteBalance = totalTakerQuoteBalance.add(totalMakerQuoteBalance);\\n\\n        return (netQuoteBalance, pendingFee);\\n    }\\n\\n    function _hasBaseToken(address[] memory baseTokens, address baseToken) internal pure returns (bool) {\\n        for (uint256 i = 0; i < baseTokens.length; i++) {\\n            if (baseTokens[i] == baseToken) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x9615f06845aceef4245fd667a8e913dfbae4293309b06b4ebc1eab5571864f20\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/BlockContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nabstract contract BlockContext {\\n    function _blockTimestamp() internal view virtual returns (uint256) {\\n        // Reply from Arbitrum\\n        // block.timestamp returns timestamp at the time at which the sequencer receives the tx.\\n        // It may not actually correspond to a particular L1 block\\n        return block.timestamp;\\n    }\\n\\n    function _blockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x455054044e1f075154181baf8edd65afb60e47cfe6ad702297ba14975c8ba8a6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/ClearingHouseCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeOwnable } from \\\"./SafeOwnable.sol\\\";\\n\\nabstract contract ClearingHouseCallee is SafeOwnable {\\n    //\\n    // STATE\\n    //\\n    address internal _clearingHouse;\\n\\n    // __gap is reserved storage\\n    uint256[50] private __gap;\\n\\n    //\\n    // EVENT\\n    //\\n    event ClearingHouseChanged(address indexed clearingHouse);\\n\\n    //\\n    // CONSTRUCTOR\\n    //\\n\\n    // solhint-disable-next-line func-order\\n    function __ClearingHouseCallee_init() internal initializer {\\n        __SafeOwnable_init();\\n    }\\n\\n    function setClearingHouse(address clearingHouseArg) external onlyOwner {\\n        _clearingHouse = clearingHouseArg;\\n        emit ClearingHouseChanged(clearingHouseArg);\\n    }\\n\\n    function getClearingHouse() external view returns (address) {\\n        return _clearingHouse;\\n    }\\n\\n    function _requireOnlyClearingHouse() internal view {\\n        // only ClearingHouse\\n        require(_msgSender() == _clearingHouse, \\\"CHD_OCH\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x080365d85efd61495cf06d771600cc51ae4a779d58bf7b6fdbc3f0ff7a92735d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nabstract contract SafeOwnable is ContextUpgradeable {\\n    address private _owner;\\n    address private _candidate;\\n\\n    // __gap is reserved storage\\n    uint256[50] private __gap;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        // caller not owner\\n        require(owner() == _msgSender(), \\\"SO_CNO\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __SafeOwnable_init() internal initializer {\\n        __Context_init();\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        // emitting event first to avoid caching values\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n        _candidate = address(0);\\n    }\\n\\n    /**\\n     * @dev Set ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function setOwner(address newOwner) external onlyOwner {\\n        // newOwner is 0\\n        require(newOwner != address(0), \\\"SO_NW0\\\");\\n        // same as original\\n        require(newOwner != _owner, \\\"SO_SAO\\\");\\n        // same as candidate\\n        require(newOwner != _candidate, \\\"SO_SAC\\\");\\n\\n        _candidate = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`_candidate`).\\n     * Can only be called by the new owner.\\n     */\\n    function updateOwner() external {\\n        // candidate is zero\\n        require(_candidate != address(0), \\\"SO_C0\\\");\\n        // caller is not candidate\\n        require(_candidate == _msgSender(), \\\"SO_CNC\\\");\\n\\n        // emitting event first to avoid caching values\\n        emit OwnershipTransferred(_owner, _candidate);\\n        _owner = _candidate;\\n        _candidate = address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the candidate that can become the owner.\\n     */\\n    function candidate() external view returns (address) {\\n        return _candidate;\\n    }\\n}\\n\",\"keccak256\":\"0x2e83f0f3a4c9eef7ea1e687c758bd7f801405ce7465a801274439215922f549b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IAccountBalance.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { AccountMarket } from \\\"../lib/AccountMarket.sol\\\";\\n\\ninterface IAccountBalance {\\n    /// @param vault The address of the vault contract\\n    event VaultChanged(address indexed vault);\\n\\n    /// @dev Emit whenever a trader's `owedRealizedPnl` is updated\\n    /// @param trader The address of the trader\\n    /// @param amount The amount changed\\n    event PnlRealized(address indexed trader, int256 amount);\\n\\n    /// @notice Modify trader account balance\\n    /// @dev Only used by `ClearingHouse` contract\\n    /// @param trader The address of the trader\\n    /// @param baseToken The address of the baseToken\\n    /// @param base Modified amount of base\\n    /// @param quote Modified amount of quote\\n    /// @return takerPositionSize Taker position size after modified\\n    /// @return takerOpenNotional Taker open notional after modified\\n    function modifyTakerBalance(\\n        address trader,\\n        address baseToken,\\n        int256 base,\\n        int256 quote\\n    ) external returns (int256 takerPositionSize, int256 takerOpenNotional);\\n\\n    /// @notice Modify trader owedRealizedPnl\\n    /// @dev Only used by `ClearingHouse` contract\\n    /// @param trader The address of the trader\\n    /// @param amount Modified amount of owedRealizedPnl\\n    function modifyOwedRealizedPnl(address trader, int256 amount) external;\\n\\n    /// @notice Settle owedRealizedPnl\\n    /// @dev Only used by `Vault.withdraw()`\\n    /// @param trader The address of the trader\\n    /// @return pnl Settled owedRealizedPnl\\n    function settleOwedRealizedPnl(address trader) external returns (int256 pnl);\\n\\n    /// @notice Modify trader owedRealizedPnl\\n    /// @dev Only used by `ClearingHouse` contract\\n    /// @param trader The address of the trader\\n    /// @param baseToken The address of the baseToken\\n    /// @param amount Settled quote amount\\n    function settleQuoteToOwedRealizedPnl(\\n        address trader,\\n        address baseToken,\\n        int256 amount\\n    ) external;\\n\\n    /// @notice Settle account balance and deregister base token\\n    /// @dev Only used by `ClearingHouse` contract\\n    /// @param trader The address of the trader\\n    /// @param baseToken The address of the baseToken\\n    /// @param takerBase Modified amount of taker base\\n    /// @param takerQuote Modified amount of taker quote\\n    /// @param realizedPnl Amount of pnl realized\\n    /// @param makerFee Amount of maker fee collected from pool\\n    function settleBalanceAndDeregister(\\n        address trader,\\n        address baseToken,\\n        int256 takerBase,\\n        int256 takerQuote,\\n        int256 realizedPnl,\\n        int256 makerFee\\n    ) external;\\n\\n    /// @notice Every time a trader's position value is checked, the base token list of this trader will be traversed;\\n    /// thus, this list should be kept as short as possible\\n    /// @dev Only used by `ClearingHouse` contract\\n    /// @param trader The address of the trader\\n    /// @param baseToken The address of the trader's base token\\n    function registerBaseToken(address trader, address baseToken) external;\\n\\n    /// @notice Deregister baseToken from trader accountInfo\\n    /// @dev Only used by `ClearingHouse` contract, this function is expensive, due to for loop\\n    /// @param trader The address of the trader\\n    /// @param baseToken The address of the trader's base token\\n    function deregisterBaseToken(address trader, address baseToken) external;\\n\\n    /// @notice Update trader Twap premium info\\n    /// @dev Only used by `ClearingHouse` contract\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @param lastTwPremiumGrowthGlobalX96 The last Twap Premium\\n    function updateTwPremiumGrowthGlobal(\\n        address trader,\\n        address baseToken,\\n        int256 lastTwPremiumGrowthGlobalX96\\n    ) external;\\n\\n    /// @notice Settle trader's PnL in closed market\\n    /// @dev Only used by `ClearingHouse`\\n    /// @param trader The address of the trader\\n    /// @param baseToken The address of the trader's base token\\n    /// @return positionNotional Taker's position notional settled with closed price\\n    /// @return openNotional Taker's open notional\\n    /// @return realizedPnl Settled realized pnl\\n    /// @return closedPrice The closed price of the closed market\\n    function settlePositionInClosedMarket(address trader, address baseToken)\\n        external\\n        returns (\\n            int256 positionNotional,\\n            int256 openNotional,\\n            int256 realizedPnl,\\n            uint256 closedPrice\\n        );\\n\\n    /// @notice Get `ClearingHouseConfig` address\\n    /// @return clearingHouseConfig The address of ClearingHouseConfig\\n    function getClearingHouseConfig() external view returns (address clearingHouseConfig);\\n\\n    /// @notice Get `OrderBook` address\\n    /// @return orderBook The address of OrderBook\\n    function getOrderBook() external view returns (address orderBook);\\n\\n    /// @notice Get `Vault` address\\n    /// @return vault The address of Vault\\n    function getVault() external view returns (address vault);\\n\\n    /// @notice Get trader registered baseTokens\\n    /// @param trader The address of trader\\n    /// @return baseTokens The array of baseToken address\\n    function getBaseTokens(address trader) external view returns (address[] memory baseTokens);\\n\\n    /// @notice Get trader account info\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return traderAccountInfo The baseToken account info of trader\\n    function getAccountInfo(address trader, address baseToken)\\n        external\\n        view\\n        returns (AccountMarket.Info memory traderAccountInfo);\\n\\n    /// @notice Get taker cost of trader's baseToken\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return openNotional The taker cost of trader's baseToken\\n    function getTakerOpenNotional(address trader, address baseToken) external view returns (int256 openNotional);\\n\\n    /// @notice Get total cost of trader's baseToken\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return totalOpenNotional the amount of quote token paid for a position when opening\\n    function getTotalOpenNotional(address trader, address baseToken) external view returns (int256 totalOpenNotional);\\n\\n    /// @notice Get total debt value of trader\\n    /// @param trader The address of trader\\n    /// @dev Total debt value will relate to `Vault.getFreeCollateral()`\\n    /// @return totalDebtValue The debt value of trader\\n    function getTotalDebtValue(address trader) external view returns (uint256 totalDebtValue);\\n\\n    /// @notice Get margin requirement to check whether trader will be able to liquidate\\n    /// @dev This is different from `Vault._getTotalMarginRequirement()`, which is for freeCollateral calculation\\n    /// @param trader The address of trader\\n    /// @return marginRequirementForLiquidation It is compared with `ClearingHouse.getAccountValue` which is also an int\\n    function getMarginRequirementForLiquidation(address trader)\\n        external\\n        view\\n        returns (int256 marginRequirementForLiquidation);\\n\\n    /// @notice Get owedRealizedPnl, unrealizedPnl and pending fee\\n    /// @param trader The address of trader\\n    /// @return owedRealizedPnl the pnl realized already but stored temporarily in AccountBalance\\n    /// @return unrealizedPnl the pnl not yet realized\\n    /// @return pendingFee the pending fee of maker earned\\n    function getPnlAndPendingFee(address trader)\\n        external\\n        view\\n        returns (\\n            int256 owedRealizedPnl,\\n            int256 unrealizedPnl,\\n            uint256 pendingFee\\n        );\\n\\n    /// @notice Check trader has open order in open/closed market.\\n    /// @param trader The address of trader\\n    /// @return True of false\\n    function hasOrder(address trader) external view returns (bool);\\n\\n    /// @notice Get trader base amount\\n    /// @dev `base amount = takerPositionSize - orderBaseDebt`\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return baseAmount The base amount of trader's baseToken market\\n    function getBase(address trader, address baseToken) external view returns (int256 baseAmount);\\n\\n    /// @notice Get trader quote amount\\n    /// @dev `quote amount = takerOpenNotional - orderQuoteDebt`\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return quoteAmount The quote amount of trader's baseToken market\\n    function getQuote(address trader, address baseToken) external view returns (int256 quoteAmount);\\n\\n    /// @notice Get taker position size of trader's baseToken market\\n    /// @dev This will only has taker position, can get maker impermanent position through `getTotalPositionSize`\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return takerPositionSize The taker position size of trader's baseToken market\\n    function getTakerPositionSize(address trader, address baseToken) external view returns (int256 takerPositionSize);\\n\\n    /// @notice Get total position size of trader's baseToken market\\n    /// @dev `total position size = taker position size + maker impermanent position size`\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return totalPositionSize The total position size of trader's baseToken market\\n    function getTotalPositionSize(address trader, address baseToken) external view returns (int256 totalPositionSize);\\n\\n    /// @notice Get total position value of trader's baseToken market\\n    /// @dev A negative returned value is only be used when calculating pnl,\\n    /// @dev we use `15 mins` twap to calc position value\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return totalPositionValue Total position value of trader's baseToken market\\n    function getTotalPositionValue(address trader, address baseToken) external view returns (int256 totalPositionValue);\\n\\n    /// @notice Get all market position abs value of trader\\n    /// @param trader The address of trader\\n    /// @return totalAbsPositionValue Sum up positions value of every market\\n    function getTotalAbsPositionValue(address trader) external view returns (uint256 totalAbsPositionValue);\\n\\n    /// @notice Get liquidatable position size of trader's baseToken market\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @param accountValue The account value of trader\\n    /// @return liquidatablePositionSize The liquidatable position size of trader's baseToken market\\n    function getLiquidatablePositionSize(\\n        address trader,\\n        address baseToken,\\n        int256 accountValue\\n    ) external view returns (int256);\\n}\\n\",\"keccak256\":\"0x3bb5c7660e06f69b635a5cbd77eb3c848f5ad5d5552b33e77dd056f4ad9cdbcd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IBaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\ninterface IBaseToken {\\n    // Do NOT change the order of enum values because it will break backwards compatibility\\n    enum Status { Open, Paused, Closed }\\n\\n    event PriceFeedChanged(address indexed priceFeed);\\n    event StatusUpdated(Status indexed status);\\n\\n    function close() external;\\n\\n    /// @notice Update the cached index price of the token.\\n    /// @param interval The twap interval in seconds.\\n    function cacheTwap(uint256 interval) external;\\n\\n    /// @notice Get the price feed address\\n    /// @return priceFeed the current price feed\\n    function getPriceFeed() external view returns (address priceFeed);\\n\\n    function getPausedTimestamp() external view returns (uint256);\\n\\n    function getPausedIndexPrice() external view returns (uint256);\\n\\n    function getClosedPrice() external view returns (uint256);\\n\\n    function isOpen() external view returns (bool);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function isClosed() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0f207df684b40c8b16a054f67c56da097cc22a53171ee4805e011cf726bb2ff6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IClearingHouseConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\ninterface IClearingHouseConfig {\\n    /// @return maxMarketsPerAccount Max value of total markets per account\\n    function getMaxMarketsPerAccount() external view returns (uint8 maxMarketsPerAccount);\\n\\n    /// @return imRatio Initial margin ratio\\n    function getImRatio() external view returns (uint24 imRatio);\\n\\n    /// @return mmRatio Maintenance margin requirement ratio\\n    function getMmRatio() external view returns (uint24 mmRatio);\\n\\n    /// @return liquidationPenaltyRatio Liquidation penalty ratio\\n    function getLiquidationPenaltyRatio() external view returns (uint24 liquidationPenaltyRatio);\\n\\n    /// @return partialCloseRatio Partial close ratio\\n    function getPartialCloseRatio() external view returns (uint24 partialCloseRatio);\\n\\n    /// @return twapInterval TwapInterval for funding and prices (mark & index) calculations\\n    function getTwapInterval() external view returns (uint32 twapInterval);\\n\\n    /// @return settlementTokenBalanceCap Max value of settlement token balance\\n    function getSettlementTokenBalanceCap() external view returns (uint256 settlementTokenBalanceCap);\\n\\n    /// @return maxFundingRate Max value of funding rate\\n    function getMaxFundingRate() external view returns (uint24 maxFundingRate);\\n\\n    /// @return isBackstopLiquidityProvider is backstop liquidity provider\\n    function isBackstopLiquidityProvider(address account) external view returns (bool isBackstopLiquidityProvider);\\n}\\n\",\"keccak256\":\"0x20aca8ab185428ace5e8fd00abc67f4ba5d3a8dd9928dfcc5d367dac48fc2b53\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Funding } from \\\"../lib/Funding.sol\\\";\\n\\ninterface IExchange {\\n    /// @param amount when closing position, amount(uint256) == takerPositionSize(int256),\\n    /// as amount is assigned as takerPositionSize in ClearingHouse.closePosition()\\n    struct SwapParams {\\n        address trader;\\n        address baseToken;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        bool isClose;\\n        uint256 amount;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct SwapResponse {\\n        uint256 base;\\n        uint256 quote;\\n        int256 exchangedPositionSize;\\n        int256 exchangedPositionNotional;\\n        uint256 fee;\\n        uint256 insuranceFundFee;\\n        int256 pnlToBeRealized;\\n        uint256 sqrtPriceAfterX96;\\n        int24 tick;\\n        bool isPartialClose;\\n    }\\n\\n    struct SwapCallbackData {\\n        address trader;\\n        address baseToken;\\n        address pool;\\n        uint24 uniswapFeeRatio;\\n        uint256 fee;\\n    }\\n\\n    struct RealizePnlParams {\\n        address trader;\\n        address baseToken;\\n        int256 base;\\n        int256 quote;\\n    }\\n\\n    /// @notice Emitted when the global funding growth is updated\\n    /// @param baseToken Address of the base token\\n    /// @param markTwap The market twap price when the funding growth is updated\\n    /// @param indexTwap The index twap price when the funding growth is updated\\n    event FundingUpdated(address indexed baseToken, uint256 markTwap, uint256 indexTwap);\\n\\n    /// @notice Emitted when maxTickCrossedWithinBlock is updated\\n    /// @param baseToken Address of the base token\\n    /// @param maxTickCrossedWithinBlock Max tick allowed to be crossed within block when reducing position\\n    event MaxTickCrossedWithinBlockChanged(address indexed baseToken, uint24 maxTickCrossedWithinBlock);\\n\\n    /// @notice Emitted when accountBalance is updated\\n    /// @param accountBalance The address of accountBalance contract\\n    event AccountBalanceChanged(address accountBalance);\\n\\n    /// @notice The actual swap function\\n    /// @dev can only be called from ClearingHouse\\n    /// @param params The parameters of the swap\\n    /// @return swapResponse The result of the swap\\n    function swap(SwapParams memory params) external returns (SwapResponse memory swapResponse);\\n\\n    /// @notice Settle the funding payment for the time interval since the last settlement\\n    /// @dev This function should be called at the beginning of every high-level function, such as `openPosition()`\\n    ///      while it doesn't matter who calls this function\\n    ///      this function 1. settles personal funding payment 2. updates global funding growth\\n    ///      personal funding payment is settled whenever there is pending funding payment\\n    ///      the global funding growth update only happens once per unique timestamp (not blockNumber, due to Arbitrum)\\n    /// @return fundingPayment the funding payment of a trader in one market should be settled into owned realized Pnl\\n    /// @return fundingGrowthGlobal the up-to-date globalFundingGrowth, usually used for later calculations\\n    function settleFunding(address trader, address baseToken)\\n        external\\n        returns (int256 fundingPayment, Funding.Growth memory fundingGrowthGlobal);\\n\\n    /// @notice Get the max ticks allowed to be crossed within a block when reducing position\\n    /// @param baseToken Address of the base token\\n    /// @return maxTickCrossedWithinBlock The max ticks allowed to be crossed within a block when reducing position\\n    function getMaxTickCrossedWithinBlock(address baseToken) external view returns (uint24 maxTickCrossedWithinBlock);\\n\\n    /// @notice Get all the pending funding payment for a trader\\n    /// @return pendingFundingPayment The pending funding payment of the trader.\\n    /// Positive value means the trader pays funding, negative value means the trader receives funding.\\n    function getAllPendingFundingPayment(address trader) external view returns (int256 pendingFundingPayment);\\n\\n    /// @notice Check if current price spread between market price and index twap is over maximum price spread.\\n    /// @param baseToken Address of the base token\\n    /// @return true if over the maximum price spread\\n    function isOverPriceSpread(address baseToken) external view returns (bool);\\n\\n    /// @notice Get the pending funding payment for a trader in a given market\\n    /// @dev this is the view version of _updateFundingGrowth()\\n    /// @return pendingFundingPayment The pending funding payment of a trader in one market,\\n    /// including liquidity & balance coefficients. Positive value means the trader pays funding,\\n    /// negative value means the trader receives funding.\\n    function getPendingFundingPayment(address trader, address baseToken)\\n        external\\n        view\\n        returns (int256 pendingFundingPayment);\\n\\n    /// @notice Get the square root of the market twap price with the given time interval\\n    /// @dev The return value is a X96 number\\n    /// @param baseToken Address of the base token\\n    /// @param twapInterval The time interval in seconds\\n    /// @return sqrtMarkTwapX96 The square root of the market twap price\\n    function getSqrtMarkTwapX96(address baseToken, uint32 twapInterval) external view returns (uint160 sqrtMarkTwapX96);\\n\\n    /// @notice Get the pnl that can be realized if trader reduce position\\n    /// @dev This function normally won't be needed by traders, but it might be useful for 3rd party\\n    /// @param params The params needed to do the query, encoded as `RealizePnlParams` in calldata\\n    /// @return pnlToBeRealized The pnl that can be realized if trader reduce position\\n    function getPnlToBeRealized(RealizePnlParams memory params) external view returns (int256 pnlToBeRealized);\\n\\n    /// @notice Get `OrderBook` contract address\\n    /// @return orderBook `OrderBook` contract address\\n    function getOrderBook() external view returns (address orderBook);\\n\\n    /// @notice Get `AccountBalance` contract address\\n    /// @return accountBalance `AccountBalance` contract address\\n    function getAccountBalance() external view returns (address accountBalance);\\n\\n    /// @notice Get `ClearingHouseConfig` contract address\\n    /// @return clearingHouse `ClearingHouseConfig` contract address\\n    function getClearingHouseConfig() external view returns (address clearingHouse);\\n}\\n\",\"keccak256\":\"0x4b108ea8339574407133a79d8e253fe6cd8129437742561de03f894152f899f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IIndexPrice.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\ninterface IIndexPrice {\\n    /// @notice Returns the index price of the token.\\n    /// @param interval The interval represents twap interval.\\n    /// @return indexPrice Twap price with interval\\n    function getIndexPrice(uint256 interval) external view returns (uint256 indexPrice);\\n}\\n\",\"keccak256\":\"0x5d894a33d9dac5588035988abcafcc4d892ed9d9e8ac0896b64aca1892db6ba4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Funding } from \\\"../lib/Funding.sol\\\";\\nimport { OpenOrder } from \\\"../lib/OpenOrder.sol\\\";\\n\\ninterface IOrderBook {\\n    struct AddLiquidityParams {\\n        address trader;\\n        address baseToken;\\n        uint256 base;\\n        uint256 quote;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        Funding.Growth fundingGrowthGlobal;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address maker;\\n        address baseToken;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint128 liquidity;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 fee;\\n        uint128 liquidity;\\n    }\\n\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 fee;\\n        int256 takerBase;\\n        int256 takerQuote;\\n    }\\n\\n    struct ReplaySwapParams {\\n        address baseToken;\\n        bool isBaseToQuote;\\n        bool shouldUpdateState;\\n        int256 amount;\\n        uint160 sqrtPriceLimitX96;\\n        uint24 exchangeFeeRatio;\\n        uint24 uniswapFeeRatio;\\n        Funding.Growth globalFundingGrowth;\\n    }\\n\\n    /// @param insuranceFundFee = fee * insuranceFundFeeRatio\\n    struct ReplaySwapResponse {\\n        int24 tick;\\n        uint256 fee;\\n        uint256 insuranceFundFee;\\n    }\\n\\n    struct MintCallbackData {\\n        address trader;\\n        address pool;\\n    }\\n\\n    /// @notice Emitted when the `Exchange` contract address changed\\n    /// @param exchange The address of exchange contract\\n    event ExchangeChanged(address indexed exchange);\\n\\n    /// @notice Add liquidity logic\\n    /// @dev Only used by `ClearingHouse` contract\\n    /// @param params Add liquidity params, detail on `IOrderBook.AddLiquidityParams`\\n    /// @return response Add liquidity response, detail on `IOrderBook.AddLiquidityResponse`\\n    function addLiquidity(AddLiquidityParams calldata params) external returns (AddLiquidityResponse memory response);\\n\\n    /// @notice Remove liquidity logic, only used by `ClearingHouse` contract\\n    /// @param params Remove liquidity params, detail on `IOrderBook.RemoveLiquidityParams`\\n    /// @return response Remove liquidity response, detail on `IOrderBook.RemoveLiquidityResponse`\\n    function removeLiquidity(RemoveLiquidityParams calldata params)\\n        external\\n        returns (RemoveLiquidityResponse memory response);\\n\\n    /// @dev This is the non-view version of `getLiquidityCoefficientInFundingPayment()`,\\n    /// only can be called by `ClearingHouse` contract\\n    /// @param trader The trader address\\n    /// @param baseToken The base token address\\n    /// @param fundingGrowthGlobal The funding growth info, detail on `Funding.Growth`\\n    /// @return liquidityCoefficientInFundingPayment the funding payment of all orders/liquidity of a maker\\n    function updateFundingGrowthAndLiquidityCoefficientInFundingPayment(\\n        address trader,\\n        address baseToken,\\n        Funding.Growth memory fundingGrowthGlobal\\n    ) external returns (int256 liquidityCoefficientInFundingPayment);\\n\\n    /// @notice Replay the swap and get the swap result (price impact and swap fee),\\n    /// only can be called by `ClearingHouse` contract;\\n    /// @dev `ReplaySwapResponse.insuranceFundFee = fee * insuranceFundFeeRatio`\\n    /// @param params ReplaySwap params, detail on `IOrderBook.ReplaySwapParams`\\n    /// @return response The swap result encoded in `ReplaySwapResponse`\\n    function replaySwap(ReplaySwapParams memory params) external returns (ReplaySwapResponse memory response);\\n\\n    function updateOrderDebt(\\n        bytes32 orderId,\\n        int256 base,\\n        int256 quote\\n    ) external;\\n\\n    /// @notice Get open order ids of a trader in the given market\\n    /// @param trader The trader address\\n    /// @param baseToken The base token address\\n    /// @return orderIds The open order ids\\n    function getOpenOrderIds(address trader, address baseToken) external view returns (bytes32[] memory orderIds);\\n\\n    /// @notice Get open order info by given order id\\n    /// @param orderId The order id\\n    /// @return info The open order info encoded in `OpenOrder.Info`\\n    function getOpenOrderById(bytes32 orderId) external view returns (OpenOrder.Info memory info);\\n\\n    /// @notice Get open order info by given base token, upper tick and lower tick\\n    /// @param trader The trader address\\n    /// @param baseToken The base token address\\n    /// @param upperTick The upper tick\\n    /// @param lowerTick The lower tick\\n    /// @return info he open order info encoded in `OpenOrder.Info`\\n    function getOpenOrder(\\n        address trader,\\n        address baseToken,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) external view returns (OpenOrder.Info memory info);\\n\\n    /// @notice Check if the specified trader has order in given markets\\n    /// @param trader The trader address\\n    /// @param tokens The base token addresses\\n    /// @return hasOrder True if the trader has order in given markets\\n    function hasOrder(address trader, address[] calldata tokens) external view returns (bool hasOrder);\\n\\n    /// @notice Get the total quote token amount and pending fees of all orders in given markets\\n    /// @param trader The trader address\\n    /// @param baseTokens The base token addresses\\n    /// @return totalQuoteAmountInPools The total quote token amount\\n    /// @return totalPendingFee The total pending fees in the orders\\n    function getTotalQuoteBalanceAndPendingFee(address trader, address[] calldata baseTokens)\\n        external\\n        view\\n        returns (int256 totalQuoteAmountInPools, uint256 totalPendingFee);\\n\\n    /// @notice Get the total token amount (quote or base) and pending fees of all orders in the given market\\n    /// @param trader The trader address\\n    /// @param baseToken The base token addresses\\n    /// @param fetchBase True if fetch base token amount, false if fetch quote token amount\\n    /// @return tokenAmount The total quote/base token amount\\n    /// @return totalPendingFee The total pending fees in the orders\\n    function getTotalTokenAmountInPoolAndPendingFee(\\n        address trader,\\n        address baseToken,\\n        bool fetchBase\\n    ) external view returns (uint256 tokenAmount, uint256 totalPendingFee);\\n\\n    /// @notice Get the total debt token amount (base or quote) of all orders in the given market\\n    /// @param trader The trader address\\n    /// @param baseToken The base token address\\n    /// @param fetchBase True if fetch base token amount, false if fetch quote token amount\\n    /// @return debtAmount The total debt token amount\\n    function getTotalOrderDebt(\\n        address trader,\\n        address baseToken,\\n        bool fetchBase\\n    ) external view returns (uint256 debtAmount);\\n\\n    /// @notice Get the pending funding payment of all orders in the given market\\n    /// @dev This is the view version of `updateFundingGrowthAndLiquidityCoefficientInFundingPayment()`, so only\\n    /// part of the funding payment will be returned. Use it with caution because it does not return all the pending\\n    /// funding payment of orders. **Normally you won't need to use this function**\\n    /// @return liquidityCoefficientInFundingPayment the funding payment of all orders/liquidity of a maker\\n    function getLiquidityCoefficientInFundingPayment(\\n        address trader,\\n        address baseToken,\\n        Funding.Growth memory fundingGrowthGlobal\\n    ) external view returns (int256 liquidityCoefficientInFundingPayment);\\n\\n    /// @notice Get the pending fees of a order\\n    /// @param trader The trader address\\n    /// @param baseToken The base token address\\n    /// @param lowerTick The lower tick\\n    /// @param upperTick The upper tick\\n    /// @return fee The pending fees\\n    function getPendingFee(\\n        address trader,\\n        address baseToken,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) external view returns (uint256 fee);\\n\\n    /// @notice Get `Exchange` contract address\\n    /// @return exchange The `Exchange` contract address\\n    function getExchange() external view returns (address exchange);\\n}\\n\",\"keccak256\":\"0x8ee9cfd5714712d5e2f75f15d966942fccf31e8eafdd3d541b090628250a0633\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/AccountMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary AccountMarket {\\n    /// @param lastTwPremiumGrowthGlobalX96 the last time weighted premiumGrowthGlobalX96\\n    struct Info {\\n        int256 takerPositionSize;\\n        int256 takerOpenNotional;\\n        int256 lastTwPremiumGrowthGlobalX96;\\n    }\\n}\\n\",\"keccak256\":\"0x822da03771a9972bd8e18ade320ff14b920e6676c6bdf0521d7ce42cf8d0bd8a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/Funding.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { Tick } from \\\"./Tick.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { OpenOrder } from \\\"./OpenOrder.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { PerpFixedPoint96 } from \\\"./PerpFixedPoint96.sol\\\";\\nimport { TickMath } from \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport { LiquidityAmounts } from \\\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\n\\nlibrary Funding {\\n    using PerpSafeCast for uint256;\\n    using PerpSafeCast for uint128;\\n    using SignedSafeMathUpgradeable for int256;\\n\\n    //\\n    // STRUCT\\n    //\\n\\n    /// @dev tw: time-weighted\\n    /// @param twPremiumX96 overflow inspection (as twPremiumX96 > twPremiumDivBySqrtPriceX96):\\n    //         max = 2 ^ (255 - 96) = 2 ^ 159 = 7.307508187E47\\n    //         assume premium = 10000, time = 10 year = 60 * 60 * 24 * 365 * 10 -> twPremium = 3.1536E12\\n    struct Growth {\\n        int256 twPremiumX96;\\n        int256 twPremiumDivBySqrtPriceX96;\\n    }\\n\\n    //\\n    // CONSTANT\\n    //\\n\\n    /// @dev block-based funding is calculated as: premium * timeFraction / 1 day, for 1 day as the default period\\n    int256 internal constant _DEFAULT_FUNDING_PERIOD = 1 days;\\n\\n    //\\n    // INTERNAL PURE\\n    //\\n\\n    function calcPendingFundingPaymentWithLiquidityCoefficient(\\n        int256 baseBalance,\\n        int256 twPremiumGrowthGlobalX96,\\n        Growth memory fundingGrowthGlobal,\\n        int256 liquidityCoefficientInFundingPayment\\n    ) internal pure returns (int256) {\\n        int256 balanceCoefficientInFundingPayment =\\n            PerpMath.mulDiv(\\n                baseBalance,\\n                fundingGrowthGlobal.twPremiumX96.sub(twPremiumGrowthGlobalX96),\\n                uint256(PerpFixedPoint96._IQ96)\\n            );\\n\\n        return\\n            liquidityCoefficientInFundingPayment.add(balanceCoefficientInFundingPayment).div(_DEFAULT_FUNDING_PERIOD);\\n    }\\n\\n    /// @dev the funding payment of an order/liquidity is composed of\\n    ///      1. funding accrued inside the range 2. funding accrued below the range\\n    ///      there is no funding when the price goes above the range, as liquidity is all swapped into quoteToken\\n    /// @return liquidityCoefficientInFundingPayment the funding payment of an order/liquidity\\n    function calcLiquidityCoefficientInFundingPaymentByOrder(\\n        OpenOrder.Info memory order,\\n        Tick.FundingGrowthRangeInfo memory fundingGrowthRangeInfo\\n    ) internal pure returns (int256) {\\n        uint160 sqrtPriceX96AtUpperTick = TickMath.getSqrtRatioAtTick(order.upperTick);\\n\\n        // base amount below the range\\n        uint256 baseAmountBelow =\\n            LiquidityAmounts.getAmount0ForLiquidity(\\n                TickMath.getSqrtRatioAtTick(order.lowerTick),\\n                sqrtPriceX96AtUpperTick,\\n                order.liquidity\\n            );\\n        // funding below the range\\n        int256 fundingBelowX96 =\\n            baseAmountBelow.toInt256().mul(\\n                fundingGrowthRangeInfo.twPremiumGrowthBelowX96.sub(order.lastTwPremiumGrowthBelowX96)\\n            );\\n\\n        // funding inside the range =\\n        // liquidity * (\\u0394twPremiumDivBySqrtPriceGrowthInsideX96 - \\u0394twPremiumGrowthInsideX96 / sqrtPriceAtUpperTick)\\n        int256 fundingInsideX96 =\\n            order.liquidity.toInt256().mul(\\n                // \\u0394twPremiumDivBySqrtPriceGrowthInsideX96\\n                fundingGrowthRangeInfo\\n                    .twPremiumDivBySqrtPriceGrowthInsideX96\\n                    .sub(order.lastTwPremiumDivBySqrtPriceGrowthInsideX96)\\n                    .sub(\\n                    // \\u0394twPremiumGrowthInsideX96\\n                    PerpMath.mulDiv(\\n                        fundingGrowthRangeInfo.twPremiumGrowthInsideX96.sub(order.lastTwPremiumGrowthInsideX96),\\n                        PerpFixedPoint96._IQ96,\\n                        sqrtPriceX96AtUpperTick\\n                    )\\n                )\\n            );\\n\\n        return fundingBelowX96.add(fundingInsideX96).div(PerpFixedPoint96._IQ96);\\n    }\\n}\\n\",\"keccak256\":\"0xef949183abffa9803c13165577fdccde7e21587fed3bdaaf102c44dae59db576\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/OpenOrder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary OpenOrder {\\n    /// @param lastFeeGrowthInsideX128 fees in quote token recorded in Exchange\\n    ///        because of block-based funding, quote-only and customized fee, all fees are in quote token\\n    struct Info {\\n        uint128 liquidity;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint256 lastFeeGrowthInsideX128;\\n        int256 lastTwPremiumGrowthInsideX96;\\n        int256 lastTwPremiumGrowthBelowX96;\\n        int256 lastTwPremiumDivBySqrtPriceGrowthInsideX96;\\n        uint256 baseDebt;\\n        uint256 quoteDebt;\\n    }\\n\\n    function calcOrderKey(\\n        address trader,\\n        address baseToken,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(trader, baseToken, lowerTick, upperTick));\\n    }\\n}\\n\",\"keccak256\":\"0xd4c389da2c4b8a14d006000f994ba07c7363782053047a811bf22d4c30d78e18\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpFixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary PerpFixedPoint96 {\\n    int256 internal constant _IQ96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0f9e03ee7640204cb53a9726bad445e5a494d970939a9e5f360ca2e1b8afb95f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\n\\nlibrary PerpMath {\\n    using PerpSafeCast for int256;\\n    using SignedSafeMathUpgradeable for int256;\\n    using SafeMathUpgradeable for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -PerpSafeCast.toInt256(a);\\n    }\\n\\n    function neg128(int128 a) internal pure returns (int128) {\\n        require(a > -2**127, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg128(uint128 a) internal pure returns (int128) {\\n        return -PerpSafeCast.toInt128(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function mulRatio(int256 value, uint24 ratio) internal pure returns (int256) {\\n        return mulDiv(value, int256(ratio), 1e6);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in FullMath.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = FullMath.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : PerpSafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa8b135140183981561e42d3eca81186fbe8ad0c46091b52635b704674a511b4f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpSafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev copy from \\\"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\\\"\\n * and rename to avoid naming conflict with uniswap\\n */\\nlibrary PerpSafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128 returnValue) {\\n        require(((returnValue = uint128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64 returnValue) {\\n        require(((returnValue = uint64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32 returnValue) {\\n        require(((returnValue = uint32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24 returnValue) {\\n        require(((returnValue = uint24(value)) == value), \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16 returnValue) {\\n        require(((returnValue = uint16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8 returnValue) {\\n        require(((returnValue = uint8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 returnValue) {\\n        require(((returnValue = int128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 returnValue) {\\n        require(((returnValue = int64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 returnValue) {\\n        require(((returnValue = int32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 returnValue) {\\n        require(((returnValue = int16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 returnValue) {\\n        require(((returnValue = int8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from int256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0 and into 24 bit.\\n     */\\n    function toUint24(int256 value) internal pure returns (uint24 returnValue) {\\n        require(\\n            ((returnValue = uint24(value)) == value),\\n            \\\"SafeCast: value must be positive or value doesn't fit in an 24 bits\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 returnValue) {\\n        require(((returnValue = int24(value)) == value), \\\"SafeCast: value doesn't fit in an 24 bits\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdb6bc08c0a2c5a49cf356824e5209ca8f89575b7f00f9484eaf4f85d9bc901fc\",\"license\":\"MIT\"},\"contracts/lib/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary Tick {\\n    struct GrowthInfo {\\n        uint256 feeX128;\\n        int256 twPremiumX96;\\n        int256 twPremiumDivBySqrtPriceX96;\\n    }\\n\\n    struct FundingGrowthRangeInfo {\\n        int256 twPremiumGrowthInsideX96;\\n        int256 twPremiumGrowthBelowX96;\\n        int256 twPremiumDivBySqrtPriceGrowthInsideX96;\\n    }\\n\\n    /// @dev call this function only if (liquidityGrossBefore == 0 && liquidityDelta != 0)\\n    /// @dev per Uniswap: we assume that all growths before a tick is initialized happen \\\"below\\\" the tick\\n    function initialize(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 tick,\\n        int24 currentTick,\\n        GrowthInfo memory globalGrowthInfo\\n    ) internal {\\n        if (tick <= currentTick) {\\n            GrowthInfo storage growthInfo = self[tick];\\n            growthInfo.feeX128 = globalGrowthInfo.feeX128;\\n            growthInfo.twPremiumX96 = globalGrowthInfo.twPremiumX96;\\n            growthInfo.twPremiumDivBySqrtPriceX96 = globalGrowthInfo.twPremiumDivBySqrtPriceX96;\\n        }\\n    }\\n\\n    function cross(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 tick,\\n        GrowthInfo memory globalGrowthInfo\\n    ) internal {\\n        GrowthInfo storage growthInfo = self[tick];\\n        growthInfo.feeX128 = globalGrowthInfo.feeX128 - growthInfo.feeX128;\\n        growthInfo.twPremiumX96 = globalGrowthInfo.twPremiumX96 - growthInfo.twPremiumX96;\\n        growthInfo.twPremiumDivBySqrtPriceX96 =\\n            globalGrowthInfo.twPremiumDivBySqrtPriceX96 -\\n            growthInfo.twPremiumDivBySqrtPriceX96;\\n    }\\n\\n    function clear(mapping(int24 => GrowthInfo) storage self, int24 tick) internal {\\n        delete self[tick];\\n    }\\n\\n    /// @dev all values in this function are scaled by 2^128 (X128), thus adding the suffix to external params\\n    /// @return feeGrowthInsideX128 this value can underflow per Tick.feeGrowthOutside specs\\n    function getFeeGrowthInsideX128(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 lowerTick,\\n        int24 upperTick,\\n        int24 currentTick,\\n        uint256 feeGrowthGlobalX128\\n    ) internal view returns (uint256 feeGrowthInsideX128) {\\n        uint256 lowerFeeGrowthOutside = self[lowerTick].feeX128;\\n        uint256 upperFeeGrowthOutside = self[upperTick].feeX128;\\n\\n        uint256 feeGrowthBelow =\\n            currentTick >= lowerTick ? lowerFeeGrowthOutside : feeGrowthGlobalX128 - lowerFeeGrowthOutside;\\n        uint256 feeGrowthAbove =\\n            currentTick < upperTick ? upperFeeGrowthOutside : feeGrowthGlobalX128 - upperFeeGrowthOutside;\\n\\n        return feeGrowthGlobalX128 - feeGrowthBelow - feeGrowthAbove;\\n    }\\n\\n    /// @return all values returned can underflow per feeGrowthOutside specs;\\n    ///         see https://www.notion.so/32990980ba8b43859f6d2541722a739b\\n    function getAllFundingGrowth(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 lowerTick,\\n        int24 upperTick,\\n        int24 currentTick,\\n        int256 twPremiumGrowthGlobalX96,\\n        int256 twPremiumDivBySqrtPriceGrowthGlobalX96\\n    ) internal view returns (FundingGrowthRangeInfo memory) {\\n        GrowthInfo storage lowerTickGrowthInfo = self[lowerTick];\\n        GrowthInfo storage upperTickGrowthInfo = self[upperTick];\\n\\n        int256 lowerTwPremiumGrowthOutsideX96 = lowerTickGrowthInfo.twPremiumX96;\\n        int256 upperTwPremiumGrowthOutsideX96 = upperTickGrowthInfo.twPremiumX96;\\n\\n        FundingGrowthRangeInfo memory fundingGrowthRangeInfo;\\n        fundingGrowthRangeInfo.twPremiumGrowthBelowX96 = currentTick >= lowerTick\\n            ? lowerTwPremiumGrowthOutsideX96\\n            : twPremiumGrowthGlobalX96 - lowerTwPremiumGrowthOutsideX96;\\n        int256 twPremiumGrowthAboveX96 =\\n            currentTick < upperTick\\n                ? upperTwPremiumGrowthOutsideX96\\n                : twPremiumGrowthGlobalX96 - upperTwPremiumGrowthOutsideX96;\\n\\n        int256 lowerTwPremiumDivBySqrtPriceGrowthOutsideX96 = lowerTickGrowthInfo.twPremiumDivBySqrtPriceX96;\\n        int256 upperTwPremiumDivBySqrtPriceGrowthOutsideX96 = upperTickGrowthInfo.twPremiumDivBySqrtPriceX96;\\n\\n        int256 twPremiumDivBySqrtPriceGrowthBelowX96 =\\n            currentTick >= lowerTick\\n                ? lowerTwPremiumDivBySqrtPriceGrowthOutsideX96\\n                : twPremiumDivBySqrtPriceGrowthGlobalX96 - lowerTwPremiumDivBySqrtPriceGrowthOutsideX96;\\n        int256 twPremiumDivBySqrtPriceGrowthAboveX96 =\\n            currentTick < upperTick\\n                ? upperTwPremiumDivBySqrtPriceGrowthOutsideX96\\n                : twPremiumDivBySqrtPriceGrowthGlobalX96 - upperTwPremiumDivBySqrtPriceGrowthOutsideX96;\\n\\n        fundingGrowthRangeInfo.twPremiumGrowthInsideX96 =\\n            twPremiumGrowthGlobalX96 -\\n            fundingGrowthRangeInfo.twPremiumGrowthBelowX96 -\\n            twPremiumGrowthAboveX96;\\n        fundingGrowthRangeInfo.twPremiumDivBySqrtPriceGrowthInsideX96 =\\n            twPremiumDivBySqrtPriceGrowthGlobalX96 -\\n            twPremiumDivBySqrtPriceGrowthBelowX96 -\\n            twPremiumDivBySqrtPriceGrowthAboveX96;\\n\\n        return fundingGrowthRangeInfo;\\n    }\\n}\\n\",\"keccak256\":\"0x9780f0d7a0f8e9240ec9c26e48056d458d3f3ddc10047d1804fb07bed40771e0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/storage/AccountBalanceStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { AccountMarket } from \\\"../lib/AccountMarket.sol\\\";\\n\\n/// @notice For future upgrades, do not change AccountBalanceStorageV1. Create a new\\n/// contract which implements AccountBalanceStorageV1 and following the naming convention\\n/// AccountBalanceStorageVX.\\nabstract contract AccountBalanceStorageV1 {\\n    address internal _clearingHouseConfig;\\n    address internal _orderBook;\\n    address internal _vault;\\n\\n    // trader => owedRealizedPnl\\n    mapping(address => int256) internal _owedRealizedPnlMap;\\n\\n    // trader => baseTokens\\n    // base token registry of each trader\\n    mapping(address => address[]) internal _baseTokensMap;\\n\\n    // first key: trader, second key: baseToken\\n    mapping(address => mapping(address => AccountMarket.Info)) internal _accountMarketMap;\\n}\\n\",\"keccak256\":\"0x828ae8c186b3b64d7c7e9ddfb654153a9bcc6c0fe97cc830462c46b338714cf8\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612f89806100206000396000f3fe608060405234801561001057600080fd5b50600436106101dc5760003560e01c80638d928af811610105578063bc5920ba1161009d578063bc5920ba1461040c578063c575ff7914610414578063cb3c7b8e1461041c578063d50d01b71461043c578063ec647a121461044f578063f75c266d14610462578063fa8e30af14610475578063fc73721414610488578063fd6ceee51461049b576101dc565b80638d928af8146103715780638da5cb5b14610379578063aa2a829414610381578063af74e73614610389578063b248c4ef146103a9578063b2e27148146103b1578063b3945690146103c4578063b3bd6e12146103d7578063bba85bcf146103ea576101dc565b80636332fef6116101785780636332fef6146102c25780636817031b146102e257806368f12e12146102f55780636c8381f8146103085780636ccdc82e1461031d578063715018a6146103305780637a5b45a014610338578063874044f31461034b57806389f921771461035e576101dc565b806310485bec146101e157806313af40351461020a578063293a50771461021f5780632e4586c3146102325780633c9b5ad1146102455780633f93510714610266578063449323d814610279578063485cc9551461028c5780635f9d05ad1461029f575b600080fd5b6101f46101ef366004612917565b6104ae565b6040516102019190612cbc565b60405180910390f35b61021d6102183660046128cb565b610584565b005b6101f461022d3660046128cb565b6106df565b61021d610240366004612917565b6107dd565b610258610253366004612952565b610814565b604051610201929190612cc5565b6101f46102743660046128e5565b610838565b61021d6102873660046128cb565b61085b565b61021d61029a3660046128e5565b610902565b6102b26102ad3660046128e5565b610a43565b6040516102019493929190612cd3565b6102d56102d03660046128e5565b610b46565b6040516102019190612dfe565b61021d6102f03660046128cb565b610b9d565b6101f46103033660046128e5565b610c72565b610310610e02565b6040516102019190612bc4565b6101f461032b3660046128cb565b610e11565b61021d610eda565b6101f46103463660046128e5565b610f7b565b61021d6103593660046129e7565b611041565b61021d61036c366004612993565b611057565b610310611094565b6103106110a3565b6103106110b2565b61039c6103973660046128cb565b6110c1565b6040516102019190612c9e565b610310611137565b6101f46103bf3660046128e5565b611146565b6101f46103d23660046128e5565b61118e565b6101f46103e53660046128e5565b611243565b6103fd6103f83660046128cb565b611307565b60405161020193929190612cee565b61021d6113d1565b6103106114bd565b61042f61042a3660046128cb565b6114cc565b6040516102019190612cb1565b6101f461044a3660046128e5565b6116aa565b61021d61045d366004612917565b6116d8565b6101f46104703660046128cb565b6116eb565b61021d6104833660046128e5565b611788565b61021d6104963660046128e5565b61179a565b6101f46104a93660046128cb565b6118f3565b6000806104ba856116eb565b905060006104c88686610c72565b905081841215806104d7575080155b156104e75760009250505061057d565b60006104fb6104f68784611950565b611988565b905068056bc75e2d6310000081116105175750915061057d9050565b620f42406105268460026119b1565b861261056c5761055461054f61053b8a610e11565b620f424061054a866002611a69565b611ac2565b611b71565b9050620f42408162ffffff16111561056c5750620f42405b6105768382611bb5565b9450505050505b9392505050565b61058c611bca565b6001600160a01b031661059d6110a3565b6001600160a01b0316146105e1576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b6001600160a01b038116610625576040805162461bcd60e51b81526020600482015260066024820152650534f5f4e57360d41b604482015290519081900360640190fd5b6033546001600160a01b0382811691161415610671576040805162461bcd60e51b8152602060048201526006602482015265534f5f53414f60d01b604482015290519081900360640190fd5b6034546001600160a01b03828116911614156106bd576040805162461bcd60e51b8152602060048201526006602482015265534f5f53414360d01b604482015290519081900360640190fd5b603480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152609e602052604081205481908190815b818110156107ae576001600160a01b0386166000908152609e6020526040812080548390811061072a57fe5b60009182526020822001546001600160a01b0316915061074a8883611243565b905060008082121561077d5761077a61076a61076585611bce565b611db7565b8390670de0b6b3a7640000611e03565b90505b6107878682611e9b565b955061079d6107968a85610f7b565b8890611e9b565b965050600190920191506106fe9050565b506000808412156107bf57836107c2565b60005b90506107d16104f68285611e9b565b9450505050505b919050565b6107e5611f00565b6001600160a01b039283166000908152609f602090815260408083209490951682529290925291902060020155565b60008061081f611f00565b61082b86868686611f3c565b9150915094509492505050565b6000806108458484610c72565b90506108518382611950565b9150505b92915050565b610863611bca565b6001600160a01b03166108746110a3565b6001600160a01b0316146108b8576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b606780546001600160a01b0319166001600160a01b0383169081179091556040517fd0654f5900f9e7e4e605a19334306e6a2786bbf960ac0484a4c12feb6428fe2f90600090a250565b600054610100900460ff168061091b575061091b611f98565b80610929575060005460ff16155b6109645760405162461bcd60e51b815260040180806020018281038252602e815260200180612e52602e913960400191505060405180910390fd5b600054610100900460ff1615801561098f576000805460ff1961ff0019909116610100171660011790555b6109a1836001600160a01b0316611fa9565b6109c65760405162461bcd60e51b81526004016109bd90612d04565b60405180910390fd5b6109d8826001600160a01b0316611fa9565b6109f45760405162461bcd60e51b81526004016109bd90612d9e565b6109fc611faf565b609a80546001600160a01b038086166001600160a01b031992831617909255609b8054928516929091169190911790558015610a3e576000805461ff00191690555b505050565b600080600080610a51611f00565b6000610a5d8787611146565b9050856001600160a01b03166357a48b016040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9857600080fd5b505afa158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad09190612b24565b9150610aee610ade83611db7565b8290670de0b6b3a7640000611e03565b6001600160a01b038089166000908152609f60209081526040808320938b16835292905220600101549095509350610b268585611e9b565b9250610b328787612059565b610b3c878461218b565b5092959194509250565b610b4e612893565b506001600160a01b039182166000908152609f60209081526040808320939094168252918252829020825160608101845281548152600182015492810192909252600201549181019190915290565b610ba5611bca565b6001600160a01b0316610bb66110a3565b6001600160a01b031614610bfa576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b610c0c816001600160a01b0316611fa9565b610c285760405162461bcd60e51b81526004016109bd90612dde565b609c80546001600160a01b0319166001600160a01b0383169081179091556040517fa49691f0dd6477ccef49962612a236d252e3a31c3be8b61fa6abeff3e74a757290600090a250565b609b54604051635d8a541d60e01b815260009182916001600160a01b0390911690635d8a541d90610cac9087908790600190600401612bf2565b604080518083038186803b158015610cc357600080fd5b505afa158015610cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfb9190612ade565b50609b54604051637c2b7c5360e01b81529192506000916001600160a01b0390911690637c2b7c5390610d379088908890600190600401612bf2565b60206040518083038186803b158015610d4f57600080fd5b505afa158015610d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d879190612b24565b90506000610da6610d9783611db7565b610da085611db7565b9061220d565b6001600160a01b038088166000908152609f60209081526040808320938a16835292905290812054919250610ddb8383611e9b565b9050600a610de882611988565b10610df35780610df6565b60005b98975050505050505050565b6034546001600160a01b031690565b6001600160a01b0381166000908152609e6020908152604080832080548251818502810185019093528083528493830182828015610e7857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e5a575b505050505090506000808251905060005b81811015610ed0576000848281518110610e9f57fe5b602002602001015190506000610eb86104f68984610838565b9050610ec48582612272565b94505050600101610e89565b5090949350505050565b610ee2611bca565b6001600160a01b0316610ef36110a3565b6001600160a01b031614610f37576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b6033546040516000916001600160a01b031690600080516020612ec2833981519152908390a3603380546001600160a01b0319908116909155603480549091169055565b609b54604051637c2b7c5360e01b815260009182916001600160a01b0390911690637c2b7c5390610fb490879087908690600401612bf2565b60206040518083038186803b158015610fcc57600080fd5b505afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190612b24565b905061085161101282611db7565b6001600160a01b038087166000908152609f60209081526040808320938916835292905220600101549061220d565b611049611f00565b611053828261218b565b5050565b61105f611f00565b61106b86868686611f3c565b5050611077868261218b565b6110828686846122cc565b61108c868661231b565b505050505050565b609c546001600160a01b031690565b6033546001600160a01b031690565b609a546001600160a01b031690565b6001600160a01b0381166000908152609e602090815260409182902080548351818402810184019094528084526060939283018282801561112b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161110d575b50505050509050919050565b609b546001600160a01b031690565b6001600160a01b038083166000908152609f60209081526040808320938516835292905290812054600a61117982611988565b106111845780610851565b5060009392505050565b609b54604051635d8a541d60e01b815260009182916001600160a01b0390911690635d8a541d906111c790879087908690600401612bf2565b604080518083038186803b1580156111de57600080fd5b505afa1580156111f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112169190612ade565b50905060006112258585610f7b565b905061123a8161123484611db7565b90611e9b565b95945050505050565b609b54604051637c2b7c5360e01b815260009182916001600160a01b0390911690637c2b7c539061127d9087908790600190600401612bf2565b60206040518083038186803b15801561129557600080fd5b505afa1580156112a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cd9190612b24565b90506108516112db82611db7565b6001600160a01b038087166000908152609f60209081526040808320938916835292905220549061220d565b6001600160a01b0381166000908152609e6020526040812054819081908190815b8181101561138a576001600160a01b0387166000908152609e6020526040812080548390811061135457fe5b6000918252602090912001546001600160a01b0316905061137f6113788983610838565b8590611e9b565b935050600101611328565b5060008061139788612438565b909250905060006113a88584611e9b565b6001600160a01b03999099166000908152609d6020526040902054999197509095505050505050565b6034546001600160a01b0316611416576040805162461bcd60e51b81526020600482015260056024820152640534f5f43360dc1b604482015290519081900360640190fd5b61141e611bca565b6034546001600160a01b03908116911614611469576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4360d01b604482015290519081900360640190fd5b6034546033546040516001600160a01b039283169290911690600080516020612ec283398151915290600090a360348054603380546001600160a01b03199081166001600160a01b03841617909155169055565b6067546001600160a01b031690565b6001600160a01b0381166000908152609e6020526040812054818167ffffffffffffffff811180156114fd57600080fd5b50604051908082528060200260200182016040528015611527578160200160208202803683370190505b5090506000805b83811015611627576001600160a01b0386166000908152609e6020526040812080548390811061155a57fe5b60009182526020918290200154604080516347535d7b60e01b815290516001600160a01b03909216935083926347535d7b92600480840193829003018186803b1580156115a657600080fd5b505afa1580156115ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115de9190612abe565b6115ee575060019091019061161f565b8084848403815181106115fd57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050505b60010161152e565b50609b54604051634dffaee560e01b81526001600160a01b0390911690634dffaee59061165a9088908690600401612c16565b60206040518083038186803b15801561167257600080fd5b505afa158015611686573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123a9190612abe565b6001600160a01b039182166000908152609f6020908152604080832093909416825291909152206001015490565b6116e0611f00565b610a3e8383836122cc565b6000610855610765609a60009054906101000a90046001600160a01b03166001600160a01b031663a85494026040518163ffffffff1660e01b815260040160206040518083038186803b15801561174157600080fd5b505afa158015611755573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117799190612b01565b61178285610e11565b9061257c565b611790611f00565b611053828261231b565b6117a2611f00565b6001600160a01b0382166000908152609e60209081526040918290208054835181840281018401909452808452909261181d929091849183018282801561181257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117f4575b505050505083612591565b156118285750611053565b8054600181018255600082815260209081902090910180546001600160a01b0319166001600160a01b0385811691909117909155609a5460408051631623e65d60e11b815290519190921692632c47ccba9260048082019391829003018186803b15801561189557600080fd5b505afa1580156118a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cd9190612b60565b60ff1681805490501115610a3e5760405162461bcd60e51b81526004016109bd90612d47565b609c546000906001600160a01b031661190a611bca565b6001600160a01b0316146119305760405162461bcd60e51b81526004016109bd90612dbf565b506001600160a01b03166000908152609d60205260408120805491905590565b60008161195f57506000610855565b600061196a84611bce565b905061085161197882611db7565b8490670de0b6b3a7640000611e03565b6000808212156119a8576119a361199e836125dd565b612609565b610855565b61085582612609565b600081611a05576040805162461bcd60e51b815260206004820181905260248201527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604482015290519081900360640190fd5b81600019148015611a195750600160ff1b83145b15611a555760405162461bcd60e51b8152600401808060200182810382526021815260200180612e806021913960400191505060405180910390fd5b6000828481611a6057fe5b05949350505050565b600082611a7857506000610855565b82820282848281611a8557fe5b041461057d5760405162461bcd60e51b8152600401808060200182810382526021815260200180612ea16021913960400191505060405180910390fd5b6000808060001985870986860292508281109083900303905080611af85760008411611aed57600080fd5b50829004905061057d565b808411611b0457600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b8062ffffff811681146107d85760405162461bcd60e51b8152600401808060200182810382526026815260200180612f2e6026913960400191505060405180910390fd5b600061057d838362ffffff16620f4240611e03565b3390565b6000816001600160a01b031663c2b6b58c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c0957600080fd5b505afa158015611c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c419190612abe565b611d4657816001600160a01b03166312080647609a60009054906101000a90046001600160a01b03166001600160a01b0316633e742e3b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ca257600080fd5b505afa158015611cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cda9190612b3c565b6040518263ffffffff1660e01b8152600401611cf69190612e1f565b60206040518083038186803b158015611d0e57600080fd5b505afa158015611d22573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a39190612b24565b816001600160a01b03166357a48b016040518163ffffffff1660e01b815260040160206040518083038186803b158015611d7f57600080fd5b505afa158015611d93573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108559190612b24565b60006001600160ff1b03821115611dff5760405162461bcd60e51b8152600401808060200182810382526028815260200180612ee26028913960400191505060405180910390fd5b5090565b60008060008512611e145784611e1d565b611e1d856125dd565b90506000808512611e2e5784611e37565b611e37856125dd565b905060008087128015611e4a5750600086135b80611e605750600087138015611e605750600086125b611e6b576000611e6e565b60015b90506000611e7d848488611ac2565b905081611e9257611e8d81611db7565b610576565b61057681612660565b6000828201818312801590611eb05750838112155b80611ec55750600083128015611ec557508381125b61057d5760405162461bcd60e51b8152600401808060200182810382526021815260200180612e316021913960400191505060405180910390fd5b6067546001600160a01b0316611f14611bca565b6001600160a01b031614611f3a5760405162461bcd60e51b81526004016109bd90612d26565b565b6001600160a01b038085166000908152609f6020908152604080832093871683529290529081208054829190611f729086611e9b565b81556001810154611f839085611e9b565b60018201819055905497909650945050505050565b6000611fa330611fa9565b15905090565b3b151590565b600054610100900460ff1680611fc85750611fc8611f98565b80611fd6575060005460ff16155b6120115760405162461bcd60e51b815260040180806020018281038252602e815260200180612e52602e913960400191505060405180910390fd5b600054610100900460ff1615801561203c576000805460ff1961ff0019909116610100171660011790555b612044612674565b8015612056576000805461ff00191690555b50565b6001600160a01b038083166000818152609f60209081526040808320948616835293815283822082815560018101839055600201829055918152609e909152908120805490915b8181101561218457836001600160a01b03168382815481106120be57fe5b6000918252602090912001546001600160a01b0316141561217c5760018203811461214b578260018303815481106120f257fe5b9060005260206000200160009054906101000a90046001600160a01b031683828154811061211c57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8280548061215557fe5b600082815260209020810160001990810180546001600160a01b0319169055019055612184565b6001016120a0565b5050505050565b8015611053576001600160a01b0382166000908152609d60205260409020546121b49082611e9b565b6001600160a01b0383166000818152609d6020526040908190209290925590517febf4e69d81451d269fc4d9551b06d58bea2ed426d2c528919ce45f6070946efb90612201908490612cbc565b60405180910390a25050565b60008183038183128015906122225750838113155b80612237575060008312801561223757508381135b61057d5760405162461bcd60e51b8152600401808060200182810382526024815260200180612f0a6024913960400191505060405180910390fd5b60008282018381101561057d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b8015610a3e576001600160a01b038084166000908152609f602090815260408083209386168352929052206001810154612306908361220d565b6001820155612315848361218b565b50505050565b6001600160a01b038083166000908152609f602090815260408083209385168352928152908290208251606081018452815480825260018301549382019390935260029091015492810192909252600a9061237590611988565b10158061238f5750600a61238c8260200151611988565b10155b1561239a5750611053565b609b546040516321b499f560e11b81526000916001600160a01b03169063436933ea906123cd9087908790600401612bd8565b60006040518083038186803b1580156123e557600080fd5b505afa1580156123f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124219190810190612a10565b51111561242e5750611053565b610a3e8383612059565b6001600160a01b0381166000908152609e602052604081205481908190815b818110156124d0576001600160a01b0386166000908152609e6020526040812080548390811061248357fe5b60009182526020808320909101546001600160a01b038a81168452609f83526040808520919092168085529252909120600101549091506124c5908590611e9b565b935050600101612457565b50609b546001600160a01b038681166000908152609e6020526040808220905163d0581a9360e01b81529193929092169163d0581a9391612515918a91600401612c42565b604080518083038186803b15801561252c57600080fd5b505afa158015612540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125649190612ade565b945090506125728382611e9b565b9450505050915091565b600061057d838362ffffff16620f4240611ac2565b6000805b835181101561118457826001600160a01b03168482815181106125b457fe5b60200260200101516001600160a01b031614156125d5576001915050610855565b600101612595565b6000600160ff1b82136126025760405162461bcd60e51b81526004016109bd90612d67565b5060000390565b600080821215611dff576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b600061266b82611db7565b60000392915050565b600054610100900460ff168061268d575061268d611f98565b8061269b575060005460ff16155b6126d65760405162461bcd60e51b815260040180806020018281038252602e815260200180612e52602e913960400191505060405180910390fd5b600054610100900460ff16158015612701576000805460ff1961ff0019909116610100171660011790555b612709612763565b6000612713611bca565b603380546001600160a01b0319166001600160a01b03831690811790915560405191925090600090600080516020612ec2833981519152908290a3508015612056576000805461ff001916905550565b600054610100900460ff168061277c575061277c611f98565b8061278a575060005460ff16155b6127c55760405162461bcd60e51b815260040180806020018281038252602e815260200180612e52602e913960400191505060405180910390fd5b600054610100900460ff161580156127f0576000805460ff1961ff0019909116610100171660011790555b612044600054610100900460ff168061280c575061280c611f98565b8061281a575060005460ff16155b6128555760405162461bcd60e51b815260040180806020018281038252602e815260200180612e52602e913960400191505060405180910390fd5b600054610100900460ff16158015612044576000805460ff1961ff0019909116610100171660011790558015612056576000805461ff001916905550565b60405180606001604052806000815260200160008152602001600081525090565b80356001600160a01b03811681146107d857600080fd5b6000602082840312156128dc578081fd5b61057d826128b4565b600080604083850312156128f7578081fd5b612900836128b4565b915061290e602084016128b4565b90509250929050565b60008060006060848603121561292b578081fd5b612934846128b4565b9250612942602085016128b4565b9150604084013590509250925092565b60008060008060808587031215612967578081fd5b612970856128b4565b935061297e602086016128b4565b93969395505050506040820135916060013590565b60008060008060008060c087890312156129ab578182fd5b6129b4876128b4565b95506129c2602088016128b4565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600080604083850312156129f9578182fd5b612a02836128b4565b946020939093013593505050565b60006020808385031215612a22578182fd5b825167ffffffffffffffff80821115612a39578384fd5b818501915085601f830112612a4c578384fd5b815181811115612a5857fe5b83810260405185828201018181108582111715612a7157fe5b604052828152858101935084860182860187018a1015612a8f578788fd5b8795505b83861015612ab1578051855260019590950194938601938601612a93565b5098975050505050505050565b600060208284031215612acf578081fd5b8151801515811461057d578182fd5b60008060408385031215612af0578182fd5b505080516020909101519092909150565b600060208284031215612b12578081fd5b815162ffffff8116811461057d578182fd5b600060208284031215612b35578081fd5b5051919050565b600060208284031215612b4d578081fd5b815163ffffffff8116811461057d578182fd5b600060208284031215612b71578081fd5b815160ff8116811461057d578182fd5b6000815180845260208085019450808401835b83811015612bb95781516001600160a01b031687529582019590820190600101612b94565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b0383168152604060208201819052600090612c3a90830184612b81565b949350505050565b60006040820160018060a01b03808616845260206040818601528286548085526060870191508786528286209450855b81811015612c90578554851683526001958601959284019201612c72565b509098975050505050505050565b60006020825261057d6020830184612b81565b901515815260200190565b90815260200190565b918252602082015260400190565b93845260208401929092526040830152606082015260800190565b9283526020830191909152604082015260600190565b60208082526008908201526741425f4348434e4360c01b604082015260600190565b6020808252600790820152660869088be9e86960cb1b604082015260600190565b60208082526006908201526541425f4d4e4560d01b604082015260600190565b6020808252601c908201527f506572704d6174683a20696e76657273696f6e206f766572666c6f7700000000604082015260600190565b60208082526007908201526641425f4f424e4360c81b604082015260600190565b60208082526005908201526420a12fa7ab60d91b604082015260600190565b60208082526006908201526541425f564e4360d01b604082015260600190565b81518152602080830151908201526040918201519181019190915260600190565b63ffffffff9190911681526020019056fe5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65645369676e6564536166654d6174683a206469766973696f6e206f766572666c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f778be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e053616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e2032342062697473a2646970667358221220b36f6224cf20ad06ad8e8a220a527abae474bda63a59f08a7829c81495a920c064736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "candidate()": {
        "details": "Returns the candidate that can become the owner."
      },
      "deregisterBaseToken(address,address)": {
        "details": "Only used by `ClearingHouse` contract, this function is expensive, due to for loop",
        "params": {
          "baseToken": "The address of the trader's base token",
          "trader": "The address of the trader"
        }
      },
      "getAccountInfo(address,address)": {
        "params": {
          "baseToken": "The address of baseToken",
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "The baseToken account info of trader"
        }
      },
      "getBase(address,address)": {
        "details": "`base amount = takerPositionSize - orderBaseDebt`",
        "params": {
          "baseToken": "The address of baseToken",
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "The base amount of trader's baseToken market"
        }
      },
      "getBaseTokens(address)": {
        "params": {
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "The array of baseToken address"
        }
      },
      "getClearingHouseConfig()": {
        "returns": {
          "_0": "The address of ClearingHouseConfig"
        }
      },
      "getLiquidatablePositionSize(address,address,int256)": {
        "params": {
          "accountValue": "The account value of trader",
          "baseToken": "The address of baseToken",
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "liquidatablePositionSize The liquidatable position size of trader's baseToken market"
        }
      },
      "getMarginRequirementForLiquidation(address)": {
        "details": "This is different from `Vault._getTotalMarginRequirement()`, which is for freeCollateral calculation",
        "params": {
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "It is compared with `ClearingHouse.getAccountValue` which is also an int"
        }
      },
      "getOrderBook()": {
        "returns": {
          "_0": "The address of OrderBook"
        }
      },
      "getPnlAndPendingFee(address)": {
        "params": {
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "the pnl realized already but stored temporarily in AccountBalance",
          "_1": "the pnl not yet realized",
          "_2": "the pending fee of maker earned"
        }
      },
      "getQuote(address,address)": {
        "details": "`quote amount = takerOpenNotional - orderQuoteDebt`",
        "params": {
          "baseToken": "The address of baseToken",
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "The quote amount of trader's baseToken market"
        }
      },
      "getTakerOpenNotional(address,address)": {
        "params": {
          "baseToken": "The address of baseToken",
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "The taker cost of trader's baseToken"
        }
      },
      "getTakerPositionSize(address,address)": {
        "details": "This will only has taker position, can get maker impermanent position through `getTotalPositionSize`",
        "params": {
          "baseToken": "The address of baseToken",
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "The taker position size of trader's baseToken market"
        }
      },
      "getTotalAbsPositionValue(address)": {
        "params": {
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "Sum up positions value of every market"
        }
      },
      "getTotalDebtValue(address)": {
        "details": "Total debt value will relate to `Vault.getFreeCollateral()`",
        "params": {
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "The debt value of trader"
        }
      },
      "getTotalOpenNotional(address,address)": {
        "params": {
          "baseToken": "The address of baseToken",
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "the amount of quote token paid for a position when opening"
        }
      },
      "getTotalPositionSize(address,address)": {
        "details": "`total position size = taker position size + maker impermanent position size`",
        "params": {
          "baseToken": "The address of baseToken",
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "The total position size of trader's baseToken market"
        }
      },
      "getTotalPositionValue(address,address)": {
        "details": "A negative returned value is only be used when calculating pnl,we use `15 mins` twap to calc position value",
        "params": {
          "baseToken": "The address of baseToken",
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "Total position value of trader's baseToken market"
        }
      },
      "getVault()": {
        "returns": {
          "_0": "The address of Vault"
        }
      },
      "hasOrder(address)": {
        "params": {
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "True of false"
        }
      },
      "modifyOwedRealizedPnl(address,int256)": {
        "details": "Only used by `ClearingHouse` contract",
        "params": {
          "amount": "Modified amount of owedRealizedPnl",
          "trader": "The address of the trader"
        }
      },
      "modifyTakerBalance(address,address,int256,int256)": {
        "details": "Only used by `ClearingHouse` contract",
        "params": {
          "base": "Modified amount of base",
          "baseToken": "The address of the baseToken",
          "quote": "Modified amount of quote",
          "trader": "The address of the trader"
        },
        "returns": {
          "_0": "Taker position size after modified",
          "_1": "Taker open notional after modified"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerBaseToken(address,address)": {
        "details": "Only used by `ClearingHouse` contract",
        "params": {
          "baseToken": "The address of the trader's base token",
          "trader": "The address of the trader"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOwner(address)": {
        "details": "Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)": {
        "details": "Only used by `ClearingHouse` contract",
        "params": {
          "baseToken": "The address of the baseToken",
          "makerFee": "Amount of maker fee collected from pool",
          "realizedPnl": "Amount of pnl realized",
          "takerBase": "Modified amount of taker base",
          "takerQuote": "Modified amount of taker quote",
          "trader": "The address of the trader"
        }
      },
      "settleOwedRealizedPnl(address)": {
        "details": "Only used by `Vault.withdraw()`",
        "params": {
          "trader": "The address of the trader"
        },
        "returns": {
          "_0": "Settled owedRealizedPnl"
        }
      },
      "settlePositionInClosedMarket(address,address)": {
        "details": "we don't do swap to get position notional here.      we define the position notional in a closed market is `closed price * position size`",
        "params": {
          "baseToken": "The address of the trader's base token",
          "trader": "The address of the trader"
        },
        "returns": {
          "closedPrice": "The closed price of the closed market",
          "openNotional": "Taker's open notional",
          "positionNotional": "Taker's position notional settled with closed price",
          "realizedPnl": "Settled realized pnl"
        }
      },
      "settleQuoteToOwedRealizedPnl(address,address,int256)": {
        "details": "Only used by `ClearingHouse` contract",
        "params": {
          "amount": "Settled quote amount",
          "baseToken": "The address of the baseToken",
          "trader": "The address of the trader"
        }
      },
      "updateOwner()": {
        "details": "Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner."
      },
      "updateTwPremiumGrowthGlobal(address,address,int256)": {
        "details": "Only used by `ClearingHouse` contract",
        "params": {
          "baseToken": "The address of baseToken",
          "lastTwPremiumGrowthGlobalX96": "The last Twap Premium",
          "trader": "The address of trader"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deregisterBaseToken(address,address)": {
        "notice": "Deregister baseToken from trader accountInfo"
      },
      "getAccountInfo(address,address)": {
        "notice": "Get trader account info"
      },
      "getBase(address,address)": {
        "notice": "Get trader base amount"
      },
      "getBaseTokens(address)": {
        "notice": "Get trader registered baseTokens"
      },
      "getClearingHouseConfig()": {
        "notice": "Get `ClearingHouseConfig` address"
      },
      "getLiquidatablePositionSize(address,address,int256)": {
        "notice": "Get liquidatable position size of trader's baseToken market"
      },
      "getMarginRequirementForLiquidation(address)": {
        "notice": "Get margin requirement to check whether trader will be able to liquidate"
      },
      "getOrderBook()": {
        "notice": "Get `OrderBook` address"
      },
      "getPnlAndPendingFee(address)": {
        "notice": "Get owedRealizedPnl, unrealizedPnl and pending fee"
      },
      "getQuote(address,address)": {
        "notice": "Get trader quote amount"
      },
      "getTakerOpenNotional(address,address)": {
        "notice": "Get taker cost of trader's baseToken"
      },
      "getTakerPositionSize(address,address)": {
        "notice": "Get taker position size of trader's baseToken market"
      },
      "getTotalAbsPositionValue(address)": {
        "notice": "Get all market position abs value of trader"
      },
      "getTotalDebtValue(address)": {
        "notice": "Get total debt value of trader"
      },
      "getTotalOpenNotional(address,address)": {
        "notice": "Get total cost of trader's baseToken"
      },
      "getTotalPositionSize(address,address)": {
        "notice": "Get total position size of trader's baseToken market"
      },
      "getTotalPositionValue(address,address)": {
        "notice": "Get total position value of trader's baseToken market"
      },
      "getVault()": {
        "notice": "Get `Vault` address"
      },
      "hasOrder(address)": {
        "notice": "Check trader has open order in open/closed market."
      },
      "modifyOwedRealizedPnl(address,int256)": {
        "notice": "Modify trader owedRealizedPnl"
      },
      "modifyTakerBalance(address,address,int256,int256)": {
        "notice": "Modify trader account balance"
      },
      "registerBaseToken(address,address)": {
        "notice": "Every time a trader's position value is checked, the base token list of this trader will be traversed; thus, this list should be kept as short as possible"
      },
      "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)": {
        "notice": "Settle account balance and deregister base token"
      },
      "settleOwedRealizedPnl(address)": {
        "notice": "Settle owedRealizedPnl"
      },
      "settlePositionInClosedMarket(address,address)": {
        "notice": "Settle trader's PnL in closed market"
      },
      "settleQuoteToOwedRealizedPnl(address,address,int256)": {
        "notice": "Modify trader owedRealizedPnl"
      },
      "updateTwPremiumGrowthGlobal(address,address,int256)": {
        "notice": "Update trader Twap premium info"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1158,
        "contract": "contracts/AccountBalance.sol:AccountBalance",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1161,
        "contract": "contracts/AccountBalance.sol:AccountBalance",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2475,
        "contract": "contracts/AccountBalance.sol:AccountBalance",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 27037,
        "contract": "contracts/AccountBalance.sol:AccountBalance",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 27039,
        "contract": "contracts/AccountBalance.sol:AccountBalance",
        "label": "_candidate",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 27043,
        "contract": "contracts/AccountBalance.sol:AccountBalance",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 26908,
        "contract": "contracts/AccountBalance.sol:AccountBalance",
        "label": "_clearingHouse",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 26912,
        "contract": "contracts/AccountBalance.sol:AccountBalance",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 32221,
        "contract": "contracts/AccountBalance.sol:AccountBalance",
        "label": "_clearingHouseConfig",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 32223,
        "contract": "contracts/AccountBalance.sol:AccountBalance",
        "label": "_orderBook",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 32225,
        "contract": "contracts/AccountBalance.sol:AccountBalance",
        "label": "_vault",
        "offset": 0,
        "slot": "156",
        "type": "t_address"
      },
      {
        "astId": 32229,
        "contract": "contracts/AccountBalance.sol:AccountBalance",
        "label": "_owedRealizedPnlMap",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_int256)"
      },
      {
        "astId": 32234,
        "contract": "contracts/AccountBalance.sol:AccountBalance",
        "label": "_baseTokensMap",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 32240,
        "contract": "contracts/AccountBalance.sol:AccountBalance",
        "label": "_accountMarketMap",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Info)29467_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Info)29467_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct AccountMarket.Info))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Info)29467_storage)"
      },
      "t_mapping(t_address,t_struct(Info)29467_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AccountMarket.Info)",
        "numberOfBytes": "32",
        "value": "t_struct(Info)29467_storage"
      },
      "t_struct(Info)29467_storage": {
        "encoding": "inplace",
        "label": "struct AccountMarket.Info",
        "members": [
          {
            "astId": 29462,
            "contract": "contracts/AccountBalance.sol:AccountBalance",
            "label": "takerPositionSize",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 29464,
            "contract": "contracts/AccountBalance.sol:AccountBalance",
            "label": "takerOpenNotional",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 29466,
            "contract": "contracts/AccountBalance.sol:AccountBalance",
            "label": "lastTwPremiumGrowthGlobalX96",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}