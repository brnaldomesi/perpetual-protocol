{
  "address": "0x56d23d359fc3f0c509AC8ED2bC9c91789D097AF0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "clearingHouse",
          "type": "address"
        }
      ],
      "name": "ClearingHouseChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repaidSettlementWithoutInsuranceFundFeeX10_S",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "insuranceFundFeeX10_S",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "discountRatio",
          "type": "uint24"
        }
      ],
      "name": "CollateralLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralManager",
          "type": "address"
        }
      ],
      "name": "CollateralManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "WETH9",
          "type": "address"
        }
      ],
      "name": "WETH9Changed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "candidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositEther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "depositEtherFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccountBalance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getAccountValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getBalanceByToken",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClearingHouse",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClearingHouseConfig",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralMmRatio",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getCollateralTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getFreeCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "ratio",
          "type": "uint24"
        }
      ],
      "name": "getFreeCollateralByRatio",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getFreeCollateralByToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInsuranceFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "settlementX10_S",
          "type": "uint256"
        }
      ],
      "name": "getLiquidatableCollateralBySettlement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getMarginRequirementForCollateralLiquidation",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getMaxRepaidSettlementAndLiquidatableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxRepaidSettlementX10_S",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLiquidatableCollateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "getRepaidSettlementByCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "settlementX10_S",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSettlementToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getSettlementTokenValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWETH9",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "insuranceFundArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "clearingHouseConfigArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "accountBalanceArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "exchangeArg",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "isLiquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isDenominatedInSettlementToken",
          "type": "bool"
        }
      ],
      "name": "liquidateCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clearingHouseArg",
          "type": "address"
        }
      ],
      "name": "setClearingHouse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralManagerArg",
          "type": "address"
        }
      ],
      "name": "setCollateralManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarderArg",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "WETH9Arg",
          "type": "address"
        }
      ],
      "name": "setWETH9",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllEther",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x49aa9c8df53cedd402da105b598dd219152d13dac264257305d91eca2d6e1008",
  "receipt": {
    "to": null,
    "from": "0xAD143E30AD4852c97716ED5b32d45BcCfF7DEa36",
    "contractAddress": "0x56d23d359fc3f0c509AC8ED2bC9c91789D097AF0",
    "transactionIndex": 37,
    "gasUsed": "4920363",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x574e4b76d900ffa84c6f5b27b914f692566e4c81f152db7f90f2aa4d64bbc59c",
    "transactionHash": "0x49aa9c8df53cedd402da105b598dd219152d13dac264257305d91eca2d6e1008",
    "logs": [],
    "blockNumber": 7678451,
    "cumulativeGasUsed": "18752645",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7a16bbbc5c6fea2b6505d4631b28aae2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"clearingHouse\",\"type\":\"address\"}],\"name\":\"ClearingHouseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaidSettlementWithoutInsuranceFundFeeX10_S\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insuranceFundFeeX10_S\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"discountRatio\",\"type\":\"uint24\"}],\"name\":\"CollateralLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralManager\",\"type\":\"address\"}],\"name\":\"CollateralManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"WETH9\",\"type\":\"address\"}],\"name\":\"WETH9Changed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositEtherFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountBalance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getAccountValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalanceByToken\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClearingHouse\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClearingHouseConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralMmRatio\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getCollateralTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getFreeCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"ratio\",\"type\":\"uint24\"}],\"name\":\"getFreeCollateralByRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getFreeCollateralByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInsuranceFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"settlementX10_S\",\"type\":\"uint256\"}],\"name\":\"getLiquidatableCollateralBySettlement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getMarginRequirementForCollateralLiquidation\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMaxRepaidSettlementAndLiquidatableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxRepaidSettlementX10_S\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidatableCollateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"getRepaidSettlementByCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"settlementX10_S\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettlementToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getSettlementTokenValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"insuranceFundArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"clearingHouseConfigArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountBalanceArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeArg\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDenominatedInSettlementToken\",\"type\":\"bool\"}],\"name\":\"liquidateCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clearingHouseArg\",\"type\":\"address\"}],\"name\":\"setClearingHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralManagerArg\",\"type\":\"address\"}],\"name\":\"setCollateralManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarderArg\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"WETH9Arg\",\"type\":\"address\"}],\"name\":\"setWETH9\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"candidate()\":{\"details\":\"Returns the candidate that can become the owner.\"},\"decimals()\":{\"details\":\"cached the settlement token's decimal for gas optimization\",\"returns\":{\"_0\":\"The decimals of settlement token\"}},\"deposit(address,uint256)\":{\"params\":{\"amount\":\"The amount of the token to deposit\",\"token\":\"The address of the token to deposit\"}},\"depositEtherFor(address)\":{\"params\":{\"to\":\"The address of the account to deposit to\"}},\"depositFor(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the token to deposit\",\"to\":\"The address of the account to deposit to\",\"token\":\"The address of collateral token\"}},\"getAccountBalance()\":{\"returns\":{\"_0\":\"The address of `AccountBalance` contract\"}},\"getAccountValue(address)\":{\"params\":{\"trader\":\"The address of the trader\"},\"returns\":{\"_0\":\"account value (in settlement token's decimals)\"}},\"getBalance(address)\":{\"details\":\"The function is equivalent to `getBalanceByToken(trader, settlementToken)`      We keep this function solely for backward-compatibility with the older single-collateral system.      In practical applications, the developer might want to use `getSettlementTokenValue()` instead      because the latter includes pending fee, funding payment etc.      and therefore more accurately reflects a trader's settlement (ex. USDC) balance\",\"returns\":{\"_0\":\"The balance amount (in settlement token's decimals)\"}},\"getBalanceByToken(address,address)\":{\"params\":{\"token\":\"The address of the collateral token\",\"trader\":\"The address of the trader\"},\"returns\":{\"_0\":\"The balance amount (in its native decimals)\"}},\"getClearingHouse()\":{\"returns\":{\"_0\":\"The address of `ClearingHouse` contract\"}},\"getClearingHouseConfig()\":{\"returns\":{\"_0\":\"The address of `ClearingHouseConfig` contract\"}},\"getCollateralManager()\":{\"returns\":{\"_0\":\"The address of `CollateralManager` contract\"}},\"getCollateralMmRatio()\":{\"returns\":{\"_0\":\"The maintenance margin ratio for collateral liquidation\"}},\"getCollateralTokens(address)\":{\"returns\":{\"_0\":\"array of collateral token addresses\"}},\"getExchange()\":{\"returns\":{\"_0\":\"The address of `Exchange` contract\"}},\"getFreeCollateral(address)\":{\"params\":{\"trader\":\"The address of the trader\"},\"returns\":{\"_0\":\"the value (in settlement token's decimals) of free collateral available         for withdraw or opening new positions or orders)\"}},\"getFreeCollateralByRatio(address,uint24)\":{\"details\":\"There are three configurations for different insolvency risk tolerances:      **conservative, moderate &aggressive**. We will start with the **conservative** one      and gradually move to **aggressive** to increase capital efficiency\",\"params\":{\"ratio\":\"The margin requirement ratio, imRatio or mmRatio\",\"trader\":\"The address of the trader\"},\"returns\":{\"_0\":\"freeCollateral (in settlement token's decimals), by using the         input margin requirement ratio; can be negative\"}},\"getFreeCollateralByToken(address,address)\":{\"details\":\"getFreeCollateralByToken(token) = (getSettlementTokenValue() >= 0)   ? min(getFreeCollateral() / indexPrice[token], getBalanceByToken(token))   : 0if token is settlementToken, then indexPrice[token] = 1\",\"params\":{\"token\":\"The address of the collateral token\",\"trader\":\"The address of the trader\"},\"returns\":{\"_0\":\"amount of that token (in the token's native decimals)\"}},\"getInsuranceFund()\":{\"returns\":{\"_0\":\"The address of `InsuranceFund` contract\"}},\"getLiquidatableCollateralBySettlement(address,uint256)\":{\"params\":{\"settlementX10_S\":\"The amount of settlement token the liquidator wants to pay\",\"token\":\"The address of the token of the trader's collateral\"},\"returns\":{\"collateral\":\"The collateral amount(in its native decimals) the liquidator can get\"}},\"getMarginRequirementForCollateralLiquidation(address)\":{\"details\":\"this value is compared with `ClearingHouse.getAccountValue()` (int)\",\"params\":{\"trader\":\"The address of the trader\"},\"returns\":{\"_0\":\"margin requirement (in 18 decimals)\"}},\"getMaxRepaidSettlementAndLiquidatableCollateral(address,address)\":{\"details\":\"formula: maxRepaidSettlement = maxLiquidatableCollateral * (indexTwap * (1 - discountRatio)) maxLiquidatableCollateral =     min(maxRepaidSettlement / (indexTwap * (1 - discountRatio)), getBalanceByToken(trader, token))\",\"params\":{\"token\":\"The address of the token of the trader's collateral\",\"trader\":\"The address of the trader\"},\"returns\":{\"maxLiquidatableCollateral\":\"The maximum liquidatable collateral amount         (in the collateral token's native decimals) of a trader\",\"maxRepaidSettlementX10_S\":\"The maximum settlement amount(in settlement token's decimals)         the liquidator needs to pay to liquidate a trader's collateral token\"}},\"getRepaidSettlementByCollateral(address,uint256)\":{\"params\":{\"collateral\":\"The amount of collateral token the liquidator wants to get\",\"token\":\"The address of the token of the trader's collateral\"},\"returns\":{\"settlementX10_S\":\"The settlement amount(in settlement token's decimals) the liquidator needs to pay\"}},\"getSettlementToken()\":{\"details\":\"We assume the settlement token should match the denominator of the price oracle.      i.e. if the settlement token is USDC, then the oracle should be priced in USD\",\"returns\":{\"_0\":\"The address of the settlement token\"}},\"getSettlementTokenValue(address)\":{\"details\":\"Note the difference between `settlementTokenBalanceX10_S`, `getSettlementTokenValue()` and `getBalance()`:      They are all settlement token balances but with or without      pending fee, funding payment, owed realized PnL, unrealized PnL, respectively      In practical applications, we use `getSettlementTokenValue()` to get the trader's debt (if < 0)\",\"params\":{\"trader\":\"The address of the trader\"},\"returns\":{\"_0\":\"The balance amount (in settlement token's decimals)\"}},\"getTotalDebt()\":{\"returns\":{\"_0\":\"The debt amount (in settlement token's decimals)\"}},\"getWETH9()\":{\"returns\":{\"_0\":\"The address of `WETH9` contract\"}},\"isLiquidatable(address)\":{\"params\":{\"trader\":\"The address of the trader\"},\"returns\":{\"_0\":\"If the trader can be liquidated\"}},\"liquidateCollateral(address,address,uint256,bool)\":{\"params\":{\"amount\":\"The amount of settlement token that the liquidator will repay for trader or               the amount of non-settlement collateral token that the liquidator will charge from trader\",\"isDenominatedInSettlementToken\":\"Whether the amount is denominated in settlement token or not\",\"token\":\"The address of non settlement collateral token that the trader will be liquidated\",\"trader\":\"The address of trader that will be liquidated\"},\"returns\":{\"_0\":\"The amount of a non-settlement token (in its native decimals) that is liquidated         when `isDenominatedInSettlementToken` is true or the amount of settlement token that is repaid         when `isDenominatedInSettlementToken` is false\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOwner(address)\":{\"details\":\"Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateOwner()\":{\"details\":\"Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner.\"},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"The amount of the token to withdraw\",\"token\":\"The address of the token to withdraw\"}},\"withdrawAll(address)\":{\"params\":{\"token\":\"The address of the token to withdraw\"},\"returns\":{\"amount\":\"The amount of the token withdrawn\"}},\"withdrawAllEther()\":{\"returns\":{\"amount\":\"The amount of ETH withdrawn\"}},\"withdrawEther(uint256)\":{\"params\":{\"amount\":\"The amount of the ETH to withdraw\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ClearingHouseChanged(address)\":{\"notice\":\"Emitted when clearingHouse is changed\"},\"CollateralLiquidated(address,address,address,uint256,uint256,uint256,uint24)\":{\"notice\":\"Emitted when a trader's collateral is liquidated\"},\"CollateralManagerChanged(address)\":{\"notice\":\"Emitted when collateralManager is changed\"},\"Deposited(address,address,uint256)\":{\"notice\":\"Emitted when trader deposit collateral into vault\"},\"TrustedForwarderChanged(address)\":{\"notice\":\"Emitted when trustedForwarder is changed\"},\"WETH9Changed(address)\":{\"notice\":\"Emitted when WETH9 is changed\"},\"Withdrawn(address,address,uint256)\":{\"notice\":\"Emitted when trader withdraw collateral from vault\"}},\"kind\":\"user\",\"methods\":{\"decimals()\":{\"notice\":\"Get settlement token decimals\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit collateral into vault\"},\"depositEther()\":{\"notice\":\"Deposit ETH as collateral into vault\"},\"depositEtherFor(address)\":{\"notice\":\"Deposit ETH as collateral for specified account\"},\"depositFor(address,address,uint256)\":{\"notice\":\"Deposit the collateral token for other account\"},\"getAccountBalance()\":{\"notice\":\"Get `AccountBalance` contract address\"},\"getAccountValue(address)\":{\"notice\":\"Get account value of the specified trader\"},\"getBalance(address)\":{\"notice\":\"Get the specified trader's settlement token balance, without pending fee, funding payment         and owed realized PnL\"},\"getBalanceByToken(address,address)\":{\"notice\":\"Get the balance of Vault of the specified collateral token and trader\"},\"getClearingHouse()\":{\"notice\":\"Get `ClearingHouse` contract address\"},\"getClearingHouseConfig()\":{\"notice\":\"Get `ClearingHouseConfig` contract address\"},\"getCollateralManager()\":{\"notice\":\"Get `CollateralManager` contract address\"},\"getCollateralMmRatio()\":{\"notice\":\"Get the maintenance margin ratio for collateral liquidation\"},\"getCollateralTokens(address)\":{\"notice\":\"Get they array of collateral token addresses that a trader has\"},\"getExchange()\":{\"notice\":\"Get `Exchange` contract address\"},\"getFreeCollateral(address)\":{\"notice\":\"Get the free collateral value denominated in the settlement token of the specified trader\"},\"getFreeCollateralByRatio(address,uint24)\":{\"notice\":\"Get the free collateral amount of the specified trader and collateral ratio\"},\"getFreeCollateralByToken(address,address)\":{\"notice\":\"Get the free collateral amount of the specified collateral token of specified trader\"},\"getInsuranceFund()\":{\"notice\":\"Get `InsuranceFund` contract address\"},\"getLiquidatableCollateralBySettlement(address,uint256)\":{\"notice\":\"Get a trader's liquidatable collateral amount by a given settlement amount\"},\"getMarginRequirementForCollateralLiquidation(address)\":{\"notice\":\"get the margin requirement for collateral liquidation of a trader\"},\"getMaxRepaidSettlementAndLiquidatableCollateral(address,address)\":{\"notice\":\"Get a trader's max repaid settlement & max liquidatable collateral by a given collateral token\"},\"getRepaidSettlementByCollateral(address,uint256)\":{\"notice\":\"Get a trader's repaid settlement amount by a given collateral amount\"},\"getSettlementToken()\":{\"notice\":\"Get the settlement token address\"},\"getSettlementTokenValue(address)\":{\"notice\":\"Get the specified trader's settlement value, including pending fee, funding payment,         owed realized PnL and unrealized PnL\"},\"getTotalDebt()\":{\"notice\":\"Get the borrowed settlement token amount from insurance fund\"},\"getWETH9()\":{\"notice\":\"Get `WETH9` contract address\"},\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"},\"liquidateCollateral(address,address,uint256,bool)\":{\"notice\":\"Liquidate trader's collateral by given settlement token amount or non settlement token amount\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw collateral from vault\"},\"withdrawAll(address)\":{\"notice\":\"Withdraw all free collateral from vault\"},\"withdrawAllEther()\":{\"notice\":\"Withdraw all free collateral of ETH from vault\"},\"withdrawEther(uint256)\":{\"notice\":\"Withdraw ETH from vault\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x8bc67f00476dee73f70cf8218e72523033c279b601ea38d0b83c227ccddb639a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xe391db37b722a67addfa9fce3101edf44ba68e2e12ae6fd74d68677b04ffd5a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8457e15aa90badabe0d6ef6f572f1ebd47bebf156921c825ae6e009dda15b706\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x73bef0a5dec3efde8183c4858d90f683ed2771656c4329647b4d5b0f89498fd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x46034cd5cca740f636345c8f7aebae0f78adfd4b70e31e6f888cccbe1086586e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf149581d28e1c81736dfe72be73ee1301d4945340cc6282fcdd63fe3c85abf24\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { AddressUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\nimport { MathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\nimport {\\n    SafeERC20Upgradeable,\\n    IERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { TransferHelper } from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport { PerpSafeCast } from \\\"./lib/PerpSafeCast.sol\\\";\\nimport { SettlementTokenMath } from \\\"./lib/SettlementTokenMath.sol\\\";\\nimport { PerpMath } from \\\"./lib/PerpMath.sol\\\";\\nimport { IERC20Metadata } from \\\"./interface/IERC20Metadata.sol\\\";\\nimport { IInsuranceFund } from \\\"./interface/IInsuranceFund.sol\\\";\\nimport { IExchange } from \\\"./interface/IExchange.sol\\\";\\nimport { IAccountBalance } from \\\"./interface/IAccountBalance.sol\\\";\\nimport { IClearingHouseConfig } from \\\"./interface/IClearingHouseConfig.sol\\\";\\nimport { IClearingHouse } from \\\"./interface/IClearingHouse.sol\\\";\\nimport { BaseRelayRecipient } from \\\"./gsn/BaseRelayRecipient.sol\\\";\\nimport { OwnerPausable } from \\\"./base/OwnerPausable.sol\\\";\\nimport { VaultStorageV2 } from \\\"./storage/VaultStorage.sol\\\";\\nimport { Collateral } from \\\"./lib/Collateral.sol\\\";\\nimport { IVault } from \\\"./interface/IVault.sol\\\";\\nimport { IWETH9 } from \\\"./interface/external/IWETH9.sol\\\";\\nimport { ICollateralManager } from \\\"./interface/ICollateralManager.sol\\\";\\n\\n// never inherit any new stateful contract. never change the orders of parent stateful contracts\\ncontract Vault is IVault, ReentrancyGuardUpgradeable, OwnerPausable, BaseRelayRecipient, VaultStorageV2 {\\n    using SafeMathUpgradeable for uint256;\\n    using PerpSafeCast for uint256;\\n    using PerpSafeCast for int256;\\n    using SignedSafeMathUpgradeable for int256;\\n    using SettlementTokenMath for uint256;\\n    using SettlementTokenMath for int256;\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using PerpMath for uint24;\\n    using FullMath for uint256;\\n    using AddressUpgradeable for address;\\n\\n    uint24 private constant _ONE_HUNDRED_PERCENT_RATIO = 1e6;\\n\\n    //\\n    // MODIFIER\\n    //\\n\\n    modifier onlySettlementOrCollateralToken(address token) {\\n        // V_OSCT: only settlement or collateral token\\n        require(token == _settlementToken || _isCollateral(token), \\\"V_OSCT\\\");\\n        _;\\n    }\\n\\n    //\\n    // EXTERNAL NON-VIEW\\n    //\\n\\n    /// @dev only used for unwrapping weth in withdrawETH\\n    receive() external payable {}\\n\\n    function initialize(\\n        address insuranceFundArg,\\n        address clearingHouseConfigArg,\\n        address accountBalanceArg,\\n        address exchangeArg\\n    ) external initializer {\\n        address settlementTokenArg = IInsuranceFund(insuranceFundArg).getToken();\\n        uint8 decimalsArg = IERC20Metadata(settlementTokenArg).decimals();\\n\\n        // invalid settlementToken decimals\\n        require(decimalsArg <= 18, \\\"V_ISTD\\\");\\n        // ClearingHouseConfig address is not contract\\n        require(clearingHouseConfigArg.isContract(), \\\"V_CHCNC\\\");\\n        // accountBalance address is not contract\\n        require(accountBalanceArg.isContract(), \\\"V_ABNC\\\");\\n        // exchange address is not contract\\n        require(exchangeArg.isContract(), \\\"V_ENC\\\");\\n\\n        __ReentrancyGuard_init();\\n        __OwnerPausable_init();\\n\\n        // update states\\n        _decimals = decimalsArg;\\n        _settlementToken = settlementTokenArg;\\n        _insuranceFund = insuranceFundArg;\\n        _clearingHouseConfig = clearingHouseConfigArg;\\n        _accountBalance = accountBalanceArg;\\n        _exchange = exchangeArg;\\n    }\\n\\n    function setTrustedForwarder(address trustedForwarderArg) external onlyOwner {\\n        // V_TFNC: TrustedForwarder address is not contract\\n        require(trustedForwarderArg.isContract(), \\\"V_TFNC\\\");\\n\\n        _setTrustedForwarder(trustedForwarderArg);\\n        emit TrustedForwarderChanged(trustedForwarderArg);\\n    }\\n\\n    function setClearingHouse(address clearingHouseArg) external onlyOwner {\\n        // V_CHNC: ClearingHouse is not contract\\n        require(clearingHouseArg.isContract(), \\\"V_CHNC\\\");\\n\\n        _clearingHouse = clearingHouseArg;\\n        emit ClearingHouseChanged(clearingHouseArg);\\n    }\\n\\n    function setCollateralManager(address collateralManagerArg) external onlyOwner {\\n        // V_CMNC: CollateralManager is not contract\\n        require(collateralManagerArg.isContract(), \\\"V_CMNC\\\");\\n\\n        _collateralManager = collateralManagerArg;\\n        emit CollateralManagerChanged(collateralManagerArg);\\n    }\\n\\n    function setWETH9(address WETH9Arg) external onlyOwner {\\n        // V_WNC: WETH9 is not contract\\n        require(WETH9Arg.isContract(), \\\"V_WNC\\\");\\n\\n        _WETH9 = WETH9Arg;\\n        emit WETH9Changed(WETH9Arg);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function deposit(address token, uint256 amount)\\n        external\\n        override\\n        whenNotPaused\\n        nonReentrant\\n        onlySettlementOrCollateralToken(token)\\n    {\\n        // input requirement checks:\\n        //   token: here\\n        //   amount: _deposit\\n\\n        address from = _msgSender();\\n        _deposit(from, from, token, amount);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function depositFor(\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) external override whenNotPaused nonReentrant onlySettlementOrCollateralToken(token) {\\n        // input requirement checks:\\n        //   token: here\\n        //   amount: _deposit\\n\\n        // V_DFZA: Deposit for zero address\\n        require(to != address(0), \\\"V_DFZA\\\");\\n\\n        address from = _msgSender();\\n        _deposit(from, to, token, amount);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function depositEther() external payable override whenNotPaused nonReentrant {\\n        address to = _msgSender();\\n        _depositEther(to);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function depositEtherFor(address to) external payable override whenNotPaused nonReentrant {\\n        // input requirement checks:\\n        //   to: here\\n\\n        // V_DFZA: Deposit for zero address\\n        require(to != address(0), \\\"V_DFZA\\\");\\n        _depositEther(to);\\n    }\\n\\n    /// @inheritdoc IVault\\n    // the full process of withdrawal:\\n    // 1. settle funding payment to owedRealizedPnl\\n    // 2. collect fee to owedRealizedPnl\\n    // 3. call Vault.withdraw(token, amount)\\n    // 4. settle pnl to trader balance in Vault\\n    // 5. transfer the amount to trader\\n    function withdraw(address token, uint256 amount)\\n        external\\n        override\\n        whenNotPaused\\n        nonReentrant\\n        onlySettlementOrCollateralToken(token)\\n    {\\n        // input requirement checks:\\n        //   token: here\\n        //   amount: in _settleAndDecreaseBalance()\\n\\n        address to = _msgSender();\\n        _withdraw(to, token, amount);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function withdrawEther(uint256 amount) external override whenNotPaused nonReentrant {\\n        // input requirement checks:\\n        //   amount: in _settleAndDecreaseBalance()\\n\\n        _requireWETH9IsCollateral();\\n\\n        address to = _msgSender();\\n\\n        _withdrawEther(to, amount);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function withdrawAll(address token)\\n        external\\n        override\\n        whenNotPaused\\n        nonReentrant\\n        onlySettlementOrCollateralToken(token)\\n        returns (uint256 amount)\\n    {\\n        // input requirement checks:\\n        //   token: here\\n\\n        address to = _msgSender();\\n        amount = getFreeCollateralByToken(to, token);\\n\\n        _withdraw(to, token, amount);\\n        return amount;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function withdrawAllEther() external override whenNotPaused nonReentrant returns (uint256 amount) {\\n        _requireWETH9IsCollateral();\\n\\n        address to = _msgSender();\\n        amount = getFreeCollateralByToken(to, _WETH9);\\n\\n        _withdrawEther(to, amount);\\n        return amount;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function liquidateCollateral(\\n        address trader,\\n        address token,\\n        uint256 amount,\\n        bool isDenominatedInSettlementToken\\n    ) external override whenNotPaused nonReentrant returns (uint256) {\\n        // input requirement checks:\\n        //   trader: here\\n        //   token: in _isCollateral()\\n        //   amount: here\\n        //   isDenominatedInSettlementToken: X\\n\\n        // V_NL: Not liquidatable\\n        require(isLiquidatable(trader), \\\"V_NL\\\");\\n\\n        (uint256 maxRepaidSettlementX10_S, uint256 maxLiquidatableCollateral) =\\n            getMaxRepaidSettlementAndLiquidatableCollateral(trader, token);\\n\\n        uint256 collateral;\\n        uint256 settlementX10_S;\\n        uint256 returnAmount;\\n\\n        if (isDenominatedInSettlementToken) {\\n            settlementX10_S = amount;\\n            // V_MSAE: Maximum settlement amount exceeded\\n            require(settlementX10_S <= maxRepaidSettlementX10_S, \\\"V_MSAE\\\");\\n            collateral = settlementX10_S == maxRepaidSettlementX10_S\\n                ? maxLiquidatableCollateral\\n                : getLiquidatableCollateralBySettlement(token, settlementX10_S);\\n            returnAmount = collateral;\\n        } else {\\n            collateral = amount;\\n            // V_MCAE: Maximum collateral amount exceeded\\n            require(collateral <= maxLiquidatableCollateral, \\\"V_MCAE\\\");\\n            settlementX10_S = collateral == maxLiquidatableCollateral\\n                ? maxRepaidSettlementX10_S\\n                : getRepaidSettlementByCollateral(token, collateral);\\n            returnAmount = settlementX10_S;\\n        }\\n\\n        _liquidateCollateral(trader, token, settlementX10_S, collateral);\\n\\n        return returnAmount;\\n    }\\n\\n    //\\n    // EXTERNAL VIEW\\n    //\\n\\n    /// @inheritdoc IVault\\n    function getSettlementToken() external view override returns (address) {\\n        return _settlementToken;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function decimals() external view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getTotalDebt() external view override returns (uint256) {\\n        return _totalDebt;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getClearingHouseConfig() external view override returns (address) {\\n        return _clearingHouseConfig;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getAccountBalance() external view override returns (address) {\\n        return _accountBalance;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getInsuranceFund() external view override returns (address) {\\n        return _insuranceFund;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getExchange() external view override returns (address) {\\n        return _exchange;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getClearingHouse() external view override returns (address) {\\n        return _clearingHouse;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getCollateralManager() external view override returns (address) {\\n        return _collateralManager;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getWETH9() external view override returns (address) {\\n        return _WETH9;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getFreeCollateral(address trader) external view override returns (uint256) {\\n        return _getFreeCollateral(trader).formatSettlementToken(_decimals);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getFreeCollateralByRatio(address trader, uint24 ratio) external view override returns (int256) {\\n        return _getFreeCollateralByRatio(trader, ratio).formatSettlementToken(_decimals);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getSettlementTokenValue(address trader) external view override returns (int256) {\\n        return _getSettlementTokenValue(trader).formatSettlementToken(_decimals);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getAccountValue(address trader) external view override returns (int256) {\\n        (int256 accountValueX10_18, ) = _getAccountValueAndTotalCollateralValue(trader);\\n        return accountValueX10_18.formatSettlementToken(_decimals);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getCollateralTokens(address trader) external view override returns (address[] memory) {\\n        return _collateralTokensMap[trader];\\n    }\\n\\n    //\\n    // PUBLIC VIEW\\n    //\\n\\n    /// @inheritdoc IVault\\n    function getBalance(address trader) public view override returns (int256) {\\n        return _balance[trader][_settlementToken];\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getBalanceByToken(address trader, address token) public view override returns (int256) {\\n        return _balance[trader][token];\\n    }\\n\\n    /// @inheritdoc IVault\\n    /// @dev getFreeCollateralByToken(token) = (getSettlementTokenValue() >= 0)\\n    ///   ? min(getFreeCollateral() / indexPrice[token], getBalanceByToken(token))\\n    ///   : 0\\n    /// @dev if token is settlementToken, then indexPrice[token] = 1\\n    function getFreeCollateralByToken(address trader, address token) public view override returns (uint256) {\\n        // do not check settlementTokenValue == 0 because user's settlement token balance may be zero\\n        if (_getSettlementTokenValue(trader) < 0) {\\n            return 0;\\n        }\\n\\n        uint256 freeCollateralX10_18 = _getFreeCollateral(trader);\\n        if (freeCollateralX10_18 == 0) {\\n            return 0;\\n        }\\n\\n        if (token == _settlementToken) {\\n            (int256 settlementTokenBalanceX10_18, ) = _getSettlementTokenBalanceAndUnrealizedPnl(trader);\\n            return\\n                settlementTokenBalanceX10_18 <= 0\\n                    ? 0\\n                    : MathUpgradeable\\n                        .min(freeCollateralX10_18, settlementTokenBalanceX10_18.toUint256())\\n                        .formatSettlementToken(_decimals);\\n        }\\n\\n        (uint256 indexTwap, uint8 priceFeedDecimals) = _getIndexPriceAndDecimals(token);\\n        uint24 collateralRatio = ICollateralManager(_collateralManager).getCollateralConfig(token).collateralRatio;\\n        return\\n            MathUpgradeable.min(\\n                _getCollateralBySettlement(token, freeCollateralX10_18, indexTwap, priceFeedDecimals).divRatio(\\n                    collateralRatio\\n                ),\\n                // non-settlement token is always positive number\\n                getBalanceByToken(trader, token).toUint256()\\n            );\\n    }\\n\\n    /// @inheritdoc IVault\\n    function isLiquidatable(address trader) public view override returns (bool) {\\n        address[] storage collateralTokens = _collateralTokensMap[trader];\\n        if (collateralTokens.length == 0) {\\n            return false;\\n        }\\n\\n        (int256 accountValueX10_18, ) = _getAccountValueAndTotalCollateralValue(trader);\\n        if (accountValueX10_18 < getMarginRequirementForCollateralLiquidation(trader)) {\\n            return true;\\n        }\\n\\n        int256 settlementTokenValueX10_18 = _getSettlementTokenValue(trader);\\n        uint256 settlementTokenDebtX10_18 =\\n            settlementTokenValueX10_18 < 0 ? settlementTokenValueX10_18.neg256().toUint256() : 0;\\n\\n        if (\\n            settlementTokenDebtX10_18 >\\n            _getNonSettlementTokenValue(trader).mulRatio(\\n                ICollateralManager(_collateralManager).getDebtNonSettlementTokenValueRatio()\\n            )\\n        ) {\\n            return true;\\n        }\\n\\n        if (\\n            settlementTokenDebtX10_18.formatSettlementToken(_decimals) >\\n            ICollateralManager(_collateralManager).getDebtThreshold()\\n        ) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getMarginRequirementForCollateralLiquidation(address trader) public view override returns (int256) {\\n        return\\n            IAccountBalance(_accountBalance)\\n                .getTotalAbsPositionValue(trader)\\n                .mulRatio(getCollateralMmRatio())\\n                .toInt256();\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getCollateralMmRatio() public view override returns (uint24) {\\n        uint24 collateralMmRatio =\\n            ICollateralManager(_collateralManager).requireValidCollateralMmRatio(\\n                ICollateralManager(_collateralManager).getMmRatioBuffer()\\n            );\\n        return collateralMmRatio;\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getRepaidSettlementByCollateral(address token, uint256 collateral)\\n        public\\n        view\\n        override\\n        returns (uint256 settlementX10_S)\\n    {\\n        uint24 discountRatio = ICollateralManager(_collateralManager).getCollateralConfig(token).discountRatio;\\n        (uint256 indexTwap, uint8 priceFeedDecimals) = _getIndexPriceAndDecimals(token);\\n\\n        return\\n            _getSettlementByCollateral(\\n                token,\\n                collateral,\\n                indexTwap.mulRatio(_ONE_HUNDRED_PERCENT_RATIO.subRatio(discountRatio)),\\n                priceFeedDecimals\\n            )\\n                .formatSettlementToken(_decimals);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function getLiquidatableCollateralBySettlement(address token, uint256 settlementX10_S)\\n        public\\n        view\\n        override\\n        returns (uint256 collateral)\\n    {\\n        uint24 discountRatio = ICollateralManager(_collateralManager).getCollateralConfig(token).discountRatio;\\n        (uint256 indexTwap, uint8 priceFeedDecimals) = _getIndexPriceAndDecimals(token);\\n\\n        return\\n            _getCollateralBySettlement(\\n                token,\\n                settlementX10_S.parseSettlementToken(_decimals),\\n                indexTwap.mulRatio(_ONE_HUNDRED_PERCENT_RATIO.subRatio(discountRatio)),\\n                priceFeedDecimals\\n            );\\n    }\\n\\n    /// @inheritdoc IVault\\n    /// @dev formula:\\n    /// maxRepaidSettlement = maxLiquidatableCollateral * (indexTwap * (1 - discountRatio))\\n    /// maxLiquidatableCollateral =\\n    ///     min(maxRepaidSettlement / (indexTwap * (1 - discountRatio)), getBalanceByToken(trader, token))\\n    function getMaxRepaidSettlementAndLiquidatableCollateral(address trader, address token)\\n        public\\n        view\\n        override\\n        returns (uint256 maxRepaidSettlementX10_S, uint256 maxLiquidatableCollateral)\\n    {\\n        // V_TINAC: token is not a collateral\\n        require(_isCollateral(token), \\\"V_TINAC\\\");\\n\\n        uint256 maxRepaidSettlementX10_18 = _getMaxRepaidSettlement(trader);\\n        uint24 discountRatio = ICollateralManager(_collateralManager).getCollateralConfig(token).discountRatio;\\n        (uint256 indexTwap, uint8 priceFeedDecimals) = _getIndexPriceAndDecimals(token);\\n\\n        uint256 discountedIndexTwap = indexTwap.mulRatio(_ONE_HUNDRED_PERCENT_RATIO.subRatio(discountRatio));\\n        maxLiquidatableCollateral = _getCollateralBySettlement(\\n            token,\\n            maxRepaidSettlementX10_18,\\n            discountedIndexTwap,\\n            priceFeedDecimals\\n        );\\n\\n        uint256 tokenBalance = getBalanceByToken(trader, token).toUint256();\\n        if (maxLiquidatableCollateral > tokenBalance) {\\n            maxLiquidatableCollateral = tokenBalance;\\n\\n            // Deliberately rounding down when calculating settlement. Thus, when calculating\\n            // collateral with settlement, the result is always <= maxCollateral.\\n            // This makes sure that collateral will always be <= user's collateral balance.\\n            maxRepaidSettlementX10_18 = _getSettlementByCollateral(\\n                token,\\n                maxLiquidatableCollateral,\\n                discountedIndexTwap,\\n                priceFeedDecimals\\n            );\\n        }\\n\\n        maxRepaidSettlementX10_S = maxRepaidSettlementX10_18.formatSettlementToken(_decimals);\\n\\n        return (maxRepaidSettlementX10_S, maxLiquidatableCollateral);\\n    }\\n\\n    //\\n    // INTERNAL NON-VIEW\\n    //\\n\\n    /// @param token the collateral token needs to be transferred into vault\\n    /// @param from the address of account who owns the collateral token\\n    /// @param amount the amount of collateral token needs to be transferred\\n    function _transferTokenIn(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        // check for deflationary tokens by assuring balances before and after transferring to be the same\\n        uint256 balanceBefore = IERC20Metadata(token).balanceOf(address(this));\\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(token), from, address(this), amount);\\n        // V_IBA: inconsistent balance amount, to prevent from deflationary tokens\\n        require((IERC20Metadata(token).balanceOf(address(this)).sub(balanceBefore)) == amount, \\\"V_IBA\\\");\\n    }\\n\\n    /// @param from deposit token from this address\\n    /// @param to deposit token to this address\\n    /// @param token the collateral token wish to deposit\\n    /// @param amount the amount of token to deposit\\n    function _deposit(\\n        address from,\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        // V_ZA: Zero amount\\n        require(amount > 0, \\\"V_ZA\\\");\\n        _transferTokenIn(token, from, amount);\\n        _checkDepositCapAndRegister(token, to, amount);\\n    }\\n\\n    /// @param to deposit ETH to this address\\n    function _depositEther(address to) internal {\\n        uint256 amount = msg.value;\\n        // V_ZA: Zero amount\\n        require(amount > 0, \\\"V_ZA\\\");\\n        _requireWETH9IsCollateral();\\n\\n        // SLOAD for gas saving\\n        address WETH9 = _WETH9;\\n        // wrap ETH into WETH\\n        IWETH9(WETH9).deposit{ value: amount }();\\n        _checkDepositCapAndRegister(WETH9, to, amount);\\n    }\\n\\n    /// @param token the collateral token needs to be transferred out of vault\\n    /// @param to the address of account that the collateral token deposit to\\n    /// @param amount the amount of collateral token to be deposited\\n    function _checkDepositCapAndRegister(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (token == _settlementToken) {\\n            uint256 settlementTokenBalanceCap =\\n                IClearingHouseConfig(_clearingHouseConfig).getSettlementTokenBalanceCap();\\n            // V_GTSTBC: greater than settlement token balance cap\\n            require(IERC20Metadata(token).balanceOf(address(this)) <= settlementTokenBalanceCap, \\\"V_GTSTBC\\\");\\n        } else {\\n            uint256 depositCap = ICollateralManager(_collateralManager).getCollateralConfig(token).depositCap;\\n            // V_GTDC: greater than deposit cap\\n            require(IERC20Metadata(token).balanceOf(address(this)) <= depositCap, \\\"V_GTDC\\\");\\n        }\\n\\n        _modifyBalance(to, token, amount.toInt256());\\n        emit Deposited(token, to, amount);\\n    }\\n\\n    function _settleAndDecreaseBalance(\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        // settle all funding payments owedRealizedPnl\\n        // pending fee can be withdraw but won't be settled\\n        IClearingHouse(_clearingHouse).settleAllFunding(to);\\n\\n        // incl. owedRealizedPnl\\n        uint256 freeCollateral = getFreeCollateralByToken(to, token);\\n        // V_NEFC: not enough freeCollateral\\n        require(freeCollateral >= amount, \\\"V_NEFC\\\");\\n\\n        int256 deltaBalance = amount.toInt256().neg256();\\n        if (token == _settlementToken) {\\n            // borrow settlement token from insurance fund if the token balance in Vault is not enough\\n            uint256 vaultBalanceX10_S = IERC20Metadata(token).balanceOf(address(this));\\n            if (vaultBalanceX10_S < amount) {\\n                uint256 borrowedAmountX10_S = amount - vaultBalanceX10_S;\\n                IInsuranceFund(_insuranceFund).borrow(borrowedAmountX10_S);\\n                _totalDebt += borrowedAmountX10_S;\\n            }\\n\\n            // settle both the withdrawn amount and owedRealizedPnl to collateral\\n            int256 owedRealizedPnlX10_18 = IAccountBalance(_accountBalance).settleOwedRealizedPnl(to);\\n            deltaBalance = deltaBalance.add(owedRealizedPnlX10_18.formatSettlementToken(_decimals));\\n        }\\n\\n        _modifyBalance(to, token, deltaBalance);\\n    }\\n\\n    function _withdraw(\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        _settleAndDecreaseBalance(to, token, amount);\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(token), to, amount);\\n        emit Withdrawn(token, to, amount);\\n    }\\n\\n    function _withdrawEther(address to, uint256 amount) internal {\\n        // SLOAD for gas saving\\n        address WETH9 = _WETH9;\\n\\n        _settleAndDecreaseBalance(to, WETH9, amount);\\n\\n        IWETH9(WETH9).withdraw(amount);\\n        TransferHelper.safeTransferETH(to, amount);\\n        emit Withdrawn(WETH9, to, amount);\\n    }\\n\\n    /// @param amount can be 0; do not require this\\n    function _modifyBalance(\\n        address trader,\\n        address token,\\n        int256 amount\\n    ) internal {\\n        int256 oldBalance = _balance[trader][token];\\n        int256 newBalance = oldBalance.add(amount);\\n        _balance[trader][token] = newBalance;\\n\\n        if (token == _settlementToken) {\\n            return;\\n        }\\n\\n        // register/deregister non-settlement collateral tokens\\n        if (oldBalance != 0 && newBalance == 0) {\\n            address[] storage collateralTokens = _collateralTokensMap[trader];\\n            uint256 tokenLen = collateralTokens.length;\\n            uint256 lastTokenIndex = tokenLen - 1;\\n            // find and deregister the token\\n            for (uint256 i; i < tokenLen; i++) {\\n                if (collateralTokens[i] == token) {\\n                    // delete the token by replacing it with the last one and then pop it from there\\n                    if (i != lastTokenIndex) {\\n                        collateralTokens[i] = collateralTokens[lastTokenIndex];\\n                    }\\n                    collateralTokens.pop();\\n                    break;\\n                }\\n            }\\n        } else if (oldBalance == 0 && newBalance != 0) {\\n            address[] storage collateralTokens = _collateralTokensMap[trader];\\n            collateralTokens.push(token);\\n            // V_CTNE: collateral tokens number exceeded\\n            require(\\n                collateralTokens.length <= ICollateralManager(_collateralManager).getMaxCollateralTokensPerAccount(),\\n                \\\"V_CTNE\\\"\\n            );\\n        }\\n    }\\n\\n    /// @dev liquidate trader's collateral token by repaying the trader's settlement token debt\\n    ///      the amount of collateral token and settlement token should be calculated by using\\n    ///      getLiquidatableCollateralBySettlement() and getRepaidSettlementByCollateral()\\n    function _liquidateCollateral(\\n        address trader,\\n        address token,\\n        uint256 settlementX10_S,\\n        uint256 collateral\\n    ) internal {\\n        address liquidator = _msgSender();\\n        address settlementToken = _settlementToken; // SLOAD gas saving\\n\\n        // transfer settlement token from liquidator before changing any internal states\\n        _transferTokenIn(settlementToken, liquidator, settlementX10_S);\\n\\n        _modifyBalance(trader, token, collateral.neg256());\\n\\n        uint24 clInsuranceFundFeeRatio = ICollateralManager(_collateralManager).getCLInsuranceFundFeeRatio();\\n        // round down in insurance fund fee calculation, so we can make sure all\\n        // the user's debt can be repaid when fully collateral liquidation\\n        uint256 insuranceFundFeeX10_S = settlementX10_S.mulRatio(clInsuranceFundFeeRatio);\\n        _modifyBalance(_insuranceFund, settlementToken, insuranceFundFeeX10_S.toInt256());\\n\\n        uint256 repaidSettlementWithoutInsuranceFundFeeX10_S = settlementX10_S.sub(insuranceFundFeeX10_S);\\n        _modifyBalance(trader, settlementToken, repaidSettlementWithoutInsuranceFundFeeX10_S.toInt256());\\n\\n        // transfer collateral token from vault to liquidator\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(token), liquidator, collateral);\\n\\n        uint24 discountRatio = ICollateralManager(_collateralManager).getCollateralConfig(token).discountRatio;\\n\\n        emit CollateralLiquidated(\\n            trader,\\n            token,\\n            liquidator,\\n            collateral,\\n            repaidSettlementWithoutInsuranceFundFeeX10_S,\\n            insuranceFundFeeX10_S,\\n            discountRatio\\n        );\\n    }\\n\\n    //\\n    // INTERNAL VIEW\\n    //\\n\\n    function _getTokenDecimals(address token) internal view returns (uint8) {\\n        return IERC20Metadata(token).decimals();\\n    }\\n\\n    function _getFreeCollateral(address trader) internal view returns (uint256 freeCollateralX10_18) {\\n        return\\n            PerpMath\\n                .max(_getFreeCollateralByRatio(trader, IClearingHouseConfig(_clearingHouseConfig).getImRatio()), 0)\\n                .toUint256();\\n    }\\n\\n    function _getFreeCollateralByRatio(address trader, uint24 ratio)\\n        internal\\n        view\\n        returns (int256 freeCollateralX10_18)\\n    {\\n        // conservative config: freeCollateral = min(totalCollateralValue, accountValue) - openOrderMarginReq\\n        (int256 accountValueX10_18, int256 totalCollateralValueX10_18) =\\n            _getAccountValueAndTotalCollateralValue(trader);\\n        uint256 totalMarginRequirementX10_18 = _getTotalMarginRequirement(trader, ratio);\\n\\n        return\\n            PerpMath.min(totalCollateralValueX10_18, accountValueX10_18).sub(totalMarginRequirementX10_18.toInt256());\\n\\n        // moderate config: freeCollateral = min(totalCollateralValue, accountValue - openOrderMarginReq)\\n        // return\\n        //     PerpMath.min(\\n        //         totalCollateralValueX10_18,\\n        //         accountValueX10_S.sub(totalMarginRequirementX10_18.toInt256())\\n        //     );\\n\\n        // aggressive config: freeCollateral = accountValue - openOrderMarginReq\\n        // note that the aggressive model depends entirely on unrealizedPnl, which depends on the index price\\n        //      we should implement some sort of safety check before using this model; otherwise,\\n        //      a trader could drain the entire vault if the index price deviates significantly.\\n        // return accountValueX10_18.sub(totalMarginRequirementX10_18.toInt256());\\n    }\\n\\n    function _getTotalCollateralValue(address trader) internal view returns (int256 totalCollateralValueX10_18) {\\n        (int256 settlementTokenBalanceX10_18, ) = _getSettlementTokenBalanceAndUnrealizedPnl(trader);\\n        uint256 nonSettlementTokenValueX10_18 = _getNonSettlementTokenValue(trader);\\n        return nonSettlementTokenValueX10_18.toInt256().add(settlementTokenBalanceX10_18);\\n    }\\n\\n    /// @notice Get the specified trader's settlement token balance, including pending fee, funding payment,\\n    ///         owed realized PnL, but without unrealized PnL)\\n    /// @dev Note the difference between the return argument`settlementTokenBalanceX10_18` and\\n    ///      the return value of `getSettlementTokenValue()`.\\n    ///      The first one is settlement token balance with pending fee, funding payment, owed realized PnL;\\n    ///      The second one is the first one plus unrealized PnL.\\n    /// @return settlementTokenBalanceX10_18 Settlement amount in 18 decimals\\n    /// @return unrealizedPnlX10_18 Unrealized PnL in 18 decimals\\n    function _getSettlementTokenBalanceAndUnrealizedPnl(address trader)\\n        internal\\n        view\\n        returns (int256 settlementTokenBalanceX10_18, int256 unrealizedPnlX10_18)\\n    {\\n        int256 fundingPaymentX10_18 = IExchange(_exchange).getAllPendingFundingPayment(trader);\\n\\n        int256 owedRealizedPnlX10_18;\\n        uint256 pendingFeeX10_18;\\n        (owedRealizedPnlX10_18, unrealizedPnlX10_18, pendingFeeX10_18) = IAccountBalance(_accountBalance)\\n            .getPnlAndPendingFee(trader);\\n\\n        settlementTokenBalanceX10_18 = getBalance(trader).parseSettlementToken(_decimals).add(\\n            pendingFeeX10_18.toInt256().sub(fundingPaymentX10_18).add(owedRealizedPnlX10_18)\\n        );\\n\\n        return (settlementTokenBalanceX10_18, unrealizedPnlX10_18);\\n    }\\n\\n    /// @return settlementTokenValueX10_18 settlementTokenBalance + totalUnrealizedPnl, in 18 decimals\\n    function _getSettlementTokenValue(address trader) internal view returns (int256 settlementTokenValueX10_18) {\\n        (int256 settlementBalanceX10_18, int256 unrealizedPnlX10_18) =\\n            _getSettlementTokenBalanceAndUnrealizedPnl(trader);\\n        return settlementBalanceX10_18.add(unrealizedPnlX10_18);\\n    }\\n\\n    /// @return nonSettlementTokenValueX10_18 total non-settlement token value in 18 decimals\\n    function _getNonSettlementTokenValue(address trader) internal view returns (uint256 nonSettlementTokenValueX10_18) {\\n        address[] memory collateralTokens = _collateralTokensMap[trader];\\n        uint256 tokenLen = collateralTokens.length;\\n        for (uint256 i = 0; i < tokenLen; i++) {\\n            address token = collateralTokens[i];\\n            uint256 collateralValueX10_18 = _getCollateralValue(trader, token);\\n            uint24 collateralRatio = ICollateralManager(_collateralManager).getCollateralConfig(token).collateralRatio;\\n\\n            nonSettlementTokenValueX10_18 = nonSettlementTokenValueX10_18.add(\\n                collateralValueX10_18.mulRatio(collateralRatio)\\n            );\\n        }\\n\\n        return nonSettlementTokenValueX10_18;\\n    }\\n\\n    /// @return collateralValueX10_18 collateral value in 18 decimals\\n    function _getCollateralValue(address trader, address token) internal view returns (uint256 collateralValueX10_18) {\\n        int256 tokenBalance = getBalanceByToken(trader, token);\\n        (uint256 indexTwap, uint8 priceFeedDecimals) = _getIndexPriceAndDecimals(token);\\n        return _getSettlementByCollateral(token, tokenBalance.toUint256(), indexTwap, priceFeedDecimals);\\n    }\\n\\n    function _getIndexPriceAndDecimals(address token) internal view returns (uint256, uint8) {\\n        return (\\n            ICollateralManager(_collateralManager).getPrice(\\n                token,\\n                IClearingHouseConfig(_clearingHouseConfig).getTwapInterval()\\n            ),\\n            ICollateralManager(_collateralManager).getPriceFeedDecimals(token)\\n        );\\n    }\\n\\n    /// @return settlementX10_18 collateral value in 18 decimals\\n    function _getSettlementByCollateral(\\n        address token,\\n        uint256 collateral,\\n        uint256 price,\\n        uint8 priceFeedDecimals\\n    ) internal view returns (uint256 settlementX10_18) {\\n        uint8 collateralTokenDecimals = _getTokenDecimals(token);\\n\\n        // Convert token decimals with as much precision as possible\\n        return\\n            collateralTokenDecimals > 18\\n                ? collateral.mulDiv(price, 10**priceFeedDecimals).convertTokenDecimals(collateralTokenDecimals, 18)\\n                : collateral.convertTokenDecimals(collateralTokenDecimals, 18).mulDiv(price, 10**priceFeedDecimals);\\n    }\\n\\n    /// @return collateral collateral amount\\n    function _getCollateralBySettlement(\\n        address token,\\n        uint256 settlementX10_18,\\n        uint256 price,\\n        uint8 priceFeedDecimals\\n    ) internal view returns (uint256 collateral) {\\n        uint8 collateralTokenDecimals = _getTokenDecimals(token);\\n\\n        // Convert token decimals with as much precision as possible\\n        return\\n            collateralTokenDecimals > 18\\n                ? settlementX10_18.convertTokenDecimals(18, collateralTokenDecimals).mulDivRoundingUp(\\n                    10**priceFeedDecimals,\\n                    price\\n                )\\n                : settlementX10_18.mulDivRoundingUp(10**priceFeedDecimals, price).convertTokenDecimals(\\n                    18,\\n                    collateralTokenDecimals\\n                );\\n    }\\n\\n    function _getAccountValueAndTotalCollateralValue(address trader)\\n        internal\\n        view\\n        returns (int256 accountValueX10_18, int256 totalCollateralValueX10_18)\\n    {\\n        (, int256 unrealizedPnlX10_18, ) = IAccountBalance(_accountBalance).getPnlAndPendingFee(trader);\\n\\n        totalCollateralValueX10_18 = _getTotalCollateralValue(trader);\\n\\n        // accountValue = totalCollateralValue + totalUnrealizedPnl, in 18 decimals\\n        accountValueX10_18 = totalCollateralValueX10_18.add(unrealizedPnlX10_18);\\n\\n        return (accountValueX10_18, totalCollateralValueX10_18);\\n    }\\n\\n    /// @notice Get the maximum value denominated in settlement token when liquidating a trader's collateral tokens\\n    /// @dev formula:\\n    ///      maxDebt = max(max(-settlementTokenValue, 0), openOrderReq)\\n    ///      maxRepaidSettlementWithoutInsuranceFundFee =\\n    ///          maxDebt > collateralValueDustThreshold ? maxDebt * liquidationRatio : maxDebt\\n    ///      maxRepaidSettlement = maxRepaidSettlementWithoutInsuranceFundFee / (1 - IFRatio)\\n    /// @return maxRepaidSettlementX10_18 max repaid settlement token in 18 decimals\\n    function _getMaxRepaidSettlement(address trader) internal view returns (uint256 maxRepaidSettlementX10_18) {\\n        // max(max(-settlementTokenValue, 0), totalMarginReq) * liquidationRatio\\n        int256 settlementTokenValueX10_18 = _getSettlementTokenValue(trader);\\n        uint256 settlementTokenDebtX10_18 =\\n            settlementTokenValueX10_18 < 0 ? settlementTokenValueX10_18.neg256().toUint256() : 0;\\n\\n        uint256 totalMarginRequirementX10_18 =\\n            _getTotalMarginRequirement(trader, IClearingHouseConfig(_clearingHouseConfig).getImRatio());\\n\\n        uint256 maxDebtX10_18 = MathUpgradeable.max(settlementTokenDebtX10_18, totalMarginRequirementX10_18);\\n        uint256 collateralValueDustX10_18 =\\n            ICollateralManager(_collateralManager).getCollateralValueDust().parseSettlementToken(_decimals);\\n        uint256 maxRepaidSettlementWithoutInsuranceFundFeeX10_18 =\\n            maxDebtX10_18 > collateralValueDustX10_18\\n                ? maxDebtX10_18.mulRatio(ICollateralManager(_collateralManager).getLiquidationRatio())\\n                : maxDebtX10_18;\\n\\n        return\\n            maxRepaidSettlementWithoutInsuranceFundFeeX10_18.divRatio(\\n                _ONE_HUNDRED_PERCENT_RATIO.subRatio(ICollateralManager(_collateralManager).getCLInsuranceFundFeeRatio())\\n            );\\n    }\\n\\n    /// @return totalMarginRequirementX10_18 total margin requirement in 18 decimals\\n    function _getTotalMarginRequirement(address trader, uint24 ratio)\\n        internal\\n        view\\n        returns (uint256 totalMarginRequirementX10_18)\\n    {\\n        uint256 totalDebtValueX10_18 = IAccountBalance(_accountBalance).getTotalDebtValue(trader);\\n        return totalDebtValueX10_18.mulRatio(ratio);\\n    }\\n\\n    function _isCollateral(address token) internal view returns (bool) {\\n        return ICollateralManager(_collateralManager).isCollateral(token);\\n    }\\n\\n    function _requireWETH9IsCollateral() internal view {\\n        // V_WINAC: WETH9 is not a collateral\\n        require(_isCollateral(_WETH9), \\\"V_WINAC\\\");\\n    }\\n\\n    /// @inheritdoc BaseRelayRecipient\\n    function _msgSender() internal view override(BaseRelayRecipient, OwnerPausable) returns (address payable) {\\n        return super._msgSender();\\n    }\\n\\n    /// @inheritdoc BaseRelayRecipient\\n    function _msgData() internal view override(BaseRelayRecipient, OwnerPausable) returns (bytes memory) {\\n        return super._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xdd0763d3edb3a32789a86a1ed519853bf02bc12f04d14b599f9f29887e69428c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/OwnerPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport { SafeOwnable } from \\\"./SafeOwnable.sol\\\";\\n\\nabstract contract OwnerPausable is SafeOwnable, PausableUpgradeable {\\n    // __gap is reserved storage\\n    uint256[50] private __gap;\\n\\n    // solhint-disable-next-line func-order\\n    function __OwnerPausable_init() internal initializer {\\n        __SafeOwnable_init();\\n        __Pausable_init();\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address payable) {\\n        return super._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes memory) {\\n        return super._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xfad93bce97ba8da23cc0ca4f0cd0e86713ef29d1efcd3063845edc991b095398\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nabstract contract SafeOwnable is ContextUpgradeable {\\n    address private _owner;\\n    address private _candidate;\\n\\n    // __gap is reserved storage\\n    uint256[50] private __gap;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        // caller not owner\\n        require(owner() == _msgSender(), \\\"SO_CNO\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __SafeOwnable_init() internal initializer {\\n        __Context_init();\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        // emitting event first to avoid caching values\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n        _candidate = address(0);\\n    }\\n\\n    /**\\n     * @dev Set ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function setOwner(address newOwner) external onlyOwner {\\n        // newOwner is 0\\n        require(newOwner != address(0), \\\"SO_NW0\\\");\\n        // same as original\\n        require(newOwner != _owner, \\\"SO_SAO\\\");\\n        // same as candidate\\n        require(newOwner != _candidate, \\\"SO_SAC\\\");\\n\\n        _candidate = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`_candidate`).\\n     * Can only be called by the new owner.\\n     */\\n    function updateOwner() external {\\n        // candidate is zero\\n        require(_candidate != address(0), \\\"SO_C0\\\");\\n        // caller is not candidate\\n        require(_candidate == _msgSender(), \\\"SO_CNC\\\");\\n\\n        // emitting event first to avoid caching values\\n        emit OwnershipTransferred(_owner, _candidate);\\n        _owner = _candidate;\\n        _candidate = address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the candidate that can become the owner.\\n     */\\n    function candidate() external view returns (address) {\\n        return _candidate;\\n    }\\n}\\n\",\"keccak256\":\"0x2e83f0f3a4c9eef7ea1e687c758bd7f801405ce7465a801274439215922f549b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/gsn/BaseRelayRecipient.sol\":{\"content\":\"// copied from @opengsn/provider-2.2.4,\\n// https://github.com/opengsn/gsn/blob/master/packages/contracts/src/BaseRelayRecipient.sol\\n// for adding `payable` property at the return value of _msgSender()\\n// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity 0.7.6;\\n\\nimport \\\"./IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address internal _trustedForwarder;\\n\\n    // __gap is reserved storage\\n    uint256[50] private __gap;\\n\\n    event TrustedForwarderUpdated(address trustedForwarder);\\n\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /// @inheritdoc IRelayRecipient\\n    function versionRecipient() external pure override returns (string memory) {\\n        return \\\"2.0.0\\\";\\n    }\\n\\n    /// @inheritdoc IRelayRecipient\\n    function isTrustedForwarder(address forwarder) public view virtual override returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address trustedForwarderArg) internal {\\n        _trustedForwarder = trustedForwarderArg;\\n        emit TrustedForwarderUpdated(trustedForwarderArg);\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    /// @inheritdoc IRelayRecipient\\n    function _msgSender() internal view virtual override returns (address payable ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    /// @inheritdoc IRelayRecipient\\n    function _msgData() internal view virtual override returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbe8e79eee73ca0d51d828ae5a7cfa78769b064e746d9a1962b1ca8d202875dfb\",\"license\":\"MIT\"},\"contracts/gsn/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal view virtual returns (address payable);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal view virtual returns (bytes calldata);\\n\\n    function versionRecipient() external view virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x98407629d42cc10de31eb92b218545e2b8196ca29a171bc5d7c1e61be1676c15\",\"license\":\"MIT\"},\"contracts/interface/IAccountBalance.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { AccountMarket } from \\\"../lib/AccountMarket.sol\\\";\\n\\ninterface IAccountBalance {\\n    /// @param vault The address of the vault contract\\n    event VaultChanged(address indexed vault);\\n\\n    /// @dev Emit whenever a trader's `owedRealizedPnl` is updated\\n    /// @param trader The address of the trader\\n    /// @param amount The amount changed\\n    event PnlRealized(address indexed trader, int256 amount);\\n\\n    /// @notice Modify trader account balance\\n    /// @dev Only used by `ClearingHouse` contract\\n    /// @param trader The address of the trader\\n    /// @param baseToken The address of the baseToken\\n    /// @param base Modified amount of base\\n    /// @param quote Modified amount of quote\\n    /// @return takerPositionSize Taker position size after modified\\n    /// @return takerOpenNotional Taker open notional after modified\\n    function modifyTakerBalance(\\n        address trader,\\n        address baseToken,\\n        int256 base,\\n        int256 quote\\n    ) external returns (int256 takerPositionSize, int256 takerOpenNotional);\\n\\n    /// @notice Modify trader owedRealizedPnl\\n    /// @dev Only used by `ClearingHouse` contract\\n    /// @param trader The address of the trader\\n    /// @param amount Modified amount of owedRealizedPnl\\n    function modifyOwedRealizedPnl(address trader, int256 amount) external;\\n\\n    /// @notice Settle owedRealizedPnl\\n    /// @dev Only used by `Vault.withdraw()`\\n    /// @param trader The address of the trader\\n    /// @return pnl Settled owedRealizedPnl\\n    function settleOwedRealizedPnl(address trader) external returns (int256 pnl);\\n\\n    /// @notice Modify trader owedRealizedPnl\\n    /// @dev Only used by `ClearingHouse` contract\\n    /// @param trader The address of the trader\\n    /// @param baseToken The address of the baseToken\\n    /// @param amount Settled quote amount\\n    function settleQuoteToOwedRealizedPnl(\\n        address trader,\\n        address baseToken,\\n        int256 amount\\n    ) external;\\n\\n    /// @notice Settle account balance and deregister base token\\n    /// @dev Only used by `ClearingHouse` contract\\n    /// @param trader The address of the trader\\n    /// @param baseToken The address of the baseToken\\n    /// @param takerBase Modified amount of taker base\\n    /// @param takerQuote Modified amount of taker quote\\n    /// @param realizedPnl Amount of pnl realized\\n    /// @param makerFee Amount of maker fee collected from pool\\n    function settleBalanceAndDeregister(\\n        address trader,\\n        address baseToken,\\n        int256 takerBase,\\n        int256 takerQuote,\\n        int256 realizedPnl,\\n        int256 makerFee\\n    ) external;\\n\\n    /// @notice Every time a trader's position value is checked, the base token list of this trader will be traversed;\\n    /// thus, this list should be kept as short as possible\\n    /// @dev Only used by `ClearingHouse` contract\\n    /// @param trader The address of the trader\\n    /// @param baseToken The address of the trader's base token\\n    function registerBaseToken(address trader, address baseToken) external;\\n\\n    /// @notice Deregister baseToken from trader accountInfo\\n    /// @dev Only used by `ClearingHouse` contract, this function is expensive, due to for loop\\n    /// @param trader The address of the trader\\n    /// @param baseToken The address of the trader's base token\\n    function deregisterBaseToken(address trader, address baseToken) external;\\n\\n    /// @notice Update trader Twap premium info\\n    /// @dev Only used by `ClearingHouse` contract\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @param lastTwPremiumGrowthGlobalX96 The last Twap Premium\\n    function updateTwPremiumGrowthGlobal(\\n        address trader,\\n        address baseToken,\\n        int256 lastTwPremiumGrowthGlobalX96\\n    ) external;\\n\\n    /// @notice Settle trader's PnL in closed market\\n    /// @dev Only used by `ClearingHouse`\\n    /// @param trader The address of the trader\\n    /// @param baseToken The address of the trader's base token\\n    /// @return positionNotional Taker's position notional settled with closed price\\n    /// @return openNotional Taker's open notional\\n    /// @return realizedPnl Settled realized pnl\\n    /// @return closedPrice The closed price of the closed market\\n    function settlePositionInClosedMarket(address trader, address baseToken)\\n        external\\n        returns (\\n            int256 positionNotional,\\n            int256 openNotional,\\n            int256 realizedPnl,\\n            uint256 closedPrice\\n        );\\n\\n    /// @notice Get `ClearingHouseConfig` address\\n    /// @return clearingHouseConfig The address of ClearingHouseConfig\\n    function getClearingHouseConfig() external view returns (address clearingHouseConfig);\\n\\n    /// @notice Get `OrderBook` address\\n    /// @return orderBook The address of OrderBook\\n    function getOrderBook() external view returns (address orderBook);\\n\\n    /// @notice Get `Vault` address\\n    /// @return vault The address of Vault\\n    function getVault() external view returns (address vault);\\n\\n    /// @notice Get trader registered baseTokens\\n    /// @param trader The address of trader\\n    /// @return baseTokens The array of baseToken address\\n    function getBaseTokens(address trader) external view returns (address[] memory baseTokens);\\n\\n    /// @notice Get trader account info\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return traderAccountInfo The baseToken account info of trader\\n    function getAccountInfo(address trader, address baseToken)\\n        external\\n        view\\n        returns (AccountMarket.Info memory traderAccountInfo);\\n\\n    /// @notice Get taker cost of trader's baseToken\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return openNotional The taker cost of trader's baseToken\\n    function getTakerOpenNotional(address trader, address baseToken) external view returns (int256 openNotional);\\n\\n    /// @notice Get total cost of trader's baseToken\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return totalOpenNotional the amount of quote token paid for a position when opening\\n    function getTotalOpenNotional(address trader, address baseToken) external view returns (int256 totalOpenNotional);\\n\\n    /// @notice Get total debt value of trader\\n    /// @param trader The address of trader\\n    /// @dev Total debt value will relate to `Vault.getFreeCollateral()`\\n    /// @return totalDebtValue The debt value of trader\\n    function getTotalDebtValue(address trader) external view returns (uint256 totalDebtValue);\\n\\n    /// @notice Get margin requirement to check whether trader will be able to liquidate\\n    /// @dev This is different from `Vault._getTotalMarginRequirement()`, which is for freeCollateral calculation\\n    /// @param trader The address of trader\\n    /// @return marginRequirementForLiquidation It is compared with `ClearingHouse.getAccountValue` which is also an int\\n    function getMarginRequirementForLiquidation(address trader)\\n        external\\n        view\\n        returns (int256 marginRequirementForLiquidation);\\n\\n    /// @notice Get owedRealizedPnl, unrealizedPnl and pending fee\\n    /// @param trader The address of trader\\n    /// @return owedRealizedPnl the pnl realized already but stored temporarily in AccountBalance\\n    /// @return unrealizedPnl the pnl not yet realized\\n    /// @return pendingFee the pending fee of maker earned\\n    function getPnlAndPendingFee(address trader)\\n        external\\n        view\\n        returns (\\n            int256 owedRealizedPnl,\\n            int256 unrealizedPnl,\\n            uint256 pendingFee\\n        );\\n\\n    /// @notice Check trader has open order in open/closed market.\\n    /// @param trader The address of trader\\n    /// @return True of false\\n    function hasOrder(address trader) external view returns (bool);\\n\\n    /// @notice Get trader base amount\\n    /// @dev `base amount = takerPositionSize - orderBaseDebt`\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return baseAmount The base amount of trader's baseToken market\\n    function getBase(address trader, address baseToken) external view returns (int256 baseAmount);\\n\\n    /// @notice Get trader quote amount\\n    /// @dev `quote amount = takerOpenNotional - orderQuoteDebt`\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return quoteAmount The quote amount of trader's baseToken market\\n    function getQuote(address trader, address baseToken) external view returns (int256 quoteAmount);\\n\\n    /// @notice Get taker position size of trader's baseToken market\\n    /// @dev This will only has taker position, can get maker impermanent position through `getTotalPositionSize`\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return takerPositionSize The taker position size of trader's baseToken market\\n    function getTakerPositionSize(address trader, address baseToken) external view returns (int256 takerPositionSize);\\n\\n    /// @notice Get total position size of trader's baseToken market\\n    /// @dev `total position size = taker position size + maker impermanent position size`\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return totalPositionSize The total position size of trader's baseToken market\\n    function getTotalPositionSize(address trader, address baseToken) external view returns (int256 totalPositionSize);\\n\\n    /// @notice Get total position value of trader's baseToken market\\n    /// @dev A negative returned value is only be used when calculating pnl,\\n    /// @dev we use `15 mins` twap to calc position value\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return totalPositionValue Total position value of trader's baseToken market\\n    function getTotalPositionValue(address trader, address baseToken) external view returns (int256 totalPositionValue);\\n\\n    /// @notice Get all market position abs value of trader\\n    /// @param trader The address of trader\\n    /// @return totalAbsPositionValue Sum up positions value of every market\\n    function getTotalAbsPositionValue(address trader) external view returns (uint256 totalAbsPositionValue);\\n\\n    /// @notice Get liquidatable position size of trader's baseToken market\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @param accountValue The account value of trader\\n    /// @return liquidatablePositionSize The liquidatable position size of trader's baseToken market\\n    function getLiquidatablePositionSize(\\n        address trader,\\n        address baseToken,\\n        int256 accountValue\\n    ) external view returns (int256);\\n}\\n\",\"keccak256\":\"0x3bb5c7660e06f69b635a5cbd77eb3c848f5ad5d5552b33e77dd056f4ad9cdbcd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IClearingHouse.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IClearingHouse {\\n    /// @param useTakerBalance only accept false now\\n    struct AddLiquidityParams {\\n        address baseToken;\\n        uint256 base;\\n        uint256 quote;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        bool useTakerBalance;\\n        uint256 deadline;\\n    }\\n\\n    /// @param liquidity collect fee when 0\\n    struct RemoveLiquidityParams {\\n        address baseToken;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint128 liquidity;\\n        uint256 minBase;\\n        uint256 minQuote;\\n        uint256 deadline;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 fee;\\n        uint256 liquidity;\\n    }\\n\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 fee;\\n    }\\n\\n    /// @param oppositeAmountBound\\n    // B2Q + exact input, want more output quote as possible, so we set a lower bound of output quote\\n    // B2Q + exact output, want less input base as possible, so we set a upper bound of input base\\n    // Q2B + exact input, want more output base as possible, so we set a lower bound of output base\\n    // Q2B + exact output, want less input quote as possible, so we set a upper bound of input quote\\n    // when it's set to 0, it will disable slippage protection entirely regardless of exact input or output\\n    // when it's over or under the bound, it will be reverted\\n    /// @param sqrtPriceLimitX96\\n    // B2Q: the price cannot be less than this value after the swap\\n    // Q2B: the price cannot be greater than this value after the swap\\n    // it will fill the trade until it reaches the price limit but WON'T REVERT\\n    // when it's set to 0, it will disable price limit;\\n    // when it's 0 and exact output, the output amount is required to be identical to the param amount\\n    struct OpenPositionParams {\\n        address baseToken;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n        uint160 sqrtPriceLimitX96;\\n        bytes32 referralCode;\\n    }\\n\\n    struct ClosePositionParams {\\n        address baseToken;\\n        uint160 sqrtPriceLimitX96;\\n        uint256 oppositeAmountBound;\\n        uint256 deadline;\\n        bytes32 referralCode;\\n    }\\n\\n    struct CollectPendingFeeParams {\\n        address trader;\\n        address baseToken;\\n        int24 lowerTick;\\n        int24 upperTick;\\n    }\\n\\n    /// @notice Emitted when open position with non-zero referral code\\n    /// @param referralCode The referral code by partners\\n    event ReferredPositionChanged(bytes32 indexed referralCode);\\n\\n    /// @notice Emitted when taker position is being liquidated\\n    /// @param trader The trader who has been liquidated\\n    /// @param baseToken Virtual base token(ETH, BTC, etc...) address\\n    /// @param positionNotional The cost of position\\n    /// @param positionSize The size of position\\n    /// @param liquidationFee The fee of liquidate\\n    /// @param liquidator The address of liquidator\\n    event PositionLiquidated(\\n        address indexed trader,\\n        address indexed baseToken,\\n        uint256 positionNotional,\\n        uint256 positionSize,\\n        uint256 liquidationFee,\\n        address liquidator\\n    );\\n\\n    /// @notice Emitted when maker's liquidity of a order changed\\n    /// @param maker The one who provide liquidity\\n    /// @param baseToken The address of virtual base token(ETH, BTC, etc...)\\n    /// @param quoteToken The address of virtual USD token\\n    /// @param lowerTick The lower tick of the position in which to add liquidity\\n    /// @param upperTick The upper tick of the position in which to add liquidity\\n    /// @param base The amount of base token added (> 0) / removed (< 0) as liquidity; fees not included\\n    /// @param quote The amount of quote token added ... (same as the above)\\n    /// @param liquidity The amount of liquidity unit added (> 0) / removed (< 0)\\n    /// @param quoteFee The amount of quote token the maker received as fees\\n    event LiquidityChanged(\\n        address indexed maker,\\n        address indexed baseToken,\\n        address indexed quoteToken,\\n        int24 lowerTick,\\n        int24 upperTick,\\n        int256 base,\\n        int256 quote,\\n        int128 liquidity,\\n        uint256 quoteFee\\n    );\\n\\n    /// @notice Emitted when taker's position is being changed\\n    /// @param trader Trader address\\n    /// @param baseToken The address of virtual base token(ETH, BTC, etc...)\\n    /// @param exchangedPositionSize The actual amount swap to uniswapV3 pool\\n    /// @param exchangedPositionNotional The cost of position, include fee\\n    /// @param fee The fee of open/close position\\n    /// @param openNotional The cost of open/close position, < 0: long, > 0: short\\n    /// @param realizedPnl The realized Pnl after open/close position\\n    /// @param sqrtPriceAfterX96 The sqrt price after swap, in X96\\n    event PositionChanged(\\n        address indexed trader,\\n        address indexed baseToken,\\n        int256 exchangedPositionSize,\\n        int256 exchangedPositionNotional,\\n        uint256 fee,\\n        int256 openNotional,\\n        int256 realizedPnl,\\n        uint256 sqrtPriceAfterX96\\n    );\\n\\n    /// @notice Emitted when taker close her position in closed market\\n    /// @param trader Trader address\\n    /// @param baseToken The address of virtual base token(ETH, BTC, etc...)\\n    /// @param closedPositionSize Trader's position size in closed market\\n    /// @param closedPositionNotional Trader's position notional in closed market, based on closed price\\n    /// @param openNotional The cost of open/close position, < 0: long, > 0: short\\n    /// @param realizedPnl The realized Pnl after close position\\n    /// @param closedPrice The close price of position\\n    event PositionClosed(\\n        address indexed trader,\\n        address indexed baseToken,\\n        int256 closedPositionSize,\\n        int256 closedPositionNotional,\\n        int256 openNotional,\\n        int256 realizedPnl,\\n        uint256 closedPrice\\n    );\\n\\n    /// @notice Emitted when settling a trader's funding payment\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of virtual base token(ETH, BTC, etc...)\\n    /// @param fundingPayment The fundingPayment of trader on baseToken market, > 0: payment, < 0 : receipt\\n    event FundingPaymentSettled(address indexed trader, address indexed baseToken, int256 fundingPayment);\\n\\n    /// @notice Emitted when trusted forwarder address changed\\n    /// @dev TrustedForward is only used for metaTx\\n    /// @param forwarder The trusted forwarder address\\n    event TrustedForwarderChanged(address indexed forwarder);\\n\\n    /// @notice Emitted when DelegateApproval address changed\\n    /// @param delegateApproval The address of DelegateApproval\\n    event DelegateApprovalChanged(address indexed delegateApproval);\\n\\n    /// @notice Maker can call `addLiquidity` to provide liquidity on Uniswap V3 pool\\n    /// @dev Tx will fail if adding `base == 0 && quote == 0` / `liquidity == 0`\\n    /// @dev - `AddLiquidityParams.useTakerBalance` is only accept `false` now\\n    /// @param params AddLiquidityParams struct\\n    /// @return response AddLiquidityResponse struct\\n    function addLiquidity(AddLiquidityParams calldata params) external returns (AddLiquidityResponse memory response);\\n\\n    /// @notice Maker can call `removeLiquidity` to remove liquidity\\n    /// @dev remove liquidity will transfer maker impermanent position to taker position,\\n    /// if `liquidity` of RemoveLiquidityParams struct is zero, the action will collect fee from\\n    /// pool to maker\\n    /// @param params RemoveLiquidityParams struct\\n    /// @return response RemoveLiquidityResponse struct\\n    function removeLiquidity(RemoveLiquidityParams calldata params)\\n        external\\n        returns (RemoveLiquidityResponse memory response);\\n\\n    /// @notice Settle all markets fundingPayment to owedRealized Pnl\\n    /// @param trader The address of trader\\n    function settleAllFunding(address trader) external;\\n\\n    /// @notice Trader can call `openPosition` to long/short on baseToken market\\n    /// @dev - `OpenPositionParams.oppositeAmountBound`\\n    ///     - B2Q + exact input, want more output quote as possible, so we set a lower bound of output quote\\n    ///     - B2Q + exact output, want less input base as possible, so we set a upper bound of input base\\n    ///     - Q2B + exact input, want more output base as possible, so we set a lower bound of output base\\n    ///     - Q2B + exact output, want less input quote as possible, so we set a upper bound of input quote\\n    ///     > when it's set to 0, it will disable slippage protection entirely regardless of exact input or output\\n    ///     > when it's over or under the bound, it will be reverted\\n    /// @dev - `OpenPositionParams.sqrtPriceLimitX96`\\n    ///     - B2Q: the price cannot be less than this value after the swap\\n    ///     - Q2B: the price cannot be greater than this value after the swap\\n    ///     > it will fill the trade until it reaches the price limit but WON'T REVERT\\n    ///     > when it's set to 0, it will disable price limit;\\n    ///     > when it's 0 and exact output, the output amount is required to be identical to the param amount\\n    /// @param params OpenPositionParams struct\\n    /// @return base The amount of baseToken the taker got or spent\\n    /// @return quote The amount of quoteToken the taker got or spent\\n    function openPosition(OpenPositionParams memory params) external returns (uint256 base, uint256 quote);\\n\\n    /// @param trader The address of trader\\n    /// @param params OpenPositionParams struct is the same as `openPosition()`\\n    /// @return base The amount of baseToken the taker got or spent\\n    /// @return quote The amount of quoteToken the taker got or spent\\n    /// @return fee The trading fee\\n    function openPositionFor(address trader, OpenPositionParams memory params)\\n        external\\n        returns (\\n            uint256 base,\\n            uint256 quote,\\n            uint256 fee\\n        );\\n\\n    /// @notice Close trader's position\\n    /// @param params ClosePositionParams struct\\n    /// @return base The amount of baseToken the taker got or spent\\n    /// @return quote The amount of quoteToken the taker got or spent\\n    function closePosition(ClosePositionParams calldata params) external returns (uint256 base, uint256 quote);\\n\\n    /// @notice If trader is underwater, any one can call `liquidate` to liquidate this trader\\n    /// @dev If trader has open orders, need to call `cancelAllExcessOrders` first\\n    /// @dev If positionSize is greater than maxLiquidatePositionSize, liquidate maxLiquidatePositionSize by default\\n    /// @dev If margin ratio >= 0.5 * mmRatio,\\n    ///         maxLiquidateRatio = MIN((1, 0.5 * totalAbsPositionValue / absPositionValue)\\n    /// @dev If margin ratio < 0.5 * mmRatio, maxLiquidateRatio = 1\\n    /// @dev maxLiquidatePositionSize = positionSize * maxLiquidateRatio\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @param positionSize the position size to be liquidated by liquidator\\n    //    and MUST be the same direction as trader's position size\\n    function liquidate(\\n        address trader,\\n        address baseToken,\\n        int256 positionSize\\n    ) external;\\n\\n    /// @notice liquidate trader's position and will liquidate the max possible position size\\n    /// @dev If margin ratio >= 0.5 * mmRatio,\\n    ///         maxLiquidateRatio = MIN((1, 0.5 * totalAbsPositionValue / absPositionValue)\\n    /// @dev If margin ratio < 0.5 * mmRatio, maxLiquidateRatio = 1\\n    /// @dev maxLiquidatePositionSize = positionSize * maxLiquidateRatio\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    function liquidate(address trader, address baseToken) external;\\n\\n    /// @notice Cancel excess order of a maker\\n    /// @dev Order id can get from `OrderBook.getOpenOrderIds`\\n    /// @param maker The address of Maker\\n    /// @param baseToken The address of baseToken\\n    /// @param orderIds The id of the order\\n    function cancelExcessOrders(\\n        address maker,\\n        address baseToken,\\n        bytes32[] calldata orderIds\\n    ) external;\\n\\n    /// @notice Cancel all excess orders of a maker if the maker is underwater\\n    /// @dev This function won't fail if the maker has no order but fails when maker is not underwater\\n    /// @param maker The address of maker\\n    /// @param baseToken The address of baseToken\\n    function cancelAllExcessOrders(address maker, address baseToken) external;\\n\\n    /// @notice Close all positions of a trader in the closed market\\n    /// @param trader The address of trader\\n    /// @param baseToken The address of baseToken\\n    /// @return base The amount of base token that is closed\\n    /// @return quote The amount of quote token that is closed\\n    function quitMarket(address trader, address baseToken) external returns (uint256 base, uint256 quote);\\n\\n    /// @notice Get account value of trader\\n    /// @dev accountValue = totalCollateralValue + totalUnrealizedPnl, in 18 decimals\\n    /// @param trader The address of trader\\n    /// @return accountValue The account value of trader\\n    function getAccountValue(address trader) external view returns (int256 accountValue);\\n\\n    /// @notice Get QuoteToken address\\n    /// @return quoteToken The quote token address\\n    function getQuoteToken() external view returns (address quoteToken);\\n\\n    /// @notice Get UniswapV3Factory address\\n    /// @return factory UniswapV3Factory address\\n    function getUniswapV3Factory() external view returns (address factory);\\n\\n    /// @notice Get ClearingHouseConfig address\\n    /// @return clearingHouseConfig ClearingHouseConfig address\\n    function getClearingHouseConfig() external view returns (address clearingHouseConfig);\\n\\n    /// @notice Get `Vault` address\\n    /// @return vault `Vault` address\\n    function getVault() external view returns (address vault);\\n\\n    /// @notice Get `Exchange` address\\n    /// @return exchange `Exchange` address\\n    function getExchange() external view returns (address exchange);\\n\\n    /// @notice Get `OrderBook` address\\n    /// @return orderBook `OrderBook` address\\n    function getOrderBook() external view returns (address orderBook);\\n\\n    /// @notice Get AccountBalance address\\n    /// @return accountBalance `AccountBalance` address\\n    function getAccountBalance() external view returns (address accountBalance);\\n\\n    /// @notice Get `InsuranceFund` address\\n    /// @return insuranceFund `InsuranceFund` address\\n    function getInsuranceFund() external view returns (address insuranceFund);\\n\\n    /// @notice Get `DelegateApproval` address\\n    /// @return delegateApproval `DelegateApproval` address\\n    function getDelegateApproval() external view returns (address delegateApproval);\\n}\\n\",\"keccak256\":\"0xbc96e694ed04a33b4f06b022a32cf0fd2e77a59a5368e6b7a4ae1a15eb43ba3a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IClearingHouseConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\ninterface IClearingHouseConfig {\\n    /// @return maxMarketsPerAccount Max value of total markets per account\\n    function getMaxMarketsPerAccount() external view returns (uint8 maxMarketsPerAccount);\\n\\n    /// @return imRatio Initial margin ratio\\n    function getImRatio() external view returns (uint24 imRatio);\\n\\n    /// @return mmRatio Maintenance margin requirement ratio\\n    function getMmRatio() external view returns (uint24 mmRatio);\\n\\n    /// @return liquidationPenaltyRatio Liquidation penalty ratio\\n    function getLiquidationPenaltyRatio() external view returns (uint24 liquidationPenaltyRatio);\\n\\n    /// @return partialCloseRatio Partial close ratio\\n    function getPartialCloseRatio() external view returns (uint24 partialCloseRatio);\\n\\n    /// @return twapInterval TwapInterval for funding and prices (mark & index) calculations\\n    function getTwapInterval() external view returns (uint32 twapInterval);\\n\\n    /// @return settlementTokenBalanceCap Max value of settlement token balance\\n    function getSettlementTokenBalanceCap() external view returns (uint256 settlementTokenBalanceCap);\\n\\n    /// @return maxFundingRate Max value of funding rate\\n    function getMaxFundingRate() external view returns (uint24 maxFundingRate);\\n\\n    /// @return isBackstopLiquidityProvider is backstop liquidity provider\\n    function isBackstopLiquidityProvider(address account) external view returns (bool isBackstopLiquidityProvider);\\n}\\n\",\"keccak256\":\"0x20aca8ab185428ace5e8fd00abc67f4ba5d3a8dd9928dfcc5d367dac48fc2b53\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/ICollateralManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Collateral } from \\\"../lib/Collateral.sol\\\";\\n\\ninterface ICollateralManager {\\n    /// @notice Emitted when owner add collateral\\n    /// @param token address of token\\n    /// @param priceFeed address of price feed\\n    /// @param collateralRatio collateral ratio\\n    /// @param discountRatio discount ratio for the collateral liquidation\\n    /// @param depositCap max amount of collateral that can be deposited\\n    event CollateralAdded(\\n        address indexed token,\\n        address priceFeed,\\n        uint24 collateralRatio,\\n        uint24 discountRatio,\\n        uint256 depositCap\\n    );\\n\\n    /// @notice Emitted when owner update the address of clearing house config\\n    /// @param clearingHouseConfig address of clearing house config\\n    event ClearingHouseConfigChanged(address indexed clearingHouseConfig);\\n\\n    /// @notice Emitted when owner update the address of vault\\n    /// @param vault address of vault\\n    event VaultChanged(address indexed vault);\\n\\n    /// @notice Emitted when owner update the price feed address of a collateral token\\n    /// @param token address of token\\n    /// @param priceFeed address of price feed\\n    event PriceFeedChanged(address indexed token, address priceFeed);\\n\\n    /// @notice Emitted when owner update the collateral ratio of a collateral token\\n    /// @param token address of token\\n    /// @param collateralRatio collateral ratio\\n    event CollateralRatioChanged(address indexed token, uint24 collateralRatio);\\n\\n    /// @notice Emitted when owner change the discount ratio\\n    /// @param token address of token\\n    /// @param discountRatio discount ratio for the collateral liquidation\\n    event DiscountRatioChanged(address indexed token, uint24 discountRatio);\\n\\n    /// @notice Emitted when owner update the deposit cap of a collateral token\\n    /// @param token address of token\\n    /// @param depositCap max amount of the collateral that can be deposited\\n    event DepositCapChanged(address indexed token, uint256 depositCap);\\n\\n    /// @notice Emitted when owner init or update the max collateral tokens that per account can have,\\n    /// \\t\\tthis is can prevent high gas cost.\\n    /// @param maxCollateralTokensPerAccount max amount of collateral tokens that per account can have\\n    event MaxCollateralTokensPerAccountChanged(uint8 maxCollateralTokensPerAccount);\\n\\n    /// @notice Emitted when owner init or update the maintenance margin ratio buffer,\\n    ///         the value provides a safe range between the mmRatio & the collateralMMRatio.\\n    /// @param mmRatioBuffer safe buffer number (bps)\\n    event MmRatioBufferChanged(uint24 mmRatioBuffer);\\n\\n    /// @notice Emitted when owner init or update the debt non-settlement token value ratio,\\n    ///         maximum `debt / nonSettlementTokenValue` before the account's is liquidatable\\n    /// @param debtNonSettlementTokenValueRatio debt non-settlement token value ratio, \\u2264 1\\n    event DebtNonSettlementTokenValueRatioChanged(uint24 debtNonSettlementTokenValueRatio);\\n\\n    /// @notice Emitted when owner init or update the liquidation ratio,\\n    ///         the value presents the max repaid ratio of the collateral liquidation.\\n    /// @param liquidationRatio liquidation ratio, \\u2264 1\\n    event LiquidationRatioChanged(uint24 liquidationRatio);\\n\\n    /// @notice Emitted when owner init or update the clearing house insurance fund fee ratio,\\n    ///         charge fee for clearing house insurance fund.\\n    /// @param clInsuranceFundFeeRatio clearing house insurance fund fee ratio, \\u2264 1\\n    event CLInsuranceFundFeeRatioChanged(uint24 clInsuranceFundFeeRatio);\\n\\n    /// @notice Emitted when owner init or update the debt threshold,\\n    ///\\t\\t \\tmaximum debt allowed before an account\\u2019s collateral is liquidatable.\\n    /// @param debtThreshold debt threshold\\n    event DebtThresholdChanged(uint256 debtThreshold);\\n\\n    /// @notice Emitted when owner init or update the collateral value dust,\\n    ///\\t\\t\\tif a trader\\u2019s debt value falls below this dust threshold,\\n    /// \\t\\tthe liquidator will ignore the liquidationRatio.\\n    /// @param collateralValueDust collateral value dust\\n    event CollateralValueDustChanged(uint256 collateralValueDust);\\n\\n    /// @notice Get the address of vault\\n    /// @return vault address of vault\\n    function getVault() external view returns (address);\\n\\n    /// @notice Get the address of clearing house config\\n    /// @return clearingHouseConfig address of clearing house config\\n    function getClearingHouseConfig() external view returns (address);\\n\\n    /// @notice Get collateral config by token address\\n    /// @param token address of token\\n    /// @return collateral config\\n    function getCollateralConfig(address token) external view returns (Collateral.Config memory);\\n\\n    /// @notice Get price feed decimals of the collateral token\\n    /// @param token address of token\\n    /// @return decimals of the price feed\\n    function getPriceFeedDecimals(address token) external view returns (uint8);\\n\\n    /// @notice Get the price of the collateral token\\n    /// @param token address of token\\n    /// @return price of the certain period\\n    function getPrice(address token, uint256 interval) external view returns (uint256);\\n\\n    /// @notice Get the max number of collateral tokens per account\\n    /// @return max number of collateral tokens per account\\n    function getMaxCollateralTokensPerAccount() external view returns (uint8);\\n\\n    /// @notice Get the minimum `margin ratio - mmRatio` before the account's collateral is liquidatable\\n    /// @dev 6 decimals, same decimals as _mmRatio\\n    /// @return ratio\\n    function getMmRatioBuffer() external view returns (uint24);\\n\\n    /// @notice Get the maximum `debt / nonSettlementTokenValue` before the account's collaterals are liquidated\\n    /// @dev 6 decimals\\n    /// @return ratio\\n    function getDebtNonSettlementTokenValueRatio() external view returns (uint24);\\n\\n    /// @notice Get the maximum ratio of debt can be repaid in one transaction\\n    /// @dev 6 decimals. For example, `liquidationRatio` = 50% means\\n    ///      the liquidator can repay as much as half of the trader\\u2019s debt in one liquidation\\n    /// @return liquidation ratio\\n    function getLiquidationRatio() external view returns (uint24);\\n\\n    /// @notice Get the insurance fund fee ratio when liquidating a trader's collateral\\n    /// @dev 6 decimals. For example, `clInsuranceFundFeeRatio` = 5% means\\n    ///      the liquidator will pay 5% of transferred settlement token to insurance fund\\n    /// @return insurance fund fee ratio\\n    function getCLInsuranceFundFeeRatio() external view returns (uint24);\\n\\n    /// @notice Get the maximum debt (denominated in settlement token) allowed\\n    ///\\t\\t\\tbefore an account\\u2019s collateral is liquidatable.\\n    /// @dev 6 decimals\\n    /// @return Debt threshold\\n    function getDebtThreshold() external view returns (uint256);\\n\\n    /// @notice Get the threshold of the minium repaid.\\n    ///  \\t\\tIf a trader\\u2019s collateral value (denominated in settlement token) falls below the threshold,\\n    ///         the liquidator can convert it with 100% `liquidationRatio` so there is no dust left\\n    /// @dev 6 decimals\\n    /// @return Dust collateral value\\n    function getCollateralValueDust() external view returns (uint256);\\n\\n    /// @notice Check if the given token is one of collateral tokens\\n    /// @param token address of token\\n    /// @return true if the token is one of collateral tokens\\n    function isCollateral(address token) external view returns (bool);\\n\\n    /// @notice Require and get the the valid collateral maintenance margin ratio by mmRatioBuffer\\n    /// @param mmRatioBuffer safe margin ratio buffer; 6 decimals, same decimals as _mmRatio\\n    /// @return collateralMmRatio the collateral maintenance margin ratio\\n    function requireValidCollateralMmRatio(uint24 mmRatioBuffer) external view returns (uint24);\\n}\\n\",\"keccak256\":\"0x721a33279bbe3e3c40286f03fc26f1b1e2ab1ac655c078d5b6abccac4598b2ef\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interface/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.7.6;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa7db5c51ae35b65a78f299b32570e421bfc4e838a25f38630d4b54442fd3d137\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Funding } from \\\"../lib/Funding.sol\\\";\\n\\ninterface IExchange {\\n    /// @param amount when closing position, amount(uint256) == takerPositionSize(int256),\\n    /// as amount is assigned as takerPositionSize in ClearingHouse.closePosition()\\n    struct SwapParams {\\n        address trader;\\n        address baseToken;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        bool isClose;\\n        uint256 amount;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct SwapResponse {\\n        uint256 base;\\n        uint256 quote;\\n        int256 exchangedPositionSize;\\n        int256 exchangedPositionNotional;\\n        uint256 fee;\\n        uint256 insuranceFundFee;\\n        int256 pnlToBeRealized;\\n        uint256 sqrtPriceAfterX96;\\n        int24 tick;\\n        bool isPartialClose;\\n    }\\n\\n    struct SwapCallbackData {\\n        address trader;\\n        address baseToken;\\n        address pool;\\n        uint24 uniswapFeeRatio;\\n        uint256 fee;\\n    }\\n\\n    struct RealizePnlParams {\\n        address trader;\\n        address baseToken;\\n        int256 base;\\n        int256 quote;\\n    }\\n\\n    /// @notice Emitted when the global funding growth is updated\\n    /// @param baseToken Address of the base token\\n    /// @param markTwap The market twap price when the funding growth is updated\\n    /// @param indexTwap The index twap price when the funding growth is updated\\n    event FundingUpdated(address indexed baseToken, uint256 markTwap, uint256 indexTwap);\\n\\n    /// @notice Emitted when maxTickCrossedWithinBlock is updated\\n    /// @param baseToken Address of the base token\\n    /// @param maxTickCrossedWithinBlock Max tick allowed to be crossed within block when reducing position\\n    event MaxTickCrossedWithinBlockChanged(address indexed baseToken, uint24 maxTickCrossedWithinBlock);\\n\\n    /// @notice Emitted when accountBalance is updated\\n    /// @param accountBalance The address of accountBalance contract\\n    event AccountBalanceChanged(address accountBalance);\\n\\n    /// @notice The actual swap function\\n    /// @dev can only be called from ClearingHouse\\n    /// @param params The parameters of the swap\\n    /// @return swapResponse The result of the swap\\n    function swap(SwapParams memory params) external returns (SwapResponse memory swapResponse);\\n\\n    /// @notice Settle the funding payment for the time interval since the last settlement\\n    /// @dev This function should be called at the beginning of every high-level function, such as `openPosition()`\\n    ///      while it doesn't matter who calls this function\\n    ///      this function 1. settles personal funding payment 2. updates global funding growth\\n    ///      personal funding payment is settled whenever there is pending funding payment\\n    ///      the global funding growth update only happens once per unique timestamp (not blockNumber, due to Arbitrum)\\n    /// @return fundingPayment the funding payment of a trader in one market should be settled into owned realized Pnl\\n    /// @return fundingGrowthGlobal the up-to-date globalFundingGrowth, usually used for later calculations\\n    function settleFunding(address trader, address baseToken)\\n        external\\n        returns (int256 fundingPayment, Funding.Growth memory fundingGrowthGlobal);\\n\\n    /// @notice Get the max ticks allowed to be crossed within a block when reducing position\\n    /// @param baseToken Address of the base token\\n    /// @return maxTickCrossedWithinBlock The max ticks allowed to be crossed within a block when reducing position\\n    function getMaxTickCrossedWithinBlock(address baseToken) external view returns (uint24 maxTickCrossedWithinBlock);\\n\\n    /// @notice Get all the pending funding payment for a trader\\n    /// @return pendingFundingPayment The pending funding payment of the trader.\\n    /// Positive value means the trader pays funding, negative value means the trader receives funding.\\n    function getAllPendingFundingPayment(address trader) external view returns (int256 pendingFundingPayment);\\n\\n    /// @notice Check if current price spread between market price and index twap is over maximum price spread.\\n    /// @param baseToken Address of the base token\\n    /// @return true if over the maximum price spread\\n    function isOverPriceSpread(address baseToken) external view returns (bool);\\n\\n    /// @notice Get the pending funding payment for a trader in a given market\\n    /// @dev this is the view version of _updateFundingGrowth()\\n    /// @return pendingFundingPayment The pending funding payment of a trader in one market,\\n    /// including liquidity & balance coefficients. Positive value means the trader pays funding,\\n    /// negative value means the trader receives funding.\\n    function getPendingFundingPayment(address trader, address baseToken)\\n        external\\n        view\\n        returns (int256 pendingFundingPayment);\\n\\n    /// @notice Get the square root of the market twap price with the given time interval\\n    /// @dev The return value is a X96 number\\n    /// @param baseToken Address of the base token\\n    /// @param twapInterval The time interval in seconds\\n    /// @return sqrtMarkTwapX96 The square root of the market twap price\\n    function getSqrtMarkTwapX96(address baseToken, uint32 twapInterval) external view returns (uint160 sqrtMarkTwapX96);\\n\\n    /// @notice Get the pnl that can be realized if trader reduce position\\n    /// @dev This function normally won't be needed by traders, but it might be useful for 3rd party\\n    /// @param params The params needed to do the query, encoded as `RealizePnlParams` in calldata\\n    /// @return pnlToBeRealized The pnl that can be realized if trader reduce position\\n    function getPnlToBeRealized(RealizePnlParams memory params) external view returns (int256 pnlToBeRealized);\\n\\n    /// @notice Get `OrderBook` contract address\\n    /// @return orderBook `OrderBook` contract address\\n    function getOrderBook() external view returns (address orderBook);\\n\\n    /// @notice Get `AccountBalance` contract address\\n    /// @return accountBalance `AccountBalance` contract address\\n    function getAccountBalance() external view returns (address accountBalance);\\n\\n    /// @notice Get `ClearingHouseConfig` contract address\\n    /// @return clearingHouse `ClearingHouseConfig` contract address\\n    function getClearingHouseConfig() external view returns (address clearingHouse);\\n}\\n\",\"keccak256\":\"0x4b108ea8339574407133a79d8e253fe6cd8129437742561de03f894152f899f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IInsuranceFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\ninterface IInsuranceFund {\\n    /// @param borrower The address of the borrower\\n    event BorrowerChanged(address borrower);\\n\\n    /// @notice If bad debt happened, `Vault` contract will borrow from `InsuranceFund` contract\\n    /// @dev Borrower must be set by owner\\n    /// @param amount Borrow amount, must be less than `InsuranceFund` balance\\n    function borrow(uint256 amount) external;\\n\\n    /// @notice Get settlement token address\\n    /// @return token The address of settlement token\\n    function getToken() external view returns (address token);\\n\\n    /// @notice Get valid borrower\\n    /// @return borrower Should be equal to vault address\\n    function getBorrower() external view returns (address borrower);\\n}\\n\",\"keccak256\":\"0x15395195cac0664746529a2acfcad51241b5e57866050c714aba6b6a9cce8c80\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IVault {\\n    /// @notice Emitted when trader deposit collateral into vault\\n    /// @param collateralToken The address of token deposited\\n    /// @param trader The address of trader\\n    /// @param amount The amount of token deposited\\n    event Deposited(address indexed collateralToken, address indexed trader, uint256 amount);\\n\\n    /// @notice Emitted when trader withdraw collateral from vault\\n    /// @param collateralToken The address of token withdrawn\\n    /// @param trader The address of trader\\n    /// @param amount The amount of token withdrawn\\n    event Withdrawn(address indexed collateralToken, address indexed trader, uint256 amount);\\n\\n    /// @notice Emitted when a trader's collateral is liquidated\\n    /// @param trader The address of trader\\n    /// @param collateralToken The address of the token that is liquidated\\n    /// @param liquidator The address of liquidator\\n    /// @param collateral The amount of collateral token liquidated\\n    /// @param repaidSettlementWithoutInsuranceFundFeeX10_S The amount of settlement token repaid\\n    ///        for trader (in settlement token's decimals)\\n    /// @param insuranceFundFeeX10_S The amount of insurance fund fee paid(in settlement token's decimals)\\n    /// @param discountRatio The discount ratio of liquidation price\\n    event CollateralLiquidated(\\n        address indexed trader,\\n        address indexed collateralToken,\\n        address indexed liquidator,\\n        uint256 collateral,\\n        uint256 repaidSettlementWithoutInsuranceFundFeeX10_S,\\n        uint256 insuranceFundFeeX10_S,\\n        uint24 discountRatio\\n    );\\n\\n    /// @notice Emitted when trustedForwarder is changed\\n    /// @dev trustedForwarder is only used for metaTx\\n    /// @param trustedForwarder The address of trustedForwarder\\n    event TrustedForwarderChanged(address indexed trustedForwarder);\\n\\n    /// @notice Emitted when clearingHouse is changed\\n    /// @param clearingHouse The address of clearingHouse\\n    event ClearingHouseChanged(address indexed clearingHouse);\\n\\n    /// @notice Emitted when collateralManager is changed\\n    /// @param collateralManager The address of collateralManager\\n    event CollateralManagerChanged(address indexed collateralManager);\\n\\n    /// @notice Emitted when WETH9 is changed\\n    /// @param WETH9 The address of WETH9\\n    event WETH9Changed(address indexed WETH9);\\n\\n    /// @notice Deposit collateral into vault\\n    /// @param token The address of the token to deposit\\n    /// @param amount The amount of the token to deposit\\n    function deposit(address token, uint256 amount) external;\\n\\n    /// @notice Deposit the collateral token for other account\\n    /// @param to The address of the account to deposit to\\n    /// @param token The address of collateral token\\n    /// @param amount The amount of the token to deposit\\n    function depositFor(\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Deposit ETH as collateral into vault\\n    function depositEther() external payable;\\n\\n    /// @notice Deposit ETH as collateral for specified account\\n    /// @param to The address of the account to deposit to\\n    function depositEtherFor(address to) external payable;\\n\\n    /// @notice Withdraw collateral from vault\\n    /// @param token The address of the token to withdraw\\n    /// @param amount The amount of the token to withdraw\\n    function withdraw(address token, uint256 amount) external;\\n\\n    /// @notice Withdraw ETH from vault\\n    /// @param amount The amount of the ETH to withdraw\\n    function withdrawEther(uint256 amount) external;\\n\\n    /// @notice Withdraw all free collateral from vault\\n    /// @param token The address of the token to withdraw\\n    /// @return amount The amount of the token withdrawn\\n    function withdrawAll(address token) external returns (uint256 amount);\\n\\n    /// @notice Withdraw all free collateral of ETH from vault\\n    /// @return amount The amount of ETH withdrawn\\n    function withdrawAllEther() external returns (uint256 amount);\\n\\n    /// @notice Liquidate trader's collateral by given settlement token amount or non settlement token amount\\n    /// @param trader The address of trader that will be liquidated\\n    /// @param token The address of non settlement collateral token that the trader will be liquidated\\n    /// @param amount The amount of settlement token that the liquidator will repay for trader or\\n    ///               the amount of non-settlement collateral token that the liquidator will charge from trader\\n    /// @param isDenominatedInSettlementToken Whether the amount is denominated in settlement token or not\\n    /// @return returnAmount The amount of a non-settlement token (in its native decimals) that is liquidated\\n    ///         when `isDenominatedInSettlementToken` is true or the amount of settlement token that is repaid\\n    ///         when `isDenominatedInSettlementToken` is false\\n    function liquidateCollateral(\\n        address trader,\\n        address token,\\n        uint256 amount,\\n        bool isDenominatedInSettlementToken\\n    ) external returns (uint256 returnAmount);\\n\\n    /// @notice Get the specified trader's settlement token balance, without pending fee, funding payment\\n    ///         and owed realized PnL\\n    /// @dev The function is equivalent to `getBalanceByToken(trader, settlementToken)`\\n    ///      We keep this function solely for backward-compatibility with the older single-collateral system.\\n    ///      In practical applications, the developer might want to use `getSettlementTokenValue()` instead\\n    ///      because the latter includes pending fee, funding payment etc.\\n    ///      and therefore more accurately reflects a trader's settlement (ex. USDC) balance\\n    /// @return balance The balance amount (in settlement token's decimals)\\n    function getBalance(address trader) external view returns (int256 balance);\\n\\n    /// @notice Get the balance of Vault of the specified collateral token and trader\\n    /// @param trader The address of the trader\\n    /// @param token The address of the collateral token\\n    /// @return balance The balance amount (in its native decimals)\\n    function getBalanceByToken(address trader, address token) external view returns (int256 balance);\\n\\n    /// @notice Get they array of collateral token addresses that a trader has\\n    /// @return collateralTokens array of collateral token addresses\\n    function getCollateralTokens(address trader) external view returns (address[] memory collateralTokens);\\n\\n    /// @notice Get account value of the specified trader\\n    /// @param trader The address of the trader\\n    /// @return accountValueX10_S account value (in settlement token's decimals)\\n    function getAccountValue(address trader) external view returns (int256 accountValueX10_S);\\n\\n    /// @notice Get the free collateral value denominated in the settlement token of the specified trader\\n    /// @param trader The address of the trader\\n    /// @return freeCollateral the value (in settlement token's decimals) of free collateral available\\n    ///         for withdraw or opening new positions or orders)\\n    function getFreeCollateral(address trader) external view returns (uint256 freeCollateral);\\n\\n    /// @notice Get the free collateral amount of the specified trader and collateral ratio\\n    /// @dev There are three configurations for different insolvency risk tolerances:\\n    ///      **conservative, moderate &aggressive**. We will start with the **conservative** one\\n    ///      and gradually move to **aggressive** to increase capital efficiency\\n    /// @param trader The address of the trader\\n    /// @param ratio The margin requirement ratio, imRatio or mmRatio\\n    /// @return freeCollateralByRatio freeCollateral (in settlement token's decimals), by using the\\n    ///         input margin requirement ratio; can be negative\\n    function getFreeCollateralByRatio(address trader, uint24 ratio)\\n        external\\n        view\\n        returns (int256 freeCollateralByRatio);\\n\\n    /// @notice Get the free collateral amount of the specified collateral token of specified trader\\n    /// @param trader The address of the trader\\n    /// @param token The address of the collateral token\\n    /// @return freeCollateral amount of that token (in the token's native decimals)\\n    function getFreeCollateralByToken(address trader, address token) external view returns (uint256 freeCollateral);\\n\\n    /// @notice Get the specified trader's settlement value, including pending fee, funding payment,\\n    ///         owed realized PnL and unrealized PnL\\n    /// @dev Note the difference between `settlementTokenBalanceX10_S`, `getSettlementTokenValue()` and `getBalance()`:\\n    ///      They are all settlement token balances but with or without\\n    ///      pending fee, funding payment, owed realized PnL, unrealized PnL, respectively\\n    ///      In practical applications, we use `getSettlementTokenValue()` to get the trader's debt (if < 0)\\n    /// @param trader The address of the trader\\n    /// @return balance The balance amount (in settlement token's decimals)\\n    function getSettlementTokenValue(address trader) external view returns (int256 balance);\\n\\n    /// @notice Get the settlement token address\\n    /// @dev We assume the settlement token should match the denominator of the price oracle.\\n    ///      i.e. if the settlement token is USDC, then the oracle should be priced in USD\\n    /// @return settlementToken The address of the settlement token\\n    function getSettlementToken() external view returns (address settlementToken);\\n\\n    /// @notice Check if a given trader's collateral token can be liquidated; liquidation criteria:\\n    ///         1. margin ratio falls below maintenance threshold + 20bps (mmRatioBuffer)\\n    ///         2. USDC debt > nonSettlementTokenValue * debtNonSettlementTokenValueRatio (ex: 75%)\\n    ///         3. USDC debt > debtThreshold (ex: $10000)\\n    //          USDC debt = USDC balance + Total Unrealized PnL\\n    /// @param trader The address of the trader\\n    /// @return isLiquidatable If the trader can be liquidated\\n    function isLiquidatable(address trader) external view returns (bool isLiquidatable);\\n\\n    /// @notice get the margin requirement for collateral liquidation of a trader\\n    /// @dev this value is compared with `ClearingHouse.getAccountValue()` (int)\\n    /// @param trader The address of the trader\\n    /// @return marginRequirement margin requirement (in 18 decimals)\\n    function getMarginRequirementForCollateralLiquidation(address trader)\\n        external\\n        view\\n        returns (int256 marginRequirement);\\n\\n    /// @notice Get the maintenance margin ratio for collateral liquidation\\n    /// @return collateralMmRatio The maintenance margin ratio for collateral liquidation\\n    function getCollateralMmRatio() external view returns (uint24 collateralMmRatio);\\n\\n    /// @notice Get a trader's liquidatable collateral amount by a given settlement amount\\n    /// @param token The address of the token of the trader's collateral\\n    /// @param settlementX10_S The amount of settlement token the liquidator wants to pay\\n    /// @return collateral The collateral amount(in its native decimals) the liquidator can get\\n    function getLiquidatableCollateralBySettlement(address token, uint256 settlementX10_S)\\n        external\\n        view\\n        returns (uint256 collateral);\\n\\n    /// @notice Get a trader's repaid settlement amount by a given collateral amount\\n    /// @param token The address of the token of the trader's collateral\\n    /// @param collateral The amount of collateral token the liquidator wants to get\\n    /// @return settlementX10_S The settlement amount(in settlement token's decimals) the liquidator needs to pay\\n    function getRepaidSettlementByCollateral(address token, uint256 collateral)\\n        external\\n        view\\n        returns (uint256 settlementX10_S);\\n\\n    /// @notice Get a trader's max repaid settlement & max liquidatable collateral by a given collateral token\\n    /// @param trader The address of the trader\\n    /// @param token The address of the token of the trader's collateral\\n    /// @return maxRepaidSettlementX10_S The maximum settlement amount(in settlement token's decimals)\\n    ///         the liquidator needs to pay to liquidate a trader's collateral token\\n    /// @return maxLiquidatableCollateral The maximum liquidatable collateral amount\\n    ///         (in the collateral token's native decimals) of a trader\\n    function getMaxRepaidSettlementAndLiquidatableCollateral(address trader, address token)\\n        external\\n        view\\n        returns (uint256 maxRepaidSettlementX10_S, uint256 maxLiquidatableCollateral);\\n\\n    /// @notice Get settlement token decimals\\n    /// @dev cached the settlement token's decimal for gas optimization\\n    /// @return decimals The decimals of settlement token\\n    function decimals() external view returns (uint8 decimals);\\n\\n    /// @notice Get the borrowed settlement token amount from insurance fund\\n    /// @return debtAmount The debt amount (in settlement token's decimals)\\n    function getTotalDebt() external view returns (uint256 debtAmount);\\n\\n    /// @notice Get `ClearingHouseConfig` contract address\\n    /// @return clearingHouseConfig The address of `ClearingHouseConfig` contract\\n    function getClearingHouseConfig() external view returns (address clearingHouseConfig);\\n\\n    /// @notice Get `AccountBalance` contract address\\n    /// @return accountBalance The address of `AccountBalance` contract\\n    function getAccountBalance() external view returns (address accountBalance);\\n\\n    /// @notice Get `InsuranceFund` contract address\\n    /// @return insuranceFund The address of `InsuranceFund` contract\\n    function getInsuranceFund() external view returns (address insuranceFund);\\n\\n    /// @notice Get `Exchange` contract address\\n    /// @return exchange The address of `Exchange` contract\\n    function getExchange() external view returns (address exchange);\\n\\n    /// @notice Get `ClearingHouse` contract address\\n    /// @return clearingHouse The address of `ClearingHouse` contract\\n    function getClearingHouse() external view returns (address clearingHouse);\\n\\n    /// @notice Get `CollateralManager` contract address\\n    /// @return clearingHouse The address of `CollateralManager` contract\\n    function getCollateralManager() external view returns (address clearingHouse);\\n\\n    /// @notice Get `WETH9` contract address\\n    /// @return clearingHouse The address of `WETH9` contract\\n    function getWETH9() external view returns (address clearingHouse);\\n}\\n\",\"keccak256\":\"0x223e1ceca03e137b559acf66682444e238c2a6330779823bc1f59ee55248d21e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/external/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xdbe7bf3515c9337ef93eb7b183f44b0fe4e93da56047a1f4a104fd81d4c41ca3\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/AccountMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary AccountMarket {\\n    /// @param lastTwPremiumGrowthGlobalX96 the last time weighted premiumGrowthGlobalX96\\n    struct Info {\\n        int256 takerPositionSize;\\n        int256 takerOpenNotional;\\n        int256 lastTwPremiumGrowthGlobalX96;\\n    }\\n}\\n\",\"keccak256\":\"0x822da03771a9972bd8e18ade320ff14b920e6676c6bdf0521d7ce42cf8d0bd8a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/Collateral.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary Collateral {\\n    struct Config {\\n        address priceFeed;\\n        uint24 collateralRatio;\\n        uint24 discountRatio;\\n        uint256 depositCap;\\n    }\\n}\\n\",\"keccak256\":\"0x0dac603aa6c71d9ea3d63655fd7f1b981c49bf25aa9f2610c67321db2b0471ee\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/Funding.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { Tick } from \\\"./Tick.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { OpenOrder } from \\\"./OpenOrder.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { PerpFixedPoint96 } from \\\"./PerpFixedPoint96.sol\\\";\\nimport { TickMath } from \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport { LiquidityAmounts } from \\\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\n\\nlibrary Funding {\\n    using PerpSafeCast for uint256;\\n    using PerpSafeCast for uint128;\\n    using SignedSafeMathUpgradeable for int256;\\n\\n    //\\n    // STRUCT\\n    //\\n\\n    /// @dev tw: time-weighted\\n    /// @param twPremiumX96 overflow inspection (as twPremiumX96 > twPremiumDivBySqrtPriceX96):\\n    //         max = 2 ^ (255 - 96) = 2 ^ 159 = 7.307508187E47\\n    //         assume premium = 10000, time = 10 year = 60 * 60 * 24 * 365 * 10 -> twPremium = 3.1536E12\\n    struct Growth {\\n        int256 twPremiumX96;\\n        int256 twPremiumDivBySqrtPriceX96;\\n    }\\n\\n    //\\n    // CONSTANT\\n    //\\n\\n    /// @dev block-based funding is calculated as: premium * timeFraction / 1 day, for 1 day as the default period\\n    int256 internal constant _DEFAULT_FUNDING_PERIOD = 1 days;\\n\\n    //\\n    // INTERNAL PURE\\n    //\\n\\n    function calcPendingFundingPaymentWithLiquidityCoefficient(\\n        int256 baseBalance,\\n        int256 twPremiumGrowthGlobalX96,\\n        Growth memory fundingGrowthGlobal,\\n        int256 liquidityCoefficientInFundingPayment\\n    ) internal pure returns (int256) {\\n        int256 balanceCoefficientInFundingPayment =\\n            PerpMath.mulDiv(\\n                baseBalance,\\n                fundingGrowthGlobal.twPremiumX96.sub(twPremiumGrowthGlobalX96),\\n                uint256(PerpFixedPoint96._IQ96)\\n            );\\n\\n        return\\n            liquidityCoefficientInFundingPayment.add(balanceCoefficientInFundingPayment).div(_DEFAULT_FUNDING_PERIOD);\\n    }\\n\\n    /// @dev the funding payment of an order/liquidity is composed of\\n    ///      1. funding accrued inside the range 2. funding accrued below the range\\n    ///      there is no funding when the price goes above the range, as liquidity is all swapped into quoteToken\\n    /// @return liquidityCoefficientInFundingPayment the funding payment of an order/liquidity\\n    function calcLiquidityCoefficientInFundingPaymentByOrder(\\n        OpenOrder.Info memory order,\\n        Tick.FundingGrowthRangeInfo memory fundingGrowthRangeInfo\\n    ) internal pure returns (int256) {\\n        uint160 sqrtPriceX96AtUpperTick = TickMath.getSqrtRatioAtTick(order.upperTick);\\n\\n        // base amount below the range\\n        uint256 baseAmountBelow =\\n            LiquidityAmounts.getAmount0ForLiquidity(\\n                TickMath.getSqrtRatioAtTick(order.lowerTick),\\n                sqrtPriceX96AtUpperTick,\\n                order.liquidity\\n            );\\n        // funding below the range\\n        int256 fundingBelowX96 =\\n            baseAmountBelow.toInt256().mul(\\n                fundingGrowthRangeInfo.twPremiumGrowthBelowX96.sub(order.lastTwPremiumGrowthBelowX96)\\n            );\\n\\n        // funding inside the range =\\n        // liquidity * (\\u0394twPremiumDivBySqrtPriceGrowthInsideX96 - \\u0394twPremiumGrowthInsideX96 / sqrtPriceAtUpperTick)\\n        int256 fundingInsideX96 =\\n            order.liquidity.toInt256().mul(\\n                // \\u0394twPremiumDivBySqrtPriceGrowthInsideX96\\n                fundingGrowthRangeInfo\\n                    .twPremiumDivBySqrtPriceGrowthInsideX96\\n                    .sub(order.lastTwPremiumDivBySqrtPriceGrowthInsideX96)\\n                    .sub(\\n                    // \\u0394twPremiumGrowthInsideX96\\n                    PerpMath.mulDiv(\\n                        fundingGrowthRangeInfo.twPremiumGrowthInsideX96.sub(order.lastTwPremiumGrowthInsideX96),\\n                        PerpFixedPoint96._IQ96,\\n                        sqrtPriceX96AtUpperTick\\n                    )\\n                )\\n            );\\n\\n        return fundingBelowX96.add(fundingInsideX96).div(PerpFixedPoint96._IQ96);\\n    }\\n}\\n\",\"keccak256\":\"0xef949183abffa9803c13165577fdccde7e21587fed3bdaaf102c44dae59db576\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/OpenOrder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary OpenOrder {\\n    /// @param lastFeeGrowthInsideX128 fees in quote token recorded in Exchange\\n    ///        because of block-based funding, quote-only and customized fee, all fees are in quote token\\n    struct Info {\\n        uint128 liquidity;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint256 lastFeeGrowthInsideX128;\\n        int256 lastTwPremiumGrowthInsideX96;\\n        int256 lastTwPremiumGrowthBelowX96;\\n        int256 lastTwPremiumDivBySqrtPriceGrowthInsideX96;\\n        uint256 baseDebt;\\n        uint256 quoteDebt;\\n    }\\n\\n    function calcOrderKey(\\n        address trader,\\n        address baseToken,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(trader, baseToken, lowerTick, upperTick));\\n    }\\n}\\n\",\"keccak256\":\"0xd4c389da2c4b8a14d006000f994ba07c7363782053047a811bf22d4c30d78e18\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpFixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary PerpFixedPoint96 {\\n    int256 internal constant _IQ96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0f9e03ee7640204cb53a9726bad445e5a494d970939a9e5f360ca2e1b8afb95f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\n\\nlibrary PerpMath {\\n    using PerpSafeCast for int256;\\n    using SignedSafeMathUpgradeable for int256;\\n    using SafeMathUpgradeable for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -PerpSafeCast.toInt256(a);\\n    }\\n\\n    function neg128(int128 a) internal pure returns (int128) {\\n        require(a > -2**127, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg128(uint128 a) internal pure returns (int128) {\\n        return -PerpSafeCast.toInt128(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\\n        require(b <= a, \\\"PerpMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    function mulRatio(int256 value, uint24 ratio) internal pure returns (int256) {\\n        return mulDiv(value, int256(ratio), 1e6);\\n    }\\n\\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, 1e6, ratio);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in FullMath.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = FullMath.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : PerpSafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa8b135140183981561e42d3eca81186fbe8ad0c46091b52635b704674a511b4f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/PerpSafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev copy from \\\"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\\\"\\n * and rename to avoid naming conflict with uniswap\\n */\\nlibrary PerpSafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128 returnValue) {\\n        require(((returnValue = uint128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64 returnValue) {\\n        require(((returnValue = uint64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32 returnValue) {\\n        require(((returnValue = uint32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24 returnValue) {\\n        require(((returnValue = uint24(value)) == value), \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16 returnValue) {\\n        require(((returnValue = uint16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8 returnValue) {\\n        require(((returnValue = uint8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 returnValue) {\\n        require(((returnValue = int128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 returnValue) {\\n        require(((returnValue = int64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 returnValue) {\\n        require(((returnValue = int32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 returnValue) {\\n        require(((returnValue = int16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 returnValue) {\\n        require(((returnValue = int8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from int256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0 and into 24 bit.\\n     */\\n    function toUint24(int256 value) internal pure returns (uint24 returnValue) {\\n        require(\\n            ((returnValue = uint24(value)) == value),\\n            \\\"SafeCast: value must be positive or value doesn't fit in an 24 bits\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 returnValue) {\\n        require(((returnValue = int24(value)) == value), \\\"SafeCast: value doesn't fit in an 24 bits\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdb6bc08c0a2c5a49cf356824e5209ca8f89575b7f00f9484eaf4f85d9bc901fc\",\"license\":\"MIT\"},\"contracts/lib/SettlementTokenMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\n\\n/// @dev decimals of settlementToken token MUST be less than 18\\nlibrary SettlementTokenMath {\\n    using SafeMathUpgradeable for uint256;\\n    using SignedSafeMathUpgradeable for int256;\\n\\n    function lte(\\n        uint256 settlementToken,\\n        // solhint-disable-next-line var-name-mixedcase\\n        uint256 amountX10_18,\\n        uint8 decimals\\n    ) internal pure returns (bool) {\\n        return parseSettlementToken(settlementToken, decimals) <= amountX10_18;\\n    }\\n\\n    function lte(\\n        int256 settlementToken,\\n        // solhint-disable-next-line var-name-mixedcase\\n        int256 amountX10_18,\\n        uint8 decimals\\n    ) internal pure returns (bool) {\\n        return parseSettlementToken(settlementToken, decimals) <= amountX10_18;\\n    }\\n\\n    function lt(\\n        uint256 settlementToken,\\n        // solhint-disable-next-line var-name-mixedcase\\n        uint256 amountX10_18,\\n        uint8 decimals\\n    ) internal pure returns (bool) {\\n        return parseSettlementToken(settlementToken, decimals) < amountX10_18;\\n    }\\n\\n    function lt(\\n        int256 settlementToken,\\n        // solhint-disable-next-line var-name-mixedcase\\n        int256 amountX10_18,\\n        uint8 decimals\\n    ) internal pure returns (bool) {\\n        return parseSettlementToken(settlementToken, decimals) < amountX10_18;\\n    }\\n\\n    function gt(\\n        uint256 settlementToken,\\n        // solhint-disable-next-line var-name-mixedcase\\n        uint256 amountX10_18,\\n        uint8 decimals\\n    ) internal pure returns (bool) {\\n        return parseSettlementToken(settlementToken, decimals) > amountX10_18;\\n    }\\n\\n    function gt(\\n        int256 settlementToken,\\n        // solhint-disable-next-line var-name-mixedcase\\n        int256 amountX10_18,\\n        uint8 decimals\\n    ) internal pure returns (bool) {\\n        return parseSettlementToken(settlementToken, decimals) > amountX10_18;\\n    }\\n\\n    function gte(\\n        uint256 settlementToken,\\n        // solhint-disable-next-line var-name-mixedcase\\n        uint256 amountX10_18,\\n        uint8 decimals\\n    ) internal pure returns (bool) {\\n        return parseSettlementToken(settlementToken, decimals) >= amountX10_18;\\n    }\\n\\n    function gte(\\n        int256 settlementToken,\\n        // solhint-disable-next-line var-name-mixedcase\\n        int256 amountX10_18,\\n        uint8 decimals\\n    ) internal pure returns (bool) {\\n        return parseSettlementToken(settlementToken, decimals) >= amountX10_18;\\n    }\\n\\n    // returns number with 18 decimals\\n    function parseSettlementToken(uint256 amount, uint8 decimals) internal pure returns (uint256) {\\n        return amount.mul(10**(18 - decimals));\\n    }\\n\\n    // returns number with 18 decimals\\n    function parseSettlementToken(int256 amount, uint8 decimals) internal pure returns (int256) {\\n        return amount.mul(int256(10**(18 - decimals)));\\n    }\\n\\n    // returns number converted from 18 decimals to settlementToken's decimals\\n    function formatSettlementToken(uint256 amount, uint8 decimals) internal pure returns (uint256) {\\n        return amount.div(10**(18 - decimals));\\n    }\\n\\n    // returns number converted from 18 decimals to settlementToken's decimals\\n    // will always round down no matter positive value or negative value\\n    function formatSettlementToken(int256 amount, uint8 decimals) internal pure returns (int256) {\\n        uint256 denominator = 10**(18 - decimals);\\n        int256 rounding = 0;\\n        if (amount < 0 && uint256(-amount) % denominator != 0) {\\n            rounding = -1;\\n        }\\n        return amount.div(int256(denominator)).add(rounding);\\n    }\\n\\n    // returns number converted between specified decimals\\n    function convertTokenDecimals(\\n        uint256 amount,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        if (fromDecimals == toDecimals) {\\n            return amount;\\n        }\\n        return\\n            fromDecimals > toDecimals\\n                ? amount.div(10**(fromDecimals - toDecimals))\\n                : amount.mul(10**(toDecimals - fromDecimals));\\n    }\\n\\n    // returns number converted between specified decimals\\n    function convertTokenDecimals(\\n        int256 amount,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        if (fromDecimals == toDecimals) {\\n            return amount;\\n        }\\n\\n        if (fromDecimals < toDecimals) {\\n            return amount.mul(int256(10**(toDecimals - fromDecimals)));\\n        }\\n\\n        uint256 denominator = 10**(fromDecimals - toDecimals);\\n        int256 rounding = 0;\\n        if (amount < 0 && uint256(-amount) % denominator != 0) {\\n            rounding = -1;\\n        }\\n        return amount.div(int256(denominator)).add(rounding);\\n    }\\n}\\n\",\"keccak256\":\"0x754e0cc9478a7ddff65180ea85f6ef78b875f685eaae6d2b1843bbe2c90ac371\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary Tick {\\n    struct GrowthInfo {\\n        uint256 feeX128;\\n        int256 twPremiumX96;\\n        int256 twPremiumDivBySqrtPriceX96;\\n    }\\n\\n    struct FundingGrowthRangeInfo {\\n        int256 twPremiumGrowthInsideX96;\\n        int256 twPremiumGrowthBelowX96;\\n        int256 twPremiumDivBySqrtPriceGrowthInsideX96;\\n    }\\n\\n    /// @dev call this function only if (liquidityGrossBefore == 0 && liquidityDelta != 0)\\n    /// @dev per Uniswap: we assume that all growths before a tick is initialized happen \\\"below\\\" the tick\\n    function initialize(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 tick,\\n        int24 currentTick,\\n        GrowthInfo memory globalGrowthInfo\\n    ) internal {\\n        if (tick <= currentTick) {\\n            GrowthInfo storage growthInfo = self[tick];\\n            growthInfo.feeX128 = globalGrowthInfo.feeX128;\\n            growthInfo.twPremiumX96 = globalGrowthInfo.twPremiumX96;\\n            growthInfo.twPremiumDivBySqrtPriceX96 = globalGrowthInfo.twPremiumDivBySqrtPriceX96;\\n        }\\n    }\\n\\n    function cross(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 tick,\\n        GrowthInfo memory globalGrowthInfo\\n    ) internal {\\n        GrowthInfo storage growthInfo = self[tick];\\n        growthInfo.feeX128 = globalGrowthInfo.feeX128 - growthInfo.feeX128;\\n        growthInfo.twPremiumX96 = globalGrowthInfo.twPremiumX96 - growthInfo.twPremiumX96;\\n        growthInfo.twPremiumDivBySqrtPriceX96 =\\n            globalGrowthInfo.twPremiumDivBySqrtPriceX96 -\\n            growthInfo.twPremiumDivBySqrtPriceX96;\\n    }\\n\\n    function clear(mapping(int24 => GrowthInfo) storage self, int24 tick) internal {\\n        delete self[tick];\\n    }\\n\\n    /// @dev all values in this function are scaled by 2^128 (X128), thus adding the suffix to external params\\n    /// @return feeGrowthInsideX128 this value can underflow per Tick.feeGrowthOutside specs\\n    function getFeeGrowthInsideX128(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 lowerTick,\\n        int24 upperTick,\\n        int24 currentTick,\\n        uint256 feeGrowthGlobalX128\\n    ) internal view returns (uint256 feeGrowthInsideX128) {\\n        uint256 lowerFeeGrowthOutside = self[lowerTick].feeX128;\\n        uint256 upperFeeGrowthOutside = self[upperTick].feeX128;\\n\\n        uint256 feeGrowthBelow =\\n            currentTick >= lowerTick ? lowerFeeGrowthOutside : feeGrowthGlobalX128 - lowerFeeGrowthOutside;\\n        uint256 feeGrowthAbove =\\n            currentTick < upperTick ? upperFeeGrowthOutside : feeGrowthGlobalX128 - upperFeeGrowthOutside;\\n\\n        return feeGrowthGlobalX128 - feeGrowthBelow - feeGrowthAbove;\\n    }\\n\\n    /// @return all values returned can underflow per feeGrowthOutside specs;\\n    ///         see https://www.notion.so/32990980ba8b43859f6d2541722a739b\\n    function getAllFundingGrowth(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 lowerTick,\\n        int24 upperTick,\\n        int24 currentTick,\\n        int256 twPremiumGrowthGlobalX96,\\n        int256 twPremiumDivBySqrtPriceGrowthGlobalX96\\n    ) internal view returns (FundingGrowthRangeInfo memory) {\\n        GrowthInfo storage lowerTickGrowthInfo = self[lowerTick];\\n        GrowthInfo storage upperTickGrowthInfo = self[upperTick];\\n\\n        int256 lowerTwPremiumGrowthOutsideX96 = lowerTickGrowthInfo.twPremiumX96;\\n        int256 upperTwPremiumGrowthOutsideX96 = upperTickGrowthInfo.twPremiumX96;\\n\\n        FundingGrowthRangeInfo memory fundingGrowthRangeInfo;\\n        fundingGrowthRangeInfo.twPremiumGrowthBelowX96 = currentTick >= lowerTick\\n            ? lowerTwPremiumGrowthOutsideX96\\n            : twPremiumGrowthGlobalX96 - lowerTwPremiumGrowthOutsideX96;\\n        int256 twPremiumGrowthAboveX96 =\\n            currentTick < upperTick\\n                ? upperTwPremiumGrowthOutsideX96\\n                : twPremiumGrowthGlobalX96 - upperTwPremiumGrowthOutsideX96;\\n\\n        int256 lowerTwPremiumDivBySqrtPriceGrowthOutsideX96 = lowerTickGrowthInfo.twPremiumDivBySqrtPriceX96;\\n        int256 upperTwPremiumDivBySqrtPriceGrowthOutsideX96 = upperTickGrowthInfo.twPremiumDivBySqrtPriceX96;\\n\\n        int256 twPremiumDivBySqrtPriceGrowthBelowX96 =\\n            currentTick >= lowerTick\\n                ? lowerTwPremiumDivBySqrtPriceGrowthOutsideX96\\n                : twPremiumDivBySqrtPriceGrowthGlobalX96 - lowerTwPremiumDivBySqrtPriceGrowthOutsideX96;\\n        int256 twPremiumDivBySqrtPriceGrowthAboveX96 =\\n            currentTick < upperTick\\n                ? upperTwPremiumDivBySqrtPriceGrowthOutsideX96\\n                : twPremiumDivBySqrtPriceGrowthGlobalX96 - upperTwPremiumDivBySqrtPriceGrowthOutsideX96;\\n\\n        fundingGrowthRangeInfo.twPremiumGrowthInsideX96 =\\n            twPremiumGrowthGlobalX96 -\\n            fundingGrowthRangeInfo.twPremiumGrowthBelowX96 -\\n            twPremiumGrowthAboveX96;\\n        fundingGrowthRangeInfo.twPremiumDivBySqrtPriceGrowthInsideX96 =\\n            twPremiumDivBySqrtPriceGrowthGlobalX96 -\\n            twPremiumDivBySqrtPriceGrowthBelowX96 -\\n            twPremiumDivBySqrtPriceGrowthAboveX96;\\n\\n        return fundingGrowthRangeInfo;\\n    }\\n}\\n\",\"keccak256\":\"0x9780f0d7a0f8e9240ec9c26e48056d458d3f3ddc10047d1804fb07bed40771e0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/storage/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\n/// @notice For future upgrades, do not change VaultStorageV1. Create a new\\n/// contract which implements VaultStorageV1 and following the naming convention\\n/// VaultStorageVX.\\nabstract contract VaultStorageV1 {\\n    // --------- IMMUTABLE ---------\\n\\n    uint8 internal _decimals;\\n\\n    address internal _settlementToken;\\n\\n    // --------- ^^^^^^^^^ ---------\\n\\n    address internal _clearingHouseConfig;\\n    address internal _accountBalance;\\n    address internal _insuranceFund;\\n    address internal _exchange;\\n    address internal _clearingHouse;\\n    uint256 internal _totalDebt;\\n\\n    // key: trader, token address\\n    mapping(address => mapping(address => int256)) internal _balance;\\n}\\n\\nabstract contract VaultStorageV2 is VaultStorageV1 {\\n    address internal _collateralManager;\\n    address internal _WETH9;\\n\\n    // trader => collateral token\\n    // collateral token registry of each trader\\n    mapping(address => address[]) internal _collateralTokensMap;\\n}\\n\",\"keccak256\":\"0x63a5bcd027de279c14669f5fe3a5ae47c0ad17da040e40880e70c7387934da58\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061580a80620000216000396000f3fe6080604052600436106102a25760003560e01c8063842a05d411610165578063c3b66b31116100cc578063dfa441be11610085578063dfa441be1461075f578063ed903f7a14610774578063f3fef3a3146107a1578063f807cd22146107c1578063f8b2cb4f146107d6578063f8c8765e146107f6578063fa09e63014610816576102a9565b8063c3b66b31146106c0578063c575ff79146106e0578063ca91e18c146106f5578063ce1b815f14610715578063d9fd870b1461072a578063da7422281461073f576102a9565b8063ac4531bd1161011e578063ac4531bd14610609578063b3db428b1461062b578063b800a6b31461064b578063bc5920ba1461066b578063c0e695b814610680578063c3999444146106a0576102a9565b8063842a05d4146105745780638456cb59146105945780638da5cb5b146105a957806398ea5fca146105be578063a9b786b2146105c6578063aa2a8294146105f4576102a9565b80633ffd1303116102095780635ae80951116101c25780635ae80951146104e05780635c975abb146105005780636896fabf146105155780636c8381f81461052a578063715018a61461053f57806371b6a5bb14610554576102a9565b80633ffd13031461042b578063449323d81461044b57806347e7ef241461046b578063486ff0cd1461048b5780634faa8a26146104ad578063572b6c05146104c0576102a9565b80632e40a51b1161025b5780632e40a51b1461038a578063313ce567146103aa57806331c91117146103cc57806334ce998a146103e15780633bed33ce146103f65780633f4ba83a14610416576102a9565b8063042e02cf146102ae57806308511abb146102e457806312803c7d1461031157806312ca1d171461033357806313af403514610353578063158626f714610375576102a9565b366102a957005b600080fd5b3480156102ba57600080fd5b506102ce6102c9366004614ef8565b610836565b6040516102db9190615273565b60405180910390f35b3480156102f057600080fd5b506103046102ff366004615003565b610a1f565b6040516102db919061527e565b34801561031d57600080fd5b50610326610ba6565b6040516102db91906151f3565b34801561033f57600080fd5b5061030461034e366004614f30565b610bbc565b34801561035f57600080fd5b5061037361036e366004614ef8565b610d28565b005b34801561038157600080fd5b50610326610e83565b34801561039657600080fd5b506103046103a5366004614f30565b610e93565b3480156103b657600080fd5b506103bf610ebf565b6040516102db9190615624565b3480156103d857600080fd5b50610304610ec9565b3480156103ed57600080fd5b50610304610fa4565b34801561040257600080fd5b50610373610411366004615196565b610fab565b34801561042257600080fd5b50610373611069565b34801561043757600080fd5b5061030461044636600461504a565b6110d0565b34801561045757600080fd5b50610373610466366004614ef8565b6110f5565b34801561047757600080fd5b50610373610486366004615077565b6111cb565b34801561049757600080fd5b506104a06112c9565b6040516102db9190615287565b6103736104bb366004614ef8565b6112e8565b3480156104cc57600080fd5b506102ce6104db366004614ef8565b6113b6565b3480156104ec57600080fd5b506103046104fb366004614ef8565b6113ca565b34801561050c57600080fd5b506102ce6113ec565b34801561052157600080fd5b506103266113f5565b34801561053657600080fd5b50610326611405565b34801561054b57600080fd5b50610373611414565b34801561056057600080fd5b5061030461056f366004614ef8565b6114b5565b34801561058057600080fd5b5061037361058f366004614ef8565b61154b565b3480156105a057600080fd5b50610373611621565b3480156105b557600080fd5b50610326611686565b610373611695565b3480156105d257600080fd5b506105e66105e1366004614f30565b611742565b6040516102db9291906155f6565b34801561060057600080fd5b50610326611888565b34801561061557600080fd5b5061061e611898565b6040516102db91906155e6565b34801561063757600080fd5b50610373610646366004614fc3565b611995565b34801561065757600080fd5b50610304610666366004615077565b611aba565b34801561067757600080fd5b50610373611b96565b34801561068c57600080fd5b5061030461069b366004615077565b611c82565b3480156106ac57600080fd5b506103046106bb366004614ef8565b611d4c565b3480156106cc57600080fd5b506103046106db366004614ef8565b611d63565b3480156106ec57600080fd5b50610326611d7a565b34801561070157600080fd5b50610373610710366004614ef8565b611d8a565b34801561072157600080fd5b50610326611e60565b34801561073657600080fd5b50610326611e6f565b34801561074b57600080fd5b5061037361075a366004614ef8565b611e7f565b34801561076b57600080fd5b50610326611f4a565b34801561078057600080fd5b5061079461078f366004614ef8565b611f5a565b6040516102db9190615226565b3480156107ad57600080fd5b506103736107bc366004615077565b611fd1565b3480156107cd57600080fd5b506103266120c4565b3480156107e257600080fd5b506103046107f1366004614ef8565b6120d4565b34801561080257600080fd5b50610373610811366004614f68565b612107565b34801561082257600080fd5b50610304610831366004614ef8565b6123c8565b6001600160a01b038116600090815261013a60205260408120805461085f576000915050610a1a565b600061086a846124d4565b509050610876846114b5565b81121561088857600192505050610a1a565b60006108938561257b565b905060008082126108a55760006108b6565b6108b66108b1836125a0565b6125cc565b905061095161013860009054906101000a90046001600160a01b03166001600160a01b031663b6113be66040518163ffffffff1660e01b815260040160206040518083038186803b15801561090a57600080fd5b505afa15801561091e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610942919061517a565b61094b88612627565b90612783565b811115610965576001945050505050610a1a565b61013860009054906101000a90046001600160a01b03166001600160a01b031663b2eae8386040518163ffffffff1660e01b815260040160206040518083038186803b1580156109b457600080fd5b505afa1580156109c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec91906150be565b610130546109fe90839060ff16612798565b1115610a11576001945050505050610a1a565b60009450505050505b919050565b6000610a296113ec565b15610a6e576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60026001541415610ab4576040805162461bcd60e51b815260206004820152601f6024820152600080516020615667833981519152604482015290519081900360640190fd5b6002600155610ac285610836565b610ae75760405162461bcd60e51b8152600401610ade906154e7565b60405180910390fd5b600080610af48787611742565b9150915060008060008615610b485787915084821115610b265760405162461bcd60e51b8152600401610ade906154a7565b848214610b3c57610b378983611aba565b610b3e565b835b9250829050610b89565b87925083831115610b6b5760405162461bcd60e51b8152600401610ade90615391565b838314610b8157610b7c8984611c82565b610b83565b845b91508190505b610b958a8a84866127ae565b600180559998505050505050505050565b6101305461010090046001600160a01b03165b90565b600080610bc88461257b565b1215610bd657506000610d22565b6000610be1846129ab565b905080610bf2576000915050610d22565b610130546001600160a01b03848116610100909204161415610c59576000610c1985612a4a565b5090506000811315610c4d5761013054610c489060ff16610c4284610c3d856125cc565b612ba3565b90612798565b610c50565b60005b92505050610d22565b600080610c6585612bb9565b61013854604051631ed4896760e31b81529294509092506000916001600160a01b039091169063f6a44b3890610c9f9089906004016151f3565b60806040518083038186803b158015610cb757600080fd5b505afa158015610ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cef9190615103565b602001519050610d1b610d0e82610d0889888888612d43565b90612d9d565b610c3d6108b18a8a610e93565b9450505050505b92915050565b610d30612db2565b6001600160a01b0316610d41611686565b6001600160a01b031614610d85576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b6001600160a01b038116610dc9576040805162461bcd60e51b81526020600482015260066024820152650534f5f4e57360d41b604482015290519081900360640190fd5b6065546001600160a01b0382811691161415610e15576040805162461bcd60e51b8152602060048201526006602482015265534f5f53414f60d01b604482015290519081900360640190fd5b6066546001600160a01b0382811691161415610e61576040805162461bcd60e51b8152602060048201526006602482015265534f5f53414360d01b604482015290519081900360640190fd5b606680546001600160a01b0319166001600160a01b0392909216919091179055565b610133546001600160a01b031690565b6001600160a01b0391821660009081526101376020908152604080832093909416825291909152205490565b6101305460ff1690565b6000610ed36113ec565b15610f18576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60026001541415610f5e576040805162461bcd60e51b815260206004820152601f6024820152600080516020615667833981519152604482015290519081900360640190fd5b6002600155610f6b612dc1565b6000610f75612db2565b61013954909150610f909082906001600160a01b0316610bbc565b9150610f9c8183612df3565b506001805590565b6101365490565b610fb36113ec565b15610ff8576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6002600154141561103e576040805162461bcd60e51b815260206004820152601f6024820152600080516020615667833981519152604482015290519081900360640190fd5b600260015561104b612dc1565b6000611055612db2565b90506110618183612df3565b505060018055565b611071612db2565b6001600160a01b0316611082611686565b6001600160a01b0316146110c6576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b6110ce612ec3565b565b610130546000906110ee9060ff166110e88585612f63565b90612f99565b9392505050565b6110fd612db2565b6001600160a01b031661110e611686565b6001600160a01b031614611152576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b611164816001600160a01b0316612fe2565b6111805760405162461bcd60e51b8152600401610ade906153d1565b61013580546001600160a01b0319166001600160a01b0383169081179091556040517fd0654f5900f9e7e4e605a19334306e6a2786bbf960ac0484a4c12feb6428fe2f90600090a250565b6111d36113ec565b15611218576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6002600154141561125e576040805162461bcd60e51b815260206004820152601f6024820152600080516020615667833981519152604482015290519081900360640190fd5b60026001556101305482906001600160a01b0380831661010090920416148061128b575061128b81612fe8565b6112a75760405162461bcd60e51b8152600401610ade906153b1565b60006112b1612db2565b90506112bf8182868661306a565b5050600180555050565b6040805180820190915260058152640322e302e360dc1b602082015290565b6112f06113ec565b15611335576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6002600154141561137b576040805162461bcd60e51b815260206004820152601f6024820152600080516020615667833981519152604482015290519081900360640190fd5b60026001556001600160a01b0381166113a65760405162461bcd60e51b8152600401610ade906153f1565b6113af816130a6565b5060018055565b60fd546001600160a01b0390811691161490565b6000806113d6836124d4565b50610130549091506110ee90829060ff16612f99565b60995460ff1690565b610132546001600160a01b031690565b6066546001600160a01b031690565b61141c612db2565b6001600160a01b031661142d611686565b6001600160a01b031614611471576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b6065546040516000916001600160a01b031690600080516020615718833981519152908390a3606580546001600160a01b0319908116909155606680549091169055565b6000610d226115466114c5611898565b61013254604051633666e41760e11b81526001600160a01b0390911690636ccdc82e906114f69088906004016151f3565b60206040518083038186803b15801561150e57600080fd5b505afa158015611522573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b91906150be565b613140565b611553612db2565b6001600160a01b0316611564611686565b6001600160a01b0316146115a8576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b6115ba816001600160a01b0316612fe2565b6115d65760405162461bcd60e51b8152600401610ade90615565565b61013880546001600160a01b0319166001600160a01b0383169081179091556040517f7f1f6e997b7238fb3f4ee953b0630eda9d99527ae013f1e84bd916457e0a9dd490600090a250565b611629612db2565b6001600160a01b031661163a611686565b6001600160a01b03161461167e576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b6110ce613188565b6065546001600160a01b031690565b61169d6113ec565b156116e2576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60026001541415611728576040805162461bcd60e51b815260206004820152601f6024820152600080516020615667833981519152604482015290519081900360640190fd5b60026001556000611737612db2565b90506113af816130a6565b60008061174e83612fe8565b61176a5760405162461bcd60e51b8152600401610ade90615524565b60006117758561320b565b61013854604051631ed4896760e31b81529192506000916001600160a01b039091169063f6a44b38906117ac9088906004016151f3565b60806040518083038186803b1580156117c457600080fd5b505afa1580156117d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fc9190615103565b60400151905060008061180e87612bb9565b9092509050600061182c611825620f4240866134a5565b8490612783565b905061183a88868385612d43565b9550600061184b6108b18b8b610e93565b90508087111561186757809650611864898884866134d7565b95505b6101305461187990879060ff16612798565b97505050505050509250929050565b610131546001600160a01b031690565b6101385460408051633bc1d7ab60e01b8152905160009283926001600160a01b039091169163648cff3a918391633bc1d7ab91600480820192602092909190829003018186803b1580156118eb57600080fd5b505afa1580156118ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611923919061517a565b6040518263ffffffff1660e01b815260040161193f91906155e6565b60206040518083038186803b15801561195757600080fd5b505afa15801561196b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198f919061517a565b91505090565b61199d6113ec565b156119e2576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60026001541415611a28576040805162461bcd60e51b815260206004820152601f6024820152600080516020615667833981519152604482015290519081900360640190fd5b60026001556101305482906001600160a01b03808316610100909204161480611a555750611a5581612fe8565b611a715760405162461bcd60e51b8152600401610ade906153b1565b6001600160a01b038416611a975760405162461bcd60e51b8152600401610ade906153f1565b6000611aa1612db2565b9050611aaf8186868661306a565b505060018055505050565b61013854604051631ed4896760e31b815260009182916001600160a01b039091169063f6a44b3890611af09087906004016151f3565b60806040518083038186803b158015611b0857600080fd5b505afa158015611b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b409190615103565b604001519050600080611b5286612bb9565b610130549193509150611b8c908790611b6f90889060ff16613525565b611b86611b7f620f4240886134a5565b8690612783565b84612d43565b9695505050505050565b6066546001600160a01b0316611bdb576040805162461bcd60e51b81526020600482015260056024820152640534f5f43360dc1b604482015290519081900360640190fd5b611be3612db2565b6066546001600160a01b03908116911614611c2e576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4360d01b604482015290519081900360640190fd5b6066546065546040516001600160a01b03928316929091169060008051602061571883398151915290600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b61013854604051631ed4896760e31b815260009182916001600160a01b039091169063f6a44b3890611cb89087906004016151f3565b60806040518083038186803b158015611cd057600080fd5b505afa158015611ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d089190615103565b604001519050600080611d1a86612bb9565b610130549193509150611b8c9060ff16610c428888611d46611d3f620f42408a6134a5565b8890612783565b866134d7565b61013054600090610d229060ff16610c42846129ab565b61013054600090610d229060ff166110e88461257b565b610135546001600160a01b031690565b611d92612db2565b6001600160a01b0316611da3611686565b6001600160a01b031614611de7576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b611df9816001600160a01b0316612fe2565b611e155760405162461bcd60e51b8152600401610ade90615505565b61013980546001600160a01b0319166001600160a01b0383169081179091556040517f058d4d3b4c34c38d2a57d5abcbfceff6b01f10883bb6a6033f394a98ffbc6ed190600090a250565b60fd546001600160a01b031690565b610139546001600160a01b031690565b611e87612db2565b6001600160a01b0316611e98611686565b6001600160a01b031614611edc576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b611eee816001600160a01b0316612fe2565b611f0a5760405162461bcd60e51b8152600401610ade906154c7565b611f138161353b565b6040516001600160a01b038216907f871264f4293af7d2865ae7eae628b228f4991c57cb45b39c99f0b774ebe2901890600090a250565b610138546001600160a01b031690565b6001600160a01b038116600090815261013a6020908152604091829020805483518184028101840190945280845260609392830182828015611fc557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611fa7575b50505050509050919050565b611fd96113ec565b1561201e576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60026001541415612064576040805162461bcd60e51b815260206004820152601f6024820152600080516020615667833981519152604482015290519081900360640190fd5b60026001556101305482906001600160a01b03808316610100909204161480612091575061209181612fe8565b6120ad5760405162461bcd60e51b8152600401610ade906153b1565b60006120b7612db2565b90506112bf81858561358f565b610134546001600160a01b031690565b6001600160a01b039081166000908152610137602090815260408083206101305461010090049094168352929052205490565b600054610100900460ff168061212057506121206135e8565b8061212e575060005460ff16155b6121695760405162461bcd60e51b815260040180806020018281038252602e8152602001806156a8602e913960400191505060405180910390fd5b600054610100900460ff16158015612194576000805460ff1961ff0019909116610100171660011790555b6000856001600160a01b03166321df0da76040518163ffffffff1660e01b815260040160206040518083038186803b1580156121cf57600080fd5b505afa1580156121e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122079190614f14565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561224457600080fd5b505afa158015612258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227c91906151d2565b905060128160ff1611156122a25760405162461bcd60e51b8152600401610ade906155c6565b6122b4866001600160a01b0316612fe2565b6122d05760405162461bcd60e51b8152600401610ade906152da565b6122e2856001600160a01b0316612fe2565b6122fe5760405162461bcd60e51b8152600401610ade906155a6565b612310846001600160a01b0316612fe2565b61232c5760405162461bcd60e51b8152600401610ade90615451565b6123346135f9565b61233c6136a3565b610130805460ff191660ff9290921691909117610100600160a81b0319166101006001600160a01b039384160217905561013380546001600160a01b0319908116888416179091556101318054821687841617905561013280548216868416179055610134805490911691841691909117905580156123c1576000805461ff00191690555b5050505050565b60006123d26113ec565b15612417576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6002600154141561245d576040805162461bcd60e51b815260206004820152601f6024820152600080516020615667833981519152604482015290519081900360640190fd5b60026001556101305482906001600160a01b0380831661010090920416148061248a575061248a81612fe8565b6124a65760405162461bcd60e51b8152600401610ade906153b1565b60006124b0612db2565b90506124bc8185610bbc565b92506124c981858561358f565b505060018055919050565b6101325460405163bba85bcf60e01b8152600091829182916001600160a01b03169063bba85bcf9061250a9087906004016151f3565b60606040518083038186803b15801561252257600080fd5b505afa158015612536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255a91906150d6565b5091505061256784613740565b91506125738282613769565b925050915091565b600080600061258984612a4a565b90925090506125988282613769565b949350505050565b6000600160ff1b82136125c55760405162461bcd60e51b8152600401610ade90615470565b5060000390565b600080821215612623576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b5090565b6001600160a01b038116600090815261013a602090815260408083208054825181850281018501909352808352849383018282801561268f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612671575b505083519394506000925050505b8181101561277b5760008382815181106126b357fe5b6020026020010151905060006126c987836137ce565b61013854604051631ed4896760e31b81529192506000916001600160a01b039091169063f6a44b38906127009086906004016151f3565b60806040518083038186803b15801561271857600080fd5b505afa15801561272c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127509190615103565b60200151905061276a6127638383612783565b8890613801565b9650506001909201915061269d9050565b505050919050565b60006110ee838362ffffff16620f424061385b565b60006110ee8360ff601285900316600a0a61390a565b60006127b8612db2565b6101305490915061010090046001600160a01b03166127d8818386613971565b6127eb86866127e686613aa2565b613ab6565b610138546040805163ddb1381360e01b815290516000926001600160a01b03169163ddb13813916004808301926020929190829003018186803b15801561283157600080fd5b505afa158015612845573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612869919061517a565b905060006128778683612783565b61013354909150612895906001600160a01b0316846127e684613140565b60006128a18783613d3f565b90506128b189856127e684613140565b6128bc888688613d96565b61013854604051631ed4896760e31b81526000916001600160a01b03169063f6a44b38906128ee908c906004016151f3565b60806040518083038186803b15801561290657600080fd5b505afa15801561291a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293e9190615103565b604001519050856001600160a01b0316896001600160a01b03168b6001600160a01b03167fbd3320c61b99a54ed3537dce8a75020f70b61d6dd124b6aa28738d1bab9bf77d8a8688876040516129979493929190615604565b60405180910390a450505050505050505050565b6000610d226108b1612a438461013160009054906101000a90046001600160a01b03166001600160a01b031663543ce73a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a0657600080fd5b505afa158015612a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3e919061517a565b612f63565b6000613de8565b610134546040516380f57f1160e01b8152600091829182916001600160a01b0316906380f57f1190612a809087906004016151f3565b60206040518083038186803b158015612a9857600080fd5b505afa158015612aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad091906150be565b6101325460405163bba85bcf60e01b815291925060009182916001600160a01b03169063bba85bcf90612b079089906004016151f3565b60606040518083038186803b158015612b1f57600080fd5b505afa158015612b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5791906150d6565b9095509092509050612b99612b7f83612b7986612b7386613140565b90613df8565b90613769565b61013054612b799060ff16612b938a6120d4565b90613e5d565b9450505050915091565b6000818310612bb257816110ee565b5090919050565b610138546101315460408051633e742e3b60e01b8152905160009384936001600160a01b039182169363449e815d93889390921691633e742e3b91600480820192602092909190829003018186803b158015612c1457600080fd5b505afa158015612c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4c91906151ae565b6040518363ffffffff1660e01b8152600401612c69929190615207565b60206040518083038186803b158015612c8157600080fd5b505afa158015612c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb991906150be565b61013854604051638c8557d960e01b81526001600160a01b0390911690638c8557d990612cea9087906004016151f3565b60206040518083038186803b158015612d0257600080fd5b505afa158015612d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3a91906151d2565b91509150915091565b600080612d4f86613e73565b905060128160ff1611612d7f57612d7a601282612d738860ff8816600a0a89613ee6565b9190613f20565b611b8c565b611b8c60ff8416600a0a85612d9688601286613f20565b9190613ee6565b60006110ee83620f42408462ffffff1661385b565b6000612dbc613f6d565b905090565b61013954612dd7906001600160a01b0316612fe8565b6110ce5760405162461bcd60e51b8152600401610ade90615585565b610139546001600160a01b0316612e0b838284613f9d565b604051632e1a7d4d60e01b81526001600160a01b03821690632e1a7d4d90612e3790859060040161527e565b600060405180830381600087803b158015612e5157600080fd5b505af1158015612e65573d6000803e3d6000fd5b50505050612e73838361420e565b826001600160a01b0316816001600160a01b03167fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb84604051612eb6919061527e565b60405180910390a3505050565b612ecb6113ec565b612f13576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6099805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612f46612db2565b604080516001600160a01b039092168252519081900360200190a1565b6000806000612f71856124d4565b915091506000612f8186866142fd565b9050611b8c612f8f82613140565b612b73848661438f565b600060ff601283900316600a0a818085128015612fc15750818560000381612fbd57fe5b0615155b15612fcb57506000195b612fd981612b79878561439e565b95945050505050565b3b151590565b610138546040516303b8879560e21b81526000916001600160a01b031690630ee21e549061301a9085906004016151f3565b60206040518083038186803b15801561303257600080fd5b505afa158015613046573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2291906150a2565b6000811161308a5760405162461bcd60e51b8152600401610ade90615433565b613095828583613971565b6130a0828483614456565b50505050565b34806130c45760405162461bcd60e51b8152600401610ade90615433565b6130cc612dc1565b6101395460408051630d0e30db60e41b815290516001600160a01b0390921691829163d0e30db091859160048082019260009290919082900301818588803b15801561311757600080fd5b505af115801561312b573d6000803e3d6000fd5b505050505061313b818484614456565b505050565b60006001600160ff1b038211156126235760405162461bcd60e51b815260040180806020018281038252602881526020018061575f6028913960400191505060405180910390fd5b6131906113ec565b156131d5576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6099805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612f46612db2565b6000806132178361257b565b90506000808212613229576000613235565b6132356108b1836125a0565b905060006132c98561013160009054906101000a90046001600160a01b03166001600160a01b031663543ce73a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561328c57600080fd5b505afa1580156132a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c4919061517a565b6142fd565b905060006132d78383614709565b6101305461013854604080516348896fcd60e01b8152905193945060009361336a9360ff16926001600160a01b0316916348896fcd916004808301926020929190829003018186803b15801561332c57600080fd5b505afa158015613340573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336491906150be565b90613525565b9050600081831161337b57826133f9565b610138546040805162db540160e11b815290516133f9926001600160a01b0316916301b6a802916004808301926020929190829003018186803b1580156133c157600080fd5b505afa1580156133d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611825919061517a565b905061349961349261013860009054906101000a90046001600160a01b03166001600160a01b031663ddb138136040518163ffffffff1660e01b815260040160206040518083038186803b15801561345057600080fd5b505afa158015613464573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613488919061517a565b620f4240906134a5565b8290612d9d565b98975050505050505050565b60008262ffffff168262ffffff1611156134d15760405162461bcd60e51b8152600401610ade9061531a565b50900390565b6000806134e386613e73565b905060128160ff161161350e57612d7a8460ff8516600a0a61350788856012613f20565b919061385b565b611b8c816012612d73888860ff8916600a0a61385b565b60006110ee8360ff601285900316600a0a614719565b60fd80546001600160a01b0383166001600160a01b0319909116811790915560408051918252517fa4388ecc389b1390354ae0c65a856c0d7dd4fb648419f5d3ac0b99e38f46fd119181900360200190a150565b61359a838383613f9d565b6135a5828483613d96565b826001600160a01b0316826001600160a01b03167fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb83604051612eb6919061527e565b60006135f330612fe2565b15905090565b600054610100900460ff168061361257506136126135e8565b80613620575060005460ff16155b61365b5760405162461bcd60e51b815260040180806020018281038252602e8152602001806156a8602e913960400191505060405180910390fd5b600054610100900460ff16158015613686576000805460ff1961ff0019909116610100171660011790555b61368e614772565b80156136a0576000805461ff00191690555b50565b600054610100900460ff16806136bc57506136bc6135e8565b806136ca575060005460ff16155b6137055760405162461bcd60e51b815260040180806020018281038252602e8152602001806156a8602e913960400191505060405180910390fd5b600054610100900460ff16158015613730576000805460ff1961ff0019909116610100171660011790555b613738614817565b61368e614906565b60008061374c83612a4a565b509050600061375a84612627565b905061259882612b7983613140565b600082820181831280159061377e5750838112155b80613793575060008312801561379357508381125b6110ee5760405162461bcd60e51b81526004018080602001828103825260218152602001806156876021913960400191505060405180910390fd5b6000806137db8484610e93565b90506000806137e985612bb9565b91509150611b8c856137fa856125cc565b84846134d7565b6000828201838110156110ee576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000808060001985870986860292508281109083900303905080613891576000841161388657600080fd5b5082900490506110ee565b80841161389d57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000808211613960576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161396957fe5b049392505050565b6040516370a0823160e01b81526000906001600160a01b038516906370a08231906139a09030906004016151f3565b60206040518083038186803b1580156139b857600080fd5b505afa1580156139cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139f091906150be565b90506139fe848430856149a3565b81613a8582866001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613a2f91906151f3565b60206040518083038186803b158015613a4757600080fd5b505afa158015613a5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a7f91906150be565b90613d3f565b146130a05760405162461bcd60e51b8152600401610ade906152fb565b6000613aad82613140565b60000392915050565b6001600160a01b0380841660009081526101376020908152604080832093861683529290529081205490613aea8284613769565b6001600160a01b03808716600090815261013760209081526040808320898516808552925290912083905561013054929350610100909204161415613b3057505061313b565b8115801590613b3d575080155b15613c4d576001600160a01b038516600090815261013a60205260408120805490916000198201905b82811015613c4457876001600160a01b0316848281548110613b8457fe5b6000918252602090912001546001600160a01b03161415613c3c57818114613c0b57838281548110613bb257fe5b9060005260206000200160009054906101000a90046001600160a01b0316848281548110613bdc57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b83805480613c1557fe5b600082815260209020810160001990810180546001600160a01b0319169055019055613c44565b600101613b66565b505050506123c1565b81158015613c5a57508015155b156123c1576001600160a01b03858116600090815261013a6020908152604080832080546001810182558185529383902090930180546001600160a01b031916898616179055610138548151630262771f60e01b8152915193941692630262771f92600480840193919291829003018186803b158015613cd957600080fd5b505afa158015613ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d1191906151d2565b60ff1681805490501115613d375760405162461bcd60e51b8152600401610ade90615371565b505050505050565b6000828211156134d1576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261313b9084906149f9565b600081831215612bb257816110ee565b6000818303818312801590613e0d5750838113155b80613e225750600083128015613e2257508381135b6110ee5760405162461bcd60e51b81526004018080602001828103825260248152602001806157876024913960400191505060405180910390fd5b60006110ee8360ff601285900316600a0a614aaa565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613eae57600080fd5b505afa158015613ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2291906151d2565b6000613ef384848461385b565b905060008280613eff57fe5b84860911156110ee576000198110613f1657600080fd5b6001019392505050565b60008160ff168360ff161415613f375750826110ee565b8160ff168360ff1611613f5b57613f568460ff85850316600a0a614719565b612598565b6125988460ff84860316600a0a61390a565b600060143610801590613f845750613f84336113b6565b15613f98575060131936013560601c610bb9565b503390565b610135546040516375cdc89760e11b81526001600160a01b039091169063eb9b912e90613fce9086906004016151f3565b600060405180830381600087803b158015613fe857600080fd5b505af1158015613ffc573d6000803e3d6000fd5b50505050600061400c8484610bbc565b90508181101561402e5760405162461bcd60e51b8152600401610ade90615545565b600061404161403c84613140565b6125a0565b610130549091506001600160a01b03858116610100909204161415614203576040516370a0823160e01b81526000906001600160a01b038616906370a082319061408f9030906004016151f3565b60206040518083038186803b1580156140a757600080fd5b505afa1580156140bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140df91906150be565b90508381101561415a576101335460405163317afabb60e21b8152828603916001600160a01b03169063c5ebeaec9061411c90849060040161527e565b600060405180830381600087803b15801561413657600080fd5b505af115801561414a573d6000803e3d6000fd5b5050610136805490930190925550505b6101325460405163fd6ceee560e01b81526000916001600160a01b03169063fd6ceee59061418c908a906004016151f3565b602060405180830381600087803b1580156141a657600080fd5b505af11580156141ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141de91906150be565b610130549091506141fe906141f790839060ff16612f99565b8490613769565b925050505b6123c1858583613ab6565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b6020831061425a5780518252601f19909201916020918201910161423b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146142bc576040519150601f19603f3d011682016040523d82523d6000602084013e6142c1565b606091505b505090508061313b576040805162461bcd60e51b815260206004820152600360248201526253544560e81b604482015290519081900360640190fd5b6101325460405163293a507760e01b815260009182916001600160a01b039091169063293a5077906143339087906004016151f3565b60206040518083038186803b15801561434b57600080fd5b505afa15801561435f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061438391906150be565b90506125988184612783565b6000818312612bb257816110ee565b6000816143f2576040805162461bcd60e51b815260206004820181905260248201527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604482015290519081900360640190fd5b816000191480156144065750600160ff1b83145b156144425760405162461bcd60e51b81526004018080602001828103825260218152602001806156d66021913960400191505060405180910390fd5b600082848161444d57fe5b05949350505050565b610130546001600160a01b038481166101009092041614156145935761013154604080516385eacc7760e01b815290516000926001600160a01b0316916385eacc77916004808301926020929190829003018186803b1580156144b857600080fd5b505afa1580156144cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144f091906150be565b905080846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161451f91906151f3565b60206040518083038186803b15801561453757600080fd5b505afa15801561454b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061456f91906150be565b111561458d5760405162461bcd60e51b8152600401610ade90615411565b506146b8565b61013854604051631ed4896760e31b81526000916001600160a01b03169063f6a44b38906145c59087906004016151f3565b60806040518083038186803b1580156145dd57600080fd5b505afa1580156145f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146159190615103565b60600151905080846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161464891906151f3565b60206040518083038186803b15801561466057600080fd5b505afa158015614674573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061469891906150be565b11156146b65760405162461bcd60e51b8152600401610ade90615351565b505b6146c682846127e684613140565b816001600160a01b0316836001600160a01b03167f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a783604051612eb6919061527e565b600081831015612bb257816110ee565b60008261472857506000610d22565b8282028284828161473557fe5b04146110ee5760405162461bcd60e51b81526004018080602001828103825260218152602001806156f76021913960400191505060405180910390fd5b600054610100900460ff168061478b575061478b6135e8565b80614799575060005460ff16155b6147d45760405162461bcd60e51b815260040180806020018281038252602e8152602001806156a8602e913960400191505060405180910390fd5b600054610100900460ff161580156147ff576000805460ff1961ff0019909116610100171660011790555b6001805580156136a0576000805461ff001916905550565b600054610100900460ff168061483057506148306135e8565b8061483e575060005460ff16155b6148795760405162461bcd60e51b815260040180806020018281038252602e8152602001806156a8602e913960400191505060405180910390fd5b600054610100900460ff161580156148a4576000805460ff1961ff0019909116610100171660011790555b6148ac614b53565b60006148b6612db2565b606580546001600160a01b0319166001600160a01b03831690811790915560405191925090600090600080516020615718833981519152908290a35080156136a0576000805461ff001916905550565b600054610100900460ff168061491f575061491f6135e8565b8061492d575060005460ff16155b6149685760405162461bcd60e51b815260040180806020018281038252602e8152602001806156a8602e913960400191505060405180910390fd5b600054610100900460ff16158015614993576000805460ff1961ff0019909116610100171660011790555b61499b614be4565b61368e614c84565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526130a09085905b6000614a4e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614d2f9092919063ffffffff16565b80519091501561313b57808060200190516020811015614a6d57600080fd5b505161313b5760405162461bcd60e51b815260040180806020018281038252602a8152602001806157ab602a913960400191505060405180910390fd5b600082614ab957506000610d22565b82600019148015614acd5750600160ff1b82145b15614b095760405162461bcd60e51b81526004018080602001828103825260278152602001806157386027913960400191505060405180910390fd5b82820282848281614b1657fe5b05146110ee5760405162461bcd60e51b81526004018080602001828103825260278152602001806157386027913960400191505060405180910390fd5b600054610100900460ff1680614b6c5750614b6c6135e8565b80614b7a575060005460ff16155b614bb55760405162461bcd60e51b815260040180806020018281038252602e8152602001806156a8602e913960400191505060405180910390fd5b600054610100900460ff16158015614be0576000805460ff1961ff0019909116610100171660011790555b61368e5b600054610100900460ff1680614bfd5750614bfd6135e8565b80614c0b575060005460ff16155b614c465760405162461bcd60e51b815260040180806020018281038252602e8152602001806156a8602e913960400191505060405180910390fd5b600054610100900460ff1615801561368e576000805460ff1961ff00199091166101001716600117905580156136a0576000805461ff001916905550565b600054610100900460ff1680614c9d5750614c9d6135e8565b80614cab575060005460ff16155b614ce65760405162461bcd60e51b815260040180806020018281038252602e8152602001806156a8602e913960400191505060405180910390fd5b600054610100900460ff16158015614d11576000805460ff1961ff0019909116610100171660011790555b6099805460ff1916905580156136a0576000805461ff001916905550565b6060612598848460008585614d4385612fe2565b614d94576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310614dd25780518252601f199092019160209182019101614db3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614e34576040519150601f19603f3d011682016040523d82523d6000602084013e614e39565b606091505b5091509150614e49828286614e54565b979650505050505050565b60608315614e635750816110ee565b825115614e735782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614ebd578181015183820152602001614ea5565b50505050905090810190601f168015614eea5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b600060208284031215614f09578081fd5b81356110ee81615632565b600060208284031215614f25578081fd5b81516110ee81615632565b60008060408385031215614f42578081fd5b8235614f4d81615632565b91506020830135614f5d81615632565b809150509250929050565b60008060008060808587031215614f7d578182fd5b8435614f8881615632565b93506020850135614f9881615632565b92506040850135614fa881615632565b91506060850135614fb881615632565b939692955090935050565b600080600060608486031215614fd7578283fd5b8335614fe281615632565b92506020840135614ff281615632565b929592945050506040919091013590565b60008060008060808587031215615018578384fd5b843561502381615632565b9350602085013561503381615632565b9250604085013591506060850135614fb881615647565b6000806040838503121561505c578182fd5b823561506781615632565b91506020830135614f5d81615655565b60008060408385031215615089578182fd5b823561509481615632565b946020939093013593505050565b6000602082840312156150b3578081fd5b81516110ee81615647565b6000602082840312156150cf578081fd5b5051919050565b6000806000606084860312156150ea578283fd5b8351925060208401519150604084015190509250925092565b600060808284031215615114578081fd5b6040516080810181811067ffffffffffffffff8211171561513157fe5b604052825161513f81615632565b8152602083015161514f81615655565b6020820152604083015161516281615655565b60408201526060928301519281019290925250919050565b60006020828403121561518b578081fd5b81516110ee81615655565b6000602082840312156151a7578081fd5b5035919050565b6000602082840312156151bf578081fd5b815163ffffffff811681146110ee578182fd5b6000602082840312156151e3578081fd5b815160ff811681146110ee578182fd5b6001600160a01b0391909116815260200190565b6001600160a01b0392909216825263ffffffff16602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156152675783516001600160a01b031683529284019291840191600101615242565b50909695505050505050565b901515815260200190565b90815260200190565b6000602080835283518082850152825b818110156152b357858101830151858201604001528201615297565b818111156152c45783604083870101525b50601f01601f1916929092016040019392505050565b602080825260079082015266565f4348434e4360c81b604082015260600190565b602080825260059082015264565f49424160d81b604082015260600190565b6020808252601e908201527f506572704d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b602080825260069082015265565f4754444360d01b604082015260600190565b602080825260069082015265565f43544e4560d01b604082015260600190565b602080825260069082015265565f4d43414560d01b604082015260600190565b6020808252600690820152651597d3d4d0d560d21b604082015260600190565b602080825260069082015265565f43484e4360d01b604082015260600190565b602080825260069082015265565f44465a4160d01b604082015260600190565b602080825260089082015267565f47545354424360c01b604082015260600190565b602080825260049082015263565f5a4160e01b604082015260600190565b602080825260059082015264565f454e4360d81b604082015260600190565b6020808252601c908201527f506572704d6174683a20696e76657273696f6e206f766572666c6f7700000000604082015260600190565b602080825260069082015265565f4d53414560d01b604082015260600190565b602080825260069082015265565f54464e4360d01b604082015260600190565b6020808252600490820152631597d39360e21b604082015260600190565b602080825260059082015264565f574e4360d81b604082015260600190565b602080825260079082015266565f54494e414360c81b604082015260600190565b602080825260069082015265565f4e45464360d01b604082015260600190565b602080825260069082015265565f434d4e4360d01b604082015260600190565b602080825260079082015266565f57494e414360c81b604082015260600190565b602080825260069082015265565f41424e4360d01b604082015260600190565b6020808252600690820152651597d254d51160d21b604082015260600190565b62ffffff91909116815260200190565b918252602082015260400190565b9384526020840192909252604083015262ffffff16606082015260800190565b60ff91909116815260200190565b6001600160a01b03811681146136a057600080fd5b80151581146136a057600080fd5b62ffffff811681146136a057600080fdfe5265656e7472616e637947756172643a207265656e7472616e742063616c6c005369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65645369676e6564536166654d6174683a206469766973696f6e206f766572666c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f778be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220067732f4537085a452a95dfde61a1af2487a9b46cd54aa25f12c5df1db2d40ba64736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "candidate()": {
        "details": "Returns the candidate that can become the owner."
      },
      "decimals()": {
        "details": "cached the settlement token's decimal for gas optimization",
        "returns": {
          "_0": "The decimals of settlement token"
        }
      },
      "deposit(address,uint256)": {
        "params": {
          "amount": "The amount of the token to deposit",
          "token": "The address of the token to deposit"
        }
      },
      "depositEtherFor(address)": {
        "params": {
          "to": "The address of the account to deposit to"
        }
      },
      "depositFor(address,address,uint256)": {
        "params": {
          "amount": "The amount of the token to deposit",
          "to": "The address of the account to deposit to",
          "token": "The address of collateral token"
        }
      },
      "getAccountBalance()": {
        "returns": {
          "_0": "The address of `AccountBalance` contract"
        }
      },
      "getAccountValue(address)": {
        "params": {
          "trader": "The address of the trader"
        },
        "returns": {
          "_0": "account value (in settlement token's decimals)"
        }
      },
      "getBalance(address)": {
        "details": "The function is equivalent to `getBalanceByToken(trader, settlementToken)`      We keep this function solely for backward-compatibility with the older single-collateral system.      In practical applications, the developer might want to use `getSettlementTokenValue()` instead      because the latter includes pending fee, funding payment etc.      and therefore more accurately reflects a trader's settlement (ex. USDC) balance",
        "returns": {
          "_0": "The balance amount (in settlement token's decimals)"
        }
      },
      "getBalanceByToken(address,address)": {
        "params": {
          "token": "The address of the collateral token",
          "trader": "The address of the trader"
        },
        "returns": {
          "_0": "The balance amount (in its native decimals)"
        }
      },
      "getClearingHouse()": {
        "returns": {
          "_0": "The address of `ClearingHouse` contract"
        }
      },
      "getClearingHouseConfig()": {
        "returns": {
          "_0": "The address of `ClearingHouseConfig` contract"
        }
      },
      "getCollateralManager()": {
        "returns": {
          "_0": "The address of `CollateralManager` contract"
        }
      },
      "getCollateralMmRatio()": {
        "returns": {
          "_0": "The maintenance margin ratio for collateral liquidation"
        }
      },
      "getCollateralTokens(address)": {
        "returns": {
          "_0": "array of collateral token addresses"
        }
      },
      "getExchange()": {
        "returns": {
          "_0": "The address of `Exchange` contract"
        }
      },
      "getFreeCollateral(address)": {
        "params": {
          "trader": "The address of the trader"
        },
        "returns": {
          "_0": "the value (in settlement token's decimals) of free collateral available         for withdraw or opening new positions or orders)"
        }
      },
      "getFreeCollateralByRatio(address,uint24)": {
        "details": "There are three configurations for different insolvency risk tolerances:      **conservative, moderate &aggressive**. We will start with the **conservative** one      and gradually move to **aggressive** to increase capital efficiency",
        "params": {
          "ratio": "The margin requirement ratio, imRatio or mmRatio",
          "trader": "The address of the trader"
        },
        "returns": {
          "_0": "freeCollateral (in settlement token's decimals), by using the         input margin requirement ratio; can be negative"
        }
      },
      "getFreeCollateralByToken(address,address)": {
        "details": "getFreeCollateralByToken(token) = (getSettlementTokenValue() >= 0)   ? min(getFreeCollateral() / indexPrice[token], getBalanceByToken(token))   : 0if token is settlementToken, then indexPrice[token] = 1",
        "params": {
          "token": "The address of the collateral token",
          "trader": "The address of the trader"
        },
        "returns": {
          "_0": "amount of that token (in the token's native decimals)"
        }
      },
      "getInsuranceFund()": {
        "returns": {
          "_0": "The address of `InsuranceFund` contract"
        }
      },
      "getLiquidatableCollateralBySettlement(address,uint256)": {
        "params": {
          "settlementX10_S": "The amount of settlement token the liquidator wants to pay",
          "token": "The address of the token of the trader's collateral"
        },
        "returns": {
          "collateral": "The collateral amount(in its native decimals) the liquidator can get"
        }
      },
      "getMarginRequirementForCollateralLiquidation(address)": {
        "details": "this value is compared with `ClearingHouse.getAccountValue()` (int)",
        "params": {
          "trader": "The address of the trader"
        },
        "returns": {
          "_0": "margin requirement (in 18 decimals)"
        }
      },
      "getMaxRepaidSettlementAndLiquidatableCollateral(address,address)": {
        "details": "formula: maxRepaidSettlement = maxLiquidatableCollateral * (indexTwap * (1 - discountRatio)) maxLiquidatableCollateral =     min(maxRepaidSettlement / (indexTwap * (1 - discountRatio)), getBalanceByToken(trader, token))",
        "params": {
          "token": "The address of the token of the trader's collateral",
          "trader": "The address of the trader"
        },
        "returns": {
          "maxLiquidatableCollateral": "The maximum liquidatable collateral amount         (in the collateral token's native decimals) of a trader",
          "maxRepaidSettlementX10_S": "The maximum settlement amount(in settlement token's decimals)         the liquidator needs to pay to liquidate a trader's collateral token"
        }
      },
      "getRepaidSettlementByCollateral(address,uint256)": {
        "params": {
          "collateral": "The amount of collateral token the liquidator wants to get",
          "token": "The address of the token of the trader's collateral"
        },
        "returns": {
          "settlementX10_S": "The settlement amount(in settlement token's decimals) the liquidator needs to pay"
        }
      },
      "getSettlementToken()": {
        "details": "We assume the settlement token should match the denominator of the price oracle.      i.e. if the settlement token is USDC, then the oracle should be priced in USD",
        "returns": {
          "_0": "The address of the settlement token"
        }
      },
      "getSettlementTokenValue(address)": {
        "details": "Note the difference between `settlementTokenBalanceX10_S`, `getSettlementTokenValue()` and `getBalance()`:      They are all settlement token balances but with or without      pending fee, funding payment, owed realized PnL, unrealized PnL, respectively      In practical applications, we use `getSettlementTokenValue()` to get the trader's debt (if < 0)",
        "params": {
          "trader": "The address of the trader"
        },
        "returns": {
          "_0": "The balance amount (in settlement token's decimals)"
        }
      },
      "getTotalDebt()": {
        "returns": {
          "_0": "The debt amount (in settlement token's decimals)"
        }
      },
      "getWETH9()": {
        "returns": {
          "_0": "The address of `WETH9` contract"
        }
      },
      "isLiquidatable(address)": {
        "params": {
          "trader": "The address of the trader"
        },
        "returns": {
          "_0": "If the trader can be liquidated"
        }
      },
      "liquidateCollateral(address,address,uint256,bool)": {
        "params": {
          "amount": "The amount of settlement token that the liquidator will repay for trader or               the amount of non-settlement collateral token that the liquidator will charge from trader",
          "isDenominatedInSettlementToken": "Whether the amount is denominated in settlement token or not",
          "token": "The address of non settlement collateral token that the trader will be liquidated",
          "trader": "The address of trader that will be liquidated"
        },
        "returns": {
          "_0": "The amount of a non-settlement token (in its native decimals) that is liquidated         when `isDenominatedInSettlementToken` is true or the amount of settlement token that is repaid         when `isDenominatedInSettlementToken` is false"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOwner(address)": {
        "details": "Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateOwner()": {
        "details": "Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner."
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "The amount of the token to withdraw",
          "token": "The address of the token to withdraw"
        }
      },
      "withdrawAll(address)": {
        "params": {
          "token": "The address of the token to withdraw"
        },
        "returns": {
          "amount": "The amount of the token withdrawn"
        }
      },
      "withdrawAllEther()": {
        "returns": {
          "amount": "The amount of ETH withdrawn"
        }
      },
      "withdrawEther(uint256)": {
        "params": {
          "amount": "The amount of the ETH to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ClearingHouseChanged(address)": {
        "notice": "Emitted when clearingHouse is changed"
      },
      "CollateralLiquidated(address,address,address,uint256,uint256,uint256,uint24)": {
        "notice": "Emitted when a trader's collateral is liquidated"
      },
      "CollateralManagerChanged(address)": {
        "notice": "Emitted when collateralManager is changed"
      },
      "Deposited(address,address,uint256)": {
        "notice": "Emitted when trader deposit collateral into vault"
      },
      "TrustedForwarderChanged(address)": {
        "notice": "Emitted when trustedForwarder is changed"
      },
      "WETH9Changed(address)": {
        "notice": "Emitted when WETH9 is changed"
      },
      "Withdrawn(address,address,uint256)": {
        "notice": "Emitted when trader withdraw collateral from vault"
      }
    },
    "kind": "user",
    "methods": {
      "decimals()": {
        "notice": "Get settlement token decimals"
      },
      "deposit(address,uint256)": {
        "notice": "Deposit collateral into vault"
      },
      "depositEther()": {
        "notice": "Deposit ETH as collateral into vault"
      },
      "depositEtherFor(address)": {
        "notice": "Deposit ETH as collateral for specified account"
      },
      "depositFor(address,address,uint256)": {
        "notice": "Deposit the collateral token for other account"
      },
      "getAccountBalance()": {
        "notice": "Get `AccountBalance` contract address"
      },
      "getAccountValue(address)": {
        "notice": "Get account value of the specified trader"
      },
      "getBalance(address)": {
        "notice": "Get the specified trader's settlement token balance, without pending fee, funding payment         and owed realized PnL"
      },
      "getBalanceByToken(address,address)": {
        "notice": "Get the balance of Vault of the specified collateral token and trader"
      },
      "getClearingHouse()": {
        "notice": "Get `ClearingHouse` contract address"
      },
      "getClearingHouseConfig()": {
        "notice": "Get `ClearingHouseConfig` contract address"
      },
      "getCollateralManager()": {
        "notice": "Get `CollateralManager` contract address"
      },
      "getCollateralMmRatio()": {
        "notice": "Get the maintenance margin ratio for collateral liquidation"
      },
      "getCollateralTokens(address)": {
        "notice": "Get they array of collateral token addresses that a trader has"
      },
      "getExchange()": {
        "notice": "Get `Exchange` contract address"
      },
      "getFreeCollateral(address)": {
        "notice": "Get the free collateral value denominated in the settlement token of the specified trader"
      },
      "getFreeCollateralByRatio(address,uint24)": {
        "notice": "Get the free collateral amount of the specified trader and collateral ratio"
      },
      "getFreeCollateralByToken(address,address)": {
        "notice": "Get the free collateral amount of the specified collateral token of specified trader"
      },
      "getInsuranceFund()": {
        "notice": "Get `InsuranceFund` contract address"
      },
      "getLiquidatableCollateralBySettlement(address,uint256)": {
        "notice": "Get a trader's liquidatable collateral amount by a given settlement amount"
      },
      "getMarginRequirementForCollateralLiquidation(address)": {
        "notice": "get the margin requirement for collateral liquidation of a trader"
      },
      "getMaxRepaidSettlementAndLiquidatableCollateral(address,address)": {
        "notice": "Get a trader's max repaid settlement & max liquidatable collateral by a given collateral token"
      },
      "getRepaidSettlementByCollateral(address,uint256)": {
        "notice": "Get a trader's repaid settlement amount by a given collateral amount"
      },
      "getSettlementToken()": {
        "notice": "Get the settlement token address"
      },
      "getSettlementTokenValue(address)": {
        "notice": "Get the specified trader's settlement value, including pending fee, funding payment,         owed realized PnL and unrealized PnL"
      },
      "getTotalDebt()": {
        "notice": "Get the borrowed settlement token amount from insurance fund"
      },
      "getWETH9()": {
        "notice": "Get `WETH9` contract address"
      },
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      },
      "liquidateCollateral(address,address,uint256,bool)": {
        "notice": "Liquidate trader's collateral by given settlement token amount or non settlement token amount"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraw collateral from vault"
      },
      "withdrawAll(address)": {
        "notice": "Withdraw all free collateral from vault"
      },
      "withdrawAllEther()": {
        "notice": "Withdraw all free collateral of ETH from vault"
      },
      "withdrawEther(uint256)": {
        "notice": "Withdraw ETH from vault"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1158,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1161,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3095,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3138,
        "contract": "contracts/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2475,
        "contract": "contracts/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 27037,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 27039,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_candidate",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 27043,
        "contract": "contracts/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2989,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_paused",
        "offset": 0,
        "slot": "153",
        "type": "t_bool"
      },
      {
        "astId": 3080,
        "contract": "contracts/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 26976,
        "contract": "contracts/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 27292,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "253",
        "type": "t_address"
      },
      {
        "astId": 27296,
        "contract": "contracts/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 32461,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_decimals",
        "offset": 0,
        "slot": "304",
        "type": "t_uint8"
      },
      {
        "astId": 32463,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_settlementToken",
        "offset": 1,
        "slot": "304",
        "type": "t_address"
      },
      {
        "astId": 32465,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_clearingHouseConfig",
        "offset": 0,
        "slot": "305",
        "type": "t_address"
      },
      {
        "astId": 32467,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_accountBalance",
        "offset": 0,
        "slot": "306",
        "type": "t_address"
      },
      {
        "astId": 32469,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_insuranceFund",
        "offset": 0,
        "slot": "307",
        "type": "t_address"
      },
      {
        "astId": 32471,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_exchange",
        "offset": 0,
        "slot": "308",
        "type": "t_address"
      },
      {
        "astId": 32473,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_clearingHouse",
        "offset": 0,
        "slot": "309",
        "type": "t_address"
      },
      {
        "astId": 32475,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_totalDebt",
        "offset": 0,
        "slot": "310",
        "type": "t_uint256"
      },
      {
        "astId": 32481,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_balance",
        "offset": 0,
        "slot": "311",
        "type": "t_mapping(t_address,t_mapping(t_address,t_int256))"
      },
      {
        "astId": 32486,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_collateralManager",
        "offset": 0,
        "slot": "312",
        "type": "t_address"
      },
      {
        "astId": 32488,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_WETH9",
        "offset": 0,
        "slot": "313",
        "type": "t_address"
      },
      {
        "astId": 32493,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_collateralTokensMap",
        "offset": 0,
        "slot": "314",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_mapping(t_address,t_int256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int256)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}